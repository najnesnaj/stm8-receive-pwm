                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.0 #8981 (Jul  5 2014) (Linux)
                                      4 ; This file was generated Wed Jul  5 18:42:51 2017
                                      5 ;--------------------------------------------------------
                                      6 	.module se8r01_receive_pwm
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _main
                                     13 	.globl _Init_Tim2
                                     14 	.globl _SE8R01_Init
                                     15 	.globl _SE8R01_Analog_Init
                                     16 	.globl _SE8R01_Calibration
                                     17 	.globl _rf_switch_bank
                                     18 	.globl _init_io
                                     19 	.globl _InitializeUART
                                     20 	.globl _print_UCHAR_hex
                                     21 	.globl _UARTPrintF
                                     22 	.globl _delay
                                     23 	.globl _InitializeSystemClock
                                     24 	.globl _InitializeSPI
                                     25 	.globl _read_spi_buf
                                     26 	.globl _write_spi_buf
                                     27 	.globl _read_spi_reg
                                     28 	.globl _write_spi_reg
                                     29 	.globl _write_spi
                                     30 	.globl _delayTenMicro
                                     31 	.globl _memset
                                     32 	.globl _tx_buf
                                     33 	.globl _rx_buf
                                     34 	.globl _ADDRESS0
                                     35 	.globl _ADDRESS1
                                     36 	.globl _ADDRESS5
                                     37 	.globl _ADDRESS4
                                     38 	.globl _ADDRESS3
                                     39 	.globl _ADDRESS2
                                     40 	.globl _TX_ADDRESS
                                     41 	.globl _status
                                     42 	.globl _pip
                                     43 	.globl _signal_lv
                                     44 	.globl _newdata
                                     45 	.globl _pload_width_now
                                     46 	.globl _SE8R01_DR_500K
                                     47 	.globl _SE8R01_DR_1M
                                     48 	.globl _SE8R01_DR_2M
                                     49 	.globl _myData_pip4
                                     50 	.globl _myData_pip5
                                     51 	.globl _gtemp
                                     52 ;--------------------------------------------------------
                                     53 ; ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area DATA
      000000                         56 _gtemp::
      000000                         57 	.ds 5
      000005                         58 _myData_pip5::
      000005                         59 	.ds 5
      00000A                         60 _myData_pip4::
      00000A                         61 	.ds 5
                                     62 ;--------------------------------------------------------
                                     63 ; ram data
                                     64 ;--------------------------------------------------------
                                     65 	.area INITIALIZED
      000000                         66 _SE8R01_DR_2M::
      000000                         67 	.ds 2
      000002                         68 _SE8R01_DR_1M::
      000002                         69 	.ds 2
      000004                         70 _SE8R01_DR_500K::
      000004                         71 	.ds 2
      000006                         72 _pload_width_now::
      000006                         73 	.ds 2
      000008                         74 _newdata::
      000008                         75 	.ds 2
      00000A                         76 _signal_lv::
      00000A                         77 	.ds 1
      00000B                         78 _pip::
      00000B                         79 	.ds 2
      00000D                         80 _status::
      00000D                         81 	.ds 1
      00000E                         82 _TX_ADDRESS::
      00000E                         83 	.ds 4
      000012                         84 _ADDRESS2::
      000012                         85 	.ds 1
      000013                         86 _ADDRESS3::
      000013                         87 	.ds 1
      000014                         88 _ADDRESS4::
      000014                         89 	.ds 1
      000015                         90 _ADDRESS5::
      000015                         91 	.ds 1
      000016                         92 _ADDRESS1::
      000016                         93 	.ds 4
      00001A                         94 _ADDRESS0::
      00001A                         95 	.ds 4
      00001E                         96 _rx_buf::
      00001E                         97 	.ds 32
      00003E                         98 _tx_buf::
      00003E                         99 	.ds 32
                                    100 ;--------------------------------------------------------
                                    101 ; Stack segment in internal ram 
                                    102 ;--------------------------------------------------------
                                    103 	.area	SSEG
      000000                        104 __start__stack:
      000000                        105 	.ds	1
                                    106 
                                    107 ;--------------------------------------------------------
                                    108 ; absolute external ram data
                                    109 ;--------------------------------------------------------
                                    110 	.area DABS (ABS)
                                    111 ;--------------------------------------------------------
                                    112 ; interrupt vector 
                                    113 ;--------------------------------------------------------
                                    114 	.area HOME
      000000                        115 __interrupt_vect:
      000000 82v00u00u00            116 	int s_GSINIT ;reset
      000004 82 00 00 00            117 	int 0x0000 ;trap
      000008 82 00 00 00            118 	int 0x0000 ;int0
      00000C 82 00 00 00            119 	int 0x0000 ;int1
      000010 82 00 00 00            120 	int 0x0000 ;int2
      000014 82 00 00 00            121 	int 0x0000 ;int3
      000018 82 00 00 00            122 	int 0x0000 ;int4
      00001C 82 00 00 00            123 	int 0x0000 ;int5
      000020 82 00 00 00            124 	int 0x0000 ;int6
      000024 82 00 00 00            125 	int 0x0000 ;int7
      000028 82 00 00 00            126 	int 0x0000 ;int8
      00002C 82 00 00 00            127 	int 0x0000 ;int9
      000030 82 00 00 00            128 	int 0x0000 ;int10
      000034 82 00 00 00            129 	int 0x0000 ;int11
      000038 82 00 00 00            130 	int 0x0000 ;int12
      00003C 82 00 00 00            131 	int 0x0000 ;int13
      000040 82 00 00 00            132 	int 0x0000 ;int14
      000044 82 00 00 00            133 	int 0x0000 ;int15
      000048 82 00 00 00            134 	int 0x0000 ;int16
      00004C 82 00 00 00            135 	int 0x0000 ;int17
      000050 82 00 00 00            136 	int 0x0000 ;int18
      000054 82 00 00 00            137 	int 0x0000 ;int19
      000058 82 00 00 00            138 	int 0x0000 ;int20
      00005C 82 00 00 00            139 	int 0x0000 ;int21
      000060 82 00 00 00            140 	int 0x0000 ;int22
      000064 82 00 00 00            141 	int 0x0000 ;int23
      000068 82 00 00 00            142 	int 0x0000 ;int24
      00006C 82 00 00 00            143 	int 0x0000 ;int25
      000070 82 00 00 00            144 	int 0x0000 ;int26
      000074 82 00 00 00            145 	int 0x0000 ;int27
      000078 82 00 00 00            146 	int 0x0000 ;int28
      00007C 82 00 00 00            147 	int 0x0000 ;int29
                                    148 ;--------------------------------------------------------
                                    149 ; global & static initialisations
                                    150 ;--------------------------------------------------------
                                    151 	.area HOME
                                    152 	.area GSINIT
                                    153 	.area GSFINAL
                                    154 	.area GSINIT
      000000                        155 __sdcc_gs_init_startup:
      000000                        156 __sdcc_init_data:
                                    157 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]  158 	ldw x, #l_DATA
      000003 27 07            [ 1]  159 	jreq	00002$
      000005                        160 00001$:
      000005 72 4FuFFuFF      [ 1]  161 	clr (s_DATA - 1, x)
      000009 5A               [ 2]  162 	decw x
      00000A 26 F9            [ 1]  163 	jrne	00001$
      00000C                        164 00002$:
      00000C AEr00r00         [ 2]  165 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]  166 	jreq	00004$
      000011                        167 00003$:
      000011 D6uFFuFF         [ 1]  168 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]  169 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]  170 	decw	x
      000018 26 F7            [ 1]  171 	jrne	00003$
      00001A                        172 00004$:
                                    173 ; stm8_genXINIT() end
                                    174 	.area GSFINAL
      000000 CCr00r80         [ 2]  175 	jp	__sdcc_program_startup
                                    176 ;--------------------------------------------------------
                                    177 ; Home
                                    178 ;--------------------------------------------------------
                                    179 	.area HOME
                                    180 	.area HOME
      000080                        181 __sdcc_program_startup:
      000080 CCr07r5F         [ 2]  182 	jp	_main
                                    183 ;	return from main will return to caller
                                    184 ;--------------------------------------------------------
                                    185 ; code
                                    186 ;--------------------------------------------------------
                                    187 	.area CODE
                                    188 ;	se8r01-receive-pwm.c: 46: void delayTenMicro (void) {
                                    189 ;	-----------------------------------------
                                    190 ;	 function delayTenMicro
                                    191 ;	-----------------------------------------
      000000                        192 _delayTenMicro:
                                    193 ;	se8r01-receive-pwm.c: 48: for (a = 0; a < 50; ++a)
      000000 A6 32            [ 1]  194 	ld	a, #0x32
      000002                        195 00104$:
                                    196 ;	se8r01-receive-pwm.c: 49: __asm__("nop");
      000002 9D               [ 1]  197 	nop
      000003 4A               [ 1]  198 	dec	a
                                    199 ;	se8r01-receive-pwm.c: 48: for (a = 0; a < 50; ++a)
      000004 4D               [ 1]  200 	tnz	a
      000005 26 FB            [ 1]  201 	jrne	00104$
      000007 81               [ 4]  202 	ret
                                    203 ;	se8r01-receive-pwm.c: 51: UCHAR write_spi (UCHAR value) {
                                    204 ;	-----------------------------------------
                                    205 ;	 function write_spi
                                    206 ;	-----------------------------------------
      000008                        207 _write_spi:
                                    208 ;	se8r01-receive-pwm.c: 53: delayTenMicro ();
      000008 CDr00r00         [ 4]  209 	call	_delayTenMicro
                                    210 ;	se8r01-receive-pwm.c: 54: SPI_DR = value;
      00000B AE 52 04         [ 2]  211 	ldw	x, #0x5204
      00000E 7B 03            [ 1]  212 	ld	a, (0x03, sp)
      000010 F7               [ 1]  213 	ld	(x), a
                                    214 ;	se8r01-receive-pwm.c: 55: delayTenMicro ();
      000011 CDr00r00         [ 4]  215 	call	_delayTenMicro
                                    216 ;	se8r01-receive-pwm.c: 56: while ((SPI_SR & TXE) == 0);
      000014                        217 00101$:
      000014 AE 52 03         [ 2]  218 	ldw	x, #0x5203
      000017 F6               [ 1]  219 	ld	a, (x)
      000018 A5 02            [ 1]  220 	bcp	a, #0x02
      00001A 27 F8            [ 1]  221 	jreq	00101$
                                    222 ;	se8r01-receive-pwm.c: 57: delayTenMicro ();
      00001C CDr00r00         [ 4]  223 	call	_delayTenMicro
                                    224 ;	se8r01-receive-pwm.c: 58: while ((SPI_SR & RXNE) == 0);
      00001F                        225 00104$:
      00001F AE 52 03         [ 2]  226 	ldw	x, #0x5203
      000022 F6               [ 1]  227 	ld	a, (x)
      000023 44               [ 1]  228 	srl	a
      000024 24 F9            [ 1]  229 	jrnc	00104$
                                    230 ;	se8r01-receive-pwm.c: 59: delayTenMicro ();
      000026 CDr00r00         [ 4]  231 	call	_delayTenMicro
                                    232 ;	se8r01-receive-pwm.c: 60: ret = SPI_DR;
      000029 AE 52 04         [ 2]  233 	ldw	x, #0x5204
      00002C F6               [ 1]  234 	ld	a, (x)
                                    235 ;	se8r01-receive-pwm.c: 61: return (ret);
      00002D 81               [ 4]  236 	ret
                                    237 ;	se8r01-receive-pwm.c: 63: UCHAR write_spi_reg (UCHAR reg, UCHAR value) {
                                    238 ;	-----------------------------------------
                                    239 ;	 function write_spi_reg
                                    240 ;	-----------------------------------------
      00002E                        241 _write_spi_reg:
      00002E 88               [ 1]  242 	push	a
                                    243 ;	se8r01-receive-pwm.c: 65: PC_ODR &= ~(1 << CSN);
      00002F AE 50 0A         [ 2]  244 	ldw	x, #0x500a
      000032 F6               [ 1]  245 	ld	a, (x)
      000033 A4 F7            [ 1]  246 	and	a, #0xf7
      000035 F7               [ 1]  247 	ld	(x), a
                                    248 ;	se8r01-receive-pwm.c: 66: ret = write_spi (reg);
      000036 7B 04            [ 1]  249 	ld	a, (0x04, sp)
      000038 88               [ 1]  250 	push	a
      000039 CDr00r08         [ 4]  251 	call	_write_spi
      00003C 5B 01            [ 2]  252 	addw	sp, #1
      00003E 6B 01            [ 1]  253 	ld	(0x01, sp), a
                                    254 ;	se8r01-receive-pwm.c: 67: if (reg != NOP && reg != FLUSH_RX && reg != FLUSH_TX)
      000040 7B 04            [ 1]  255 	ld	a, (0x04, sp)
      000042 A1 FF            [ 1]  256 	cp	a, #0xff
      000044 27 15            [ 1]  257 	jreq	00102$
      000046 7B 04            [ 1]  258 	ld	a, (0x04, sp)
      000048 A1 E2            [ 1]  259 	cp	a, #0xe2
      00004A 27 0F            [ 1]  260 	jreq	00102$
      00004C 7B 04            [ 1]  261 	ld	a, (0x04, sp)
      00004E A1 E1            [ 1]  262 	cp	a, #0xe1
      000050 27 09            [ 1]  263 	jreq	00102$
                                    264 ;	se8r01-receive-pwm.c: 68: write_spi (value);
      000052 7B 05            [ 1]  265 	ld	a, (0x05, sp)
      000054 88               [ 1]  266 	push	a
      000055 CDr00r08         [ 4]  267 	call	_write_spi
      000058 84               [ 1]  268 	pop	a
      000059 20 03            [ 2]  269 	jra	00103$
      00005B                        270 00102$:
                                    271 ;	se8r01-receive-pwm.c: 70: delayTenMicro ();
      00005B CDr00r00         [ 4]  272 	call	_delayTenMicro
      00005E                        273 00103$:
                                    274 ;	se8r01-receive-pwm.c: 71: PC_ODR |= (1 << CSN);
      00005E AE 50 0A         [ 2]  275 	ldw	x, #0x500a
      000061 F6               [ 1]  276 	ld	a, (x)
      000062 AA 08            [ 1]  277 	or	a, #0x08
      000064 F7               [ 1]  278 	ld	(x), a
                                    279 ;	se8r01-receive-pwm.c: 72: return (ret);
      000065 7B 01            [ 1]  280 	ld	a, (0x01, sp)
      000067 5B 01            [ 2]  281 	addw	sp, #1
      000069 81               [ 4]  282 	ret
                                    283 ;	se8r01-receive-pwm.c: 74: UCHAR read_spi_reg (UCHAR reg) {
                                    284 ;	-----------------------------------------
                                    285 ;	 function read_spi_reg
                                    286 ;	-----------------------------------------
      00006A                        287 _read_spi_reg:
      00006A 88               [ 1]  288 	push	a
                                    289 ;	se8r01-receive-pwm.c: 76: PC_ODR &= ~(1 << CSN);
      00006B AE 50 0A         [ 2]  290 	ldw	x, #0x500a
      00006E F6               [ 1]  291 	ld	a, (x)
      00006F A4 F7            [ 1]  292 	and	a, #0xf7
      000071 F7               [ 1]  293 	ld	(x), a
                                    294 ;	se8r01-receive-pwm.c: 77: ret = write_spi (reg);
      000072 7B 04            [ 1]  295 	ld	a, (0x04, sp)
      000074 88               [ 1]  296 	push	a
      000075 CDr00r08         [ 4]  297 	call	_write_spi
      000078 5B 01            [ 2]  298 	addw	sp, #1
      00007A 6B 01            [ 1]  299 	ld	(0x01, sp), a
                                    300 ;	se8r01-receive-pwm.c: 78: if (reg != NOP && reg != FLUSH_RX && reg != FLUSH_TX)
      00007C 7B 04            [ 1]  301 	ld	a, (0x04, sp)
      00007E A1 FF            [ 1]  302 	cp	a, #0xff
      000080 27 17            [ 1]  303 	jreq	00102$
      000082 7B 04            [ 1]  304 	ld	a, (0x04, sp)
      000084 A1 E2            [ 1]  305 	cp	a, #0xe2
      000086 27 11            [ 1]  306 	jreq	00102$
      000088 7B 04            [ 1]  307 	ld	a, (0x04, sp)
      00008A A1 E1            [ 1]  308 	cp	a, #0xe1
      00008C 27 0B            [ 1]  309 	jreq	00102$
                                    310 ;	se8r01-receive-pwm.c: 79: ret = write_spi (NOP);
      00008E 4B FF            [ 1]  311 	push	#0xff
      000090 CDr00r08         [ 4]  312 	call	_write_spi
      000093 5B 01            [ 2]  313 	addw	sp, #1
      000095 6B 01            [ 1]  314 	ld	(0x01, sp), a
      000097 20 03            [ 2]  315 	jra	00103$
      000099                        316 00102$:
                                    317 ;	se8r01-receive-pwm.c: 81: delayTenMicro ();
      000099 CDr00r00         [ 4]  318 	call	_delayTenMicro
      00009C                        319 00103$:
                                    320 ;	se8r01-receive-pwm.c: 82: PC_ODR |= (1 << CSN);
      00009C AE 50 0A         [ 2]  321 	ldw	x, #0x500a
      00009F F6               [ 1]  322 	ld	a, (x)
      0000A0 AA 08            [ 1]  323 	or	a, #0x08
      0000A2 F7               [ 1]  324 	ld	(x), a
                                    325 ;	se8r01-receive-pwm.c: 83: return (ret);
      0000A3 7B 01            [ 1]  326 	ld	a, (0x01, sp)
      0000A5 5B 01            [ 2]  327 	addw	sp, #1
      0000A7 81               [ 4]  328 	ret
                                    329 ;	se8r01-receive-pwm.c: 85: UCHAR write_spi_buf (UCHAR reg, UCHAR *array, UCHAR len) {
                                    330 ;	-----------------------------------------
                                    331 ;	 function write_spi_buf
                                    332 ;	-----------------------------------------
      0000A8                        333 _write_spi_buf:
      0000A8 52 02            [ 2]  334 	sub	sp, #2
                                    335 ;	se8r01-receive-pwm.c: 87: PC_ODR &= ~(1 << CSN);
      0000AA AE 50 0A         [ 2]  336 	ldw	x, #0x500a
      0000AD F6               [ 1]  337 	ld	a, (x)
      0000AE A4 F7            [ 1]  338 	and	a, #0xf7
      0000B0 F7               [ 1]  339 	ld	(x), a
                                    340 ;	se8r01-receive-pwm.c: 88: ret = write_spi (reg);
      0000B1 7B 05            [ 1]  341 	ld	a, (0x05, sp)
      0000B3 88               [ 1]  342 	push	a
      0000B4 CDr00r08         [ 4]  343 	call	_write_spi
      0000B7 5B 01            [ 2]  344 	addw	sp, #1
      0000B9 6B 02            [ 1]  345 	ld	(0x02, sp), a
                                    346 ;	se8r01-receive-pwm.c: 89: for (n = 0; n < len; ++n)
      0000BB 0F 01            [ 1]  347 	clr	(0x01, sp)
      0000BD                        348 00103$:
      0000BD 7B 01            [ 1]  349 	ld	a, (0x01, sp)
      0000BF 11 08            [ 1]  350 	cp	a, (0x08, sp)
      0000C1 24 11            [ 1]  351 	jrnc	00101$
                                    352 ;	se8r01-receive-pwm.c: 90: write_spi (array[n]);
      0000C3 5F               [ 1]  353 	clrw	x
      0000C4 7B 01            [ 1]  354 	ld	a, (0x01, sp)
      0000C6 97               [ 1]  355 	ld	xl, a
      0000C7 72 FB 06         [ 2]  356 	addw	x, (0x06, sp)
      0000CA F6               [ 1]  357 	ld	a, (x)
      0000CB 88               [ 1]  358 	push	a
      0000CC CDr00r08         [ 4]  359 	call	_write_spi
      0000CF 84               [ 1]  360 	pop	a
                                    361 ;	se8r01-receive-pwm.c: 89: for (n = 0; n < len; ++n)
      0000D0 0C 01            [ 1]  362 	inc	(0x01, sp)
      0000D2 20 E9            [ 2]  363 	jra	00103$
      0000D4                        364 00101$:
                                    365 ;	se8r01-receive-pwm.c: 91: PC_ODR |= (1 << CSN);
      0000D4 AE 50 0A         [ 2]  366 	ldw	x, #0x500a
      0000D7 F6               [ 1]  367 	ld	a, (x)
      0000D8 AA 08            [ 1]  368 	or	a, #0x08
      0000DA F7               [ 1]  369 	ld	(x), a
                                    370 ;	se8r01-receive-pwm.c: 92: return (ret);
      0000DB 7B 02            [ 1]  371 	ld	a, (0x02, sp)
      0000DD 5B 02            [ 2]  372 	addw	sp, #2
      0000DF 81               [ 4]  373 	ret
                                    374 ;	se8r01-receive-pwm.c: 94: UCHAR read_spi_buf (UCHAR reg, UCHAR *array, UCHAR len) {
                                    375 ;	-----------------------------------------
                                    376 ;	 function read_spi_buf
                                    377 ;	-----------------------------------------
      0000E0                        378 _read_spi_buf:
      0000E0 52 02            [ 2]  379 	sub	sp, #2
                                    380 ;	se8r01-receive-pwm.c: 96: PC_ODR &= ~(1 << CSN);
      0000E2 AE 50 0A         [ 2]  381 	ldw	x, #0x500a
      0000E5 F6               [ 1]  382 	ld	a, (x)
      0000E6 A4 F7            [ 1]  383 	and	a, #0xf7
      0000E8 F7               [ 1]  384 	ld	(x), a
                                    385 ;	se8r01-receive-pwm.c: 97: ret = write_spi (reg);
      0000E9 7B 05            [ 1]  386 	ld	a, (0x05, sp)
      0000EB 88               [ 1]  387 	push	a
      0000EC CDr00r08         [ 4]  388 	call	_write_spi
      0000EF 5B 01            [ 2]  389 	addw	sp, #1
      0000F1 6B 01            [ 1]  390 	ld	(0x01, sp), a
                                    391 ;	se8r01-receive-pwm.c: 98: for (n = 0; n < len; ++n)
      0000F3 0F 02            [ 1]  392 	clr	(0x02, sp)
      0000F5                        393 00103$:
      0000F5 7B 02            [ 1]  394 	ld	a, (0x02, sp)
      0000F7 11 08            [ 1]  395 	cp	a, (0x08, sp)
      0000F9 24 15            [ 1]  396 	jrnc	00101$
                                    397 ;	se8r01-receive-pwm.c: 99: array[n] = write_spi (NOP);
      0000FB 5F               [ 1]  398 	clrw	x
      0000FC 7B 02            [ 1]  399 	ld	a, (0x02, sp)
      0000FE 97               [ 1]  400 	ld	xl, a
      0000FF 72 FB 06         [ 2]  401 	addw	x, (0x06, sp)
      000102 89               [ 2]  402 	pushw	x
      000103 4B FF            [ 1]  403 	push	#0xff
      000105 CDr00r08         [ 4]  404 	call	_write_spi
      000108 5B 01            [ 2]  405 	addw	sp, #1
      00010A 85               [ 2]  406 	popw	x
      00010B F7               [ 1]  407 	ld	(x), a
                                    408 ;	se8r01-receive-pwm.c: 98: for (n = 0; n < len; ++n)
      00010C 0C 02            [ 1]  409 	inc	(0x02, sp)
      00010E 20 E5            [ 2]  410 	jra	00103$
      000110                        411 00101$:
                                    412 ;	se8r01-receive-pwm.c: 100: PC_ODR |= (1 << CSN);
      000110 AE 50 0A         [ 2]  413 	ldw	x, #0x500a
      000113 F6               [ 1]  414 	ld	a, (x)
      000114 AA 08            [ 1]  415 	or	a, #0x08
      000116 F7               [ 1]  416 	ld	(x), a
                                    417 ;	se8r01-receive-pwm.c: 101: return (ret);
      000117 7B 01            [ 1]  418 	ld	a, (0x01, sp)
      000119 5B 02            [ 2]  419 	addw	sp, #2
      00011B 81               [ 4]  420 	ret
                                    421 ;	se8r01-receive-pwm.c: 103: void InitializeSPI () {
                                    422 ;	-----------------------------------------
                                    423 ;	 function InitializeSPI
                                    424 ;	-----------------------------------------
      00011C                        425 _InitializeSPI:
                                    426 ;	se8r01-receive-pwm.c: 104: SPI_CR1 = MSBFIRST | SPI_ENABLE | BR_DIV256 | MASTER | CPOL0 | CPHA0;
      00011C AE 52 00         [ 2]  427 	ldw	x, #0x5200
      00011F A6 7C            [ 1]  428 	ld	a, #0x7c
      000121 F7               [ 1]  429 	ld	(x), a
                                    430 ;	se8r01-receive-pwm.c: 105: SPI_CR2 = BDM_2LINE | CRCEN_OFF | CRCNEXT_TXBUF | FULL_DUPLEX | SSM_DISABLE;
      000122 AE 52 01         [ 2]  431 	ldw	x, #0x5201
      000125 7F               [ 1]  432 	clr	(x)
                                    433 ;	se8r01-receive-pwm.c: 106: SPI_ICR = TXIE_MASKED | RXIE_MASKED | ERRIE_MASKED | WKIE_MASKED;
      000126 AE 52 02         [ 2]  434 	ldw	x, #0x5202
      000129 7F               [ 1]  435 	clr	(x)
                                    436 ;	se8r01-receive-pwm.c: 107: PC_DDR = (1 << PC3) | (1 << PC4); // output mode
      00012A AE 50 0C         [ 2]  437 	ldw	x, #0x500c
      00012D A6 18            [ 1]  438 	ld	a, #0x18
      00012F F7               [ 1]  439 	ld	(x), a
                                    440 ;	se8r01-receive-pwm.c: 108: PC_CR1 = (1 << PC3) | (1 << PC4); // push-pull
      000130 AE 50 0D         [ 2]  441 	ldw	x, #0x500d
      000133 A6 18            [ 1]  442 	ld	a, #0x18
      000135 F7               [ 1]  443 	ld	(x), a
                                    444 ;	se8r01-receive-pwm.c: 109: PC_CR2 = (1 << PC3) | (1 << PC4); // up to 10MHz speed
      000136 AE 50 0E         [ 2]  445 	ldw	x, #0x500e
      000139 A6 18            [ 1]  446 	ld	a, #0x18
      00013B F7               [ 1]  447 	ld	(x), a
                                    448 ;	se8r01-receive-pwm.c: 111: PC_ODR &= ~(1 << CE);
      00013C AE 50 0A         [ 2]  449 	ldw	x, #0x500a
      00013F F6               [ 1]  450 	ld	a, (x)
      000140 A4 EF            [ 1]  451 	and	a, #0xef
      000142 F7               [ 1]  452 	ld	(x), a
      000143 81               [ 4]  453 	ret
                                    454 ;	se8r01-receive-pwm.c: 113: void InitializeSystemClock() {
                                    455 ;	-----------------------------------------
                                    456 ;	 function InitializeSystemClock
                                    457 ;	-----------------------------------------
      000144                        458 _InitializeSystemClock:
                                    459 ;	se8r01-receive-pwm.c: 114: CLK_ICKR = 0;                       //  Reset the Internal Clock Register.
      000144 AE 50 C0         [ 2]  460 	ldw	x, #0x50c0
      000147 7F               [ 1]  461 	clr	(x)
                                    462 ;	se8r01-receive-pwm.c: 115: CLK_ICKR = CLK_HSIEN;               //  Enable the HSI.
      000148 AE 50 C0         [ 2]  463 	ldw	x, #0x50c0
      00014B A6 01            [ 1]  464 	ld	a, #0x01
      00014D F7               [ 1]  465 	ld	(x), a
                                    466 ;	se8r01-receive-pwm.c: 116: CLK_ECKR = 0;                       //  Disable the external clock.
      00014E AE 50 C1         [ 2]  467 	ldw	x, #0x50c1
      000151 7F               [ 1]  468 	clr	(x)
                                    469 ;	se8r01-receive-pwm.c: 117: while ((CLK_ICKR & CLK_HSIRDY) == 0);       //  Wait for the HSI to be ready for use.
      000152                        470 00101$:
      000152 AE 50 C0         [ 2]  471 	ldw	x, #0x50c0
      000155 F6               [ 1]  472 	ld	a, (x)
      000156 A5 02            [ 1]  473 	bcp	a, #0x02
      000158 27 F8            [ 1]  474 	jreq	00101$
                                    475 ;	se8r01-receive-pwm.c: 118: CLK_CKDIVR = 0;                     //  Ensure the clocks are running at full speed.
      00015A AE 50 C6         [ 2]  476 	ldw	x, #0x50c6
      00015D 7F               [ 1]  477 	clr	(x)
                                    478 ;	se8r01-receive-pwm.c: 119: CLK_PCKENR1 = 0xff;                 //  Enable all peripheral clocks.
      00015E AE 50 C7         [ 2]  479 	ldw	x, #0x50c7
      000161 A6 FF            [ 1]  480 	ld	a, #0xff
      000163 F7               [ 1]  481 	ld	(x), a
                                    482 ;	se8r01-receive-pwm.c: 120: CLK_PCKENR2 = 0xff;                 //  Ditto.
      000164 AE 50 CA         [ 2]  483 	ldw	x, #0x50ca
      000167 A6 FF            [ 1]  484 	ld	a, #0xff
      000169 F7               [ 1]  485 	ld	(x), a
                                    486 ;	se8r01-receive-pwm.c: 121: CLK_CCOR = 0;                       //  Turn off CCO.
      00016A AE 50 C9         [ 2]  487 	ldw	x, #0x50c9
      00016D 7F               [ 1]  488 	clr	(x)
                                    489 ;	se8r01-receive-pwm.c: 122: CLK_HSITRIMR = 0;                   //  Turn off any HSIU trimming.
      00016E AE 50 CC         [ 2]  490 	ldw	x, #0x50cc
      000171 7F               [ 1]  491 	clr	(x)
                                    492 ;	se8r01-receive-pwm.c: 123: CLK_SWIMCCR = 0;                    //  Set SWIM to run at clock / 2.
      000172 AE 50 CD         [ 2]  493 	ldw	x, #0x50cd
      000175 7F               [ 1]  494 	clr	(x)
                                    495 ;	se8r01-receive-pwm.c: 124: CLK_SWR = 0xe1;                     //  Use HSI as the clock source.
      000176 AE 50 C4         [ 2]  496 	ldw	x, #0x50c4
      000179 A6 E1            [ 1]  497 	ld	a, #0xe1
      00017B F7               [ 1]  498 	ld	(x), a
                                    499 ;	se8r01-receive-pwm.c: 125: CLK_SWCR = 0;                       //  Reset the clock switch control register.
      00017C AE 50 C5         [ 2]  500 	ldw	x, #0x50c5
      00017F 7F               [ 1]  501 	clr	(x)
                                    502 ;	se8r01-receive-pwm.c: 126: CLK_SWCR = CLK_SWEN;                //  Enable switching.
      000180 AE 50 C5         [ 2]  503 	ldw	x, #0x50c5
      000183 A6 02            [ 1]  504 	ld	a, #0x02
      000185 F7               [ 1]  505 	ld	(x), a
                                    506 ;	se8r01-receive-pwm.c: 127: while ((CLK_SWCR & CLK_SWBSY) != 0);        //  Pause while the clock switch is busy.
      000186                        507 00104$:
      000186 AE 50 C5         [ 2]  508 	ldw	x, #0x50c5
      000189 F6               [ 1]  509 	ld	a, (x)
      00018A 44               [ 1]  510 	srl	a
      00018B 25 F9            [ 1]  511 	jrc	00104$
      00018D 81               [ 4]  512 	ret
                                    513 ;	se8r01-receive-pwm.c: 129: void delay (int time_ms) {
                                    514 ;	-----------------------------------------
                                    515 ;	 function delay
                                    516 ;	-----------------------------------------
      00018E                        517 _delay:
      00018E 52 0A            [ 2]  518 	sub	sp, #10
                                    519 ;	se8r01-receive-pwm.c: 131: for (x = 0; x < 1036*time_ms; ++x)
      000190 5F               [ 1]  520 	clrw	x
      000191 1F 03            [ 2]  521 	ldw	(0x03, sp), x
      000193 1F 01            [ 2]  522 	ldw	(0x01, sp), x
      000195 1E 0D            [ 2]  523 	ldw	x, (0x0d, sp)
      000197 89               [ 2]  524 	pushw	x
      000198 4B 0C            [ 1]  525 	push	#0x0c
      00019A 4B 04            [ 1]  526 	push	#0x04
      00019C CDr00r00         [ 4]  527 	call	__mulint
      00019F 5B 04            [ 2]  528 	addw	sp, #4
      0001A1 1F 09            [ 2]  529 	ldw	(0x09, sp), x
      0001A3                        530 00103$:
      0001A3 16 09            [ 2]  531 	ldw	y, (0x09, sp)
      0001A5 17 07            [ 2]  532 	ldw	(0x07, sp), y
      0001A7 7B 07            [ 1]  533 	ld	a, (0x07, sp)
      0001A9 49               [ 1]  534 	rlc	a
      0001AA 4F               [ 1]  535 	clr	a
      0001AB A2 00            [ 1]  536 	sbc	a, #0x00
      0001AD 6B 06            [ 1]  537 	ld	(0x06, sp), a
      0001AF 6B 05            [ 1]  538 	ld	(0x05, sp), a
      0001B1 1E 03            [ 2]  539 	ldw	x, (0x03, sp)
      0001B3 13 07            [ 2]  540 	cpw	x, (0x07, sp)
      0001B5 7B 02            [ 1]  541 	ld	a, (0x02, sp)
      0001B7 12 06            [ 1]  542 	sbc	a, (0x06, sp)
      0001B9 7B 01            [ 1]  543 	ld	a, (0x01, sp)
      0001BB 12 05            [ 1]  544 	sbc	a, (0x05, sp)
      0001BD 2E 17            [ 1]  545 	jrsge	00105$
                                    546 ;	se8r01-receive-pwm.c: 132: __asm__("nop");
      0001BF 9D               [ 1]  547 	nop
                                    548 ;	se8r01-receive-pwm.c: 131: for (x = 0; x < 1036*time_ms; ++x)
      0001C0 16 03            [ 2]  549 	ldw	y, (0x03, sp)
      0001C2 72 A9 00 01      [ 2]  550 	addw	y, #0x0001
      0001C6 7B 02            [ 1]  551 	ld	a, (0x02, sp)
      0001C8 A9 00            [ 1]  552 	adc	a, #0x00
      0001CA 97               [ 1]  553 	ld	xl, a
      0001CB 7B 01            [ 1]  554 	ld	a, (0x01, sp)
      0001CD A9 00            [ 1]  555 	adc	a, #0x00
      0001CF 95               [ 1]  556 	ld	xh, a
      0001D0 17 03            [ 2]  557 	ldw	(0x03, sp), y
      0001D2 1F 01            [ 2]  558 	ldw	(0x01, sp), x
      0001D4 20 CD            [ 2]  559 	jra	00103$
      0001D6                        560 00105$:
      0001D6 5B 0A            [ 2]  561 	addw	sp, #10
      0001D8 81               [ 4]  562 	ret
                                    563 ;	se8r01-receive-pwm.c: 137: void UARTPrintF (char *message) {
                                    564 ;	-----------------------------------------
                                    565 ;	 function UARTPrintF
                                    566 ;	-----------------------------------------
      0001D9                        567 _UARTPrintF:
                                    568 ;	se8r01-receive-pwm.c: 138: char *ch = message;
      0001D9 16 03            [ 2]  569 	ldw	y, (0x03, sp)
                                    570 ;	se8r01-receive-pwm.c: 139: while (*ch) {
      0001DB                        571 00104$:
      0001DB 90 F6            [ 1]  572 	ld	a, (y)
      0001DD 4D               [ 1]  573 	tnz	a
      0001DE 27 0F            [ 1]  574 	jreq	00107$
                                    575 ;	se8r01-receive-pwm.c: 140: UART1_DR = (unsigned char) *ch;     //  Put the next character into the data transmission register.
      0001E0 AE 52 31         [ 2]  576 	ldw	x, #0x5231
      0001E3 F7               [ 1]  577 	ld	(x), a
                                    578 ;	se8r01-receive-pwm.c: 141: while ((UART1_SR & SR_TXE) == 0);   //  Wait for transmission to complete.
      0001E4                        579 00101$:
      0001E4 AE 52 30         [ 2]  580 	ldw	x, #0x5230
      0001E7 F6               [ 1]  581 	ld	a, (x)
      0001E8 48               [ 1]  582 	sll	a
      0001E9 24 F9            [ 1]  583 	jrnc	00101$
                                    584 ;	se8r01-receive-pwm.c: 142: ch++;                               //  Grab the next character.
      0001EB 90 5C            [ 2]  585 	incw	y
      0001ED 20 EC            [ 2]  586 	jra	00104$
      0001EF                        587 00107$:
      0001EF 81               [ 4]  588 	ret
                                    589 ;	se8r01-receive-pwm.c: 145: void print_UCHAR_hex (unsigned char buffer) {
                                    590 ;	-----------------------------------------
                                    591 ;	 function print_UCHAR_hex
                                    592 ;	-----------------------------------------
      0001F0                        593 _print_UCHAR_hex:
      0001F0 52 0C            [ 2]  594 	sub	sp, #12
                                    595 ;	se8r01-receive-pwm.c: 148: a = (buffer >> 4);
      0001F2 7B 0F            [ 1]  596 	ld	a, (0x0f, sp)
      0001F4 4E               [ 1]  597 	swap	a
      0001F5 A4 0F            [ 1]  598 	and	a, #0x0f
      0001F7 5F               [ 1]  599 	clrw	x
      0001F8 97               [ 1]  600 	ld	xl, a
                                    601 ;	se8r01-receive-pwm.c: 149: if (a > 9)
      0001F9 A3 00 09         [ 2]  602 	cpw	x, #0x0009
      0001FC 2D 07            [ 1]  603 	jrsle	00102$
                                    604 ;	se8r01-receive-pwm.c: 150: a = a + 'a' - 10;
      0001FE 1C 00 57         [ 2]  605 	addw	x, #0x0057
      000201 1F 0B            [ 2]  606 	ldw	(0x0b, sp), x
      000203 20 05            [ 2]  607 	jra	00103$
      000205                        608 00102$:
                                    609 ;	se8r01-receive-pwm.c: 152: a += '0'; 
      000205 1C 00 30         [ 2]  610 	addw	x, #0x0030
      000208 1F 0B            [ 2]  611 	ldw	(0x0b, sp), x
      00020A                        612 00103$:
                                    613 ;	se8r01-receive-pwm.c: 153: b = buffer & 0x0f;
      00020A 7B 0F            [ 1]  614 	ld	a, (0x0f, sp)
      00020C A4 0F            [ 1]  615 	and	a, #0x0f
      00020E 5F               [ 1]  616 	clrw	x
      00020F 97               [ 1]  617 	ld	xl, a
                                    618 ;	se8r01-receive-pwm.c: 154: if (b > 9)
      000210 A3 00 09         [ 2]  619 	cpw	x, #0x0009
      000213 2D 07            [ 1]  620 	jrsle	00105$
                                    621 ;	se8r01-receive-pwm.c: 155: b = b + 'a' - 10;
      000215 1C 00 57         [ 2]  622 	addw	x, #0x0057
      000218 1F 09            [ 2]  623 	ldw	(0x09, sp), x
      00021A 20 05            [ 2]  624 	jra	00106$
      00021C                        625 00105$:
                                    626 ;	se8r01-receive-pwm.c: 157: b += '0'; 
      00021C 1C 00 30         [ 2]  627 	addw	x, #0x0030
      00021F 1F 09            [ 2]  628 	ldw	(0x09, sp), x
      000221                        629 00106$:
                                    630 ;	se8r01-receive-pwm.c: 158: message[0] = a;
      000221 90 96            [ 1]  631 	ldw	y, sp
      000223 90 5C            [ 2]  632 	incw	y
      000225 7B 0C            [ 1]  633 	ld	a, (0x0c, sp)
      000227 90 F7            [ 1]  634 	ld	(y), a
                                    635 ;	se8r01-receive-pwm.c: 159: message[1] = b;
      000229 93               [ 1]  636 	ldw	x, y
      00022A 5C               [ 2]  637 	incw	x
      00022B 7B 0A            [ 1]  638 	ld	a, (0x0a, sp)
      00022D F7               [ 1]  639 	ld	(x), a
                                    640 ;	se8r01-receive-pwm.c: 160: message[2] = 0;
      00022E 93               [ 1]  641 	ldw	x, y
      00022F 5C               [ 2]  642 	incw	x
      000230 5C               [ 2]  643 	incw	x
      000231 7F               [ 1]  644 	clr	(x)
                                    645 ;	se8r01-receive-pwm.c: 161: UARTPrintF (message);
      000232 90 89            [ 2]  646 	pushw	y
      000234 CDr01rD9         [ 4]  647 	call	_UARTPrintF
      000237 5B 02            [ 2]  648 	addw	sp, #2
      000239 5B 0C            [ 2]  649 	addw	sp, #12
      00023B 81               [ 4]  650 	ret
                                    651 ;	se8r01-receive-pwm.c: 164: void InitializeUART() {
                                    652 ;	-----------------------------------------
                                    653 ;	 function InitializeUART
                                    654 ;	-----------------------------------------
      00023C                        655 _InitializeUART:
                                    656 ;	se8r01-receive-pwm.c: 174: UART1_CR1 = 0;
      00023C AE 52 34         [ 2]  657 	ldw	x, #0x5234
      00023F 7F               [ 1]  658 	clr	(x)
                                    659 ;	se8r01-receive-pwm.c: 175: UART1_CR2 = 0;
      000240 AE 52 35         [ 2]  660 	ldw	x, #0x5235
      000243 7F               [ 1]  661 	clr	(x)
                                    662 ;	se8r01-receive-pwm.c: 176: UART1_CR4 = 0;
      000244 AE 52 37         [ 2]  663 	ldw	x, #0x5237
      000247 7F               [ 1]  664 	clr	(x)
                                    665 ;	se8r01-receive-pwm.c: 177: UART1_CR3 = 0;
      000248 AE 52 36         [ 2]  666 	ldw	x, #0x5236
      00024B 7F               [ 1]  667 	clr	(x)
                                    668 ;	se8r01-receive-pwm.c: 178: UART1_CR5 = 0;
      00024C AE 52 38         [ 2]  669 	ldw	x, #0x5238
      00024F 7F               [ 1]  670 	clr	(x)
                                    671 ;	se8r01-receive-pwm.c: 179: UART1_GTR = 0;
      000250 AE 52 39         [ 2]  672 	ldw	x, #0x5239
      000253 7F               [ 1]  673 	clr	(x)
                                    674 ;	se8r01-receive-pwm.c: 180: UART1_PSCR = 0;
      000254 AE 52 3A         [ 2]  675 	ldw	x, #0x523a
      000257 7F               [ 1]  676 	clr	(x)
                                    677 ;	se8r01-receive-pwm.c: 184: UNSET (UART1_CR1, CR1_M);        //  8 Data bits.
      000258 AE 52 34         [ 2]  678 	ldw	x, #0x5234
      00025B F6               [ 1]  679 	ld	a, (x)
      00025C A4 EF            [ 1]  680 	and	a, #0xef
      00025E F7               [ 1]  681 	ld	(x), a
                                    682 ;	se8r01-receive-pwm.c: 185: UNSET (UART1_CR1, CR1_PCEN);     //  Disable parity.
      00025F AE 52 34         [ 2]  683 	ldw	x, #0x5234
      000262 F6               [ 1]  684 	ld	a, (x)
      000263 A4 FB            [ 1]  685 	and	a, #0xfb
      000265 F7               [ 1]  686 	ld	(x), a
                                    687 ;	se8r01-receive-pwm.c: 186: UNSET (UART1_CR3, CR3_STOPH);    //  1 stop bit.
      000266 AE 52 36         [ 2]  688 	ldw	x, #0x5236
      000269 F6               [ 1]  689 	ld	a, (x)
      00026A A4 DF            [ 1]  690 	and	a, #0xdf
      00026C F7               [ 1]  691 	ld	(x), a
                                    692 ;	se8r01-receive-pwm.c: 187: UNSET (UART1_CR3, CR3_STOPL);    //  1 stop bit.
      00026D AE 52 36         [ 2]  693 	ldw	x, #0x5236
      000270 F6               [ 1]  694 	ld	a, (x)
      000271 A4 EF            [ 1]  695 	and	a, #0xef
      000273 F7               [ 1]  696 	ld	(x), a
                                    697 ;	se8r01-receive-pwm.c: 188: UART1_BRR2 = 0x0a;      //  Set the baud rate registers to 115200 baud
      000274 AE 52 33         [ 2]  698 	ldw	x, #0x5233
      000277 A6 0A            [ 1]  699 	ld	a, #0x0a
      000279 F7               [ 1]  700 	ld	(x), a
                                    701 ;	se8r01-receive-pwm.c: 189: UART1_BRR1 = 0x08;      //  based upon a 16 MHz system clock.
      00027A AE 52 32         [ 2]  702 	ldw	x, #0x5232
      00027D A6 08            [ 1]  703 	ld	a, #0x08
      00027F F7               [ 1]  704 	ld	(x), a
                                    705 ;	se8r01-receive-pwm.c: 193: UNSET (UART1_CR2, CR2_TEN);      //  Disable transmit.
      000280 AE 52 35         [ 2]  706 	ldw	x, #0x5235
      000283 F6               [ 1]  707 	ld	a, (x)
      000284 A4 F7            [ 1]  708 	and	a, #0xf7
      000286 F7               [ 1]  709 	ld	(x), a
                                    710 ;	se8r01-receive-pwm.c: 194: UNSET (UART1_CR2, CR2_REN);      //  Disable receive.
      000287 AE 52 35         [ 2]  711 	ldw	x, #0x5235
      00028A F6               [ 1]  712 	ld	a, (x)
      00028B A4 FB            [ 1]  713 	and	a, #0xfb
      00028D F7               [ 1]  714 	ld	(x), a
                                    715 ;	se8r01-receive-pwm.c: 198: SET (UART1_CR3, CR3_CPOL);
      00028E AE 52 36         [ 2]  716 	ldw	x, #0x5236
      000291 F6               [ 1]  717 	ld	a, (x)
      000292 AA 04            [ 1]  718 	or	a, #0x04
      000294 F7               [ 1]  719 	ld	(x), a
                                    720 ;	se8r01-receive-pwm.c: 199: SET (UART1_CR3, CR3_CPHA);
      000295 AE 52 36         [ 2]  721 	ldw	x, #0x5236
      000298 F6               [ 1]  722 	ld	a, (x)
      000299 AA 02            [ 1]  723 	or	a, #0x02
      00029B F7               [ 1]  724 	ld	(x), a
                                    725 ;	se8r01-receive-pwm.c: 200: SET (UART1_CR3, CR3_LBCL);
      00029C 72 10 52 36      [ 1]  726 	bset	0x5236, #0
                                    727 ;	se8r01-receive-pwm.c: 204: SET (UART1_CR2, CR2_TEN);
      0002A0 AE 52 35         [ 2]  728 	ldw	x, #0x5235
      0002A3 F6               [ 1]  729 	ld	a, (x)
      0002A4 AA 08            [ 1]  730 	or	a, #0x08
      0002A6 F7               [ 1]  731 	ld	(x), a
                                    732 ;	se8r01-receive-pwm.c: 205: SET (UART1_CR2, CR2_REN);
      0002A7 AE 52 35         [ 2]  733 	ldw	x, #0x5235
      0002AA F6               [ 1]  734 	ld	a, (x)
      0002AB AA 04            [ 1]  735 	or	a, #0x04
      0002AD F7               [ 1]  736 	ld	(x), a
                                    737 ;	se8r01-receive-pwm.c: 206: UART1_CR3 = CR3_CLKEN;
      0002AE AE 52 36         [ 2]  738 	ldw	x, #0x5236
      0002B1 A6 08            [ 1]  739 	ld	a, #0x08
      0002B3 F7               [ 1]  740 	ld	(x), a
      0002B4 81               [ 4]  741 	ret
                                    742 ;	se8r01-receive-pwm.c: 279: void init_io(void)
                                    743 ;	-----------------------------------------
                                    744 ;	 function init_io
                                    745 ;	-----------------------------------------
      0002B5                        746 _init_io:
                                    747 ;	se8r01-receive-pwm.c: 281: PD_DDR &= ~(1 << 3); // input mode
      0002B5 AE 50 11         [ 2]  748 	ldw	x, #0x5011
      0002B8 F6               [ 1]  749 	ld	a, (x)
      0002B9 A4 F7            [ 1]  750 	and	a, #0xf7
      0002BB F7               [ 1]  751 	ld	(x), a
                                    752 ;	se8r01-receive-pwm.c: 282: PD_CR1 |= (1 << 3); // input with pull up 
      0002BC AE 50 12         [ 2]  753 	ldw	x, #0x5012
      0002BF F6               [ 1]  754 	ld	a, (x)
      0002C0 AA 08            [ 1]  755 	or	a, #0x08
      0002C2 F7               [ 1]  756 	ld	(x), a
                                    757 ;	se8r01-receive-pwm.c: 283: PD_CR2 |= (1 << 3); // interrupt enabled 
      0002C3 AE 50 13         [ 2]  758 	ldw	x, #0x5013
      0002C6 F6               [ 1]  759 	ld	a, (x)
      0002C7 AA 08            [ 1]  760 	or	a, #0x08
      0002C9 F7               [ 1]  761 	ld	(x), a
                                    762 ;	se8r01-receive-pwm.c: 287: PC_ODR &= ~(1 << CE);
      0002CA AE 50 0A         [ 2]  763 	ldw	x, #0x500a
      0002CD F6               [ 1]  764 	ld	a, (x)
      0002CE A4 EF            [ 1]  765 	and	a, #0xef
      0002D0 F7               [ 1]  766 	ld	(x), a
                                    767 ;	se8r01-receive-pwm.c: 289: PC_ODR |= (1 << CSN);
      0002D1 AE 50 0A         [ 2]  768 	ldw	x, #0x500a
      0002D4 F6               [ 1]  769 	ld	a, (x)
      0002D5 AA 08            [ 1]  770 	or	a, #0x08
      0002D7 F7               [ 1]  771 	ld	(x), a
      0002D8 81               [ 4]  772 	ret
                                    773 ;	se8r01-receive-pwm.c: 295: void rf_switch_bank(unsigned char bankindex)
                                    774 ;	-----------------------------------------
                                    775 ;	 function rf_switch_bank
                                    776 ;	-----------------------------------------
      0002D9                        777 _rf_switch_bank:
      0002D9 88               [ 1]  778 	push	a
                                    779 ;	se8r01-receive-pwm.c: 298: temp1 = bankindex;
      0002DA 7B 04            [ 1]  780 	ld	a, (0x04, sp)
      0002DC 6B 01            [ 1]  781 	ld	(0x01, sp), a
                                    782 ;	se8r01-receive-pwm.c: 300: temp0 = write_spi(iRF_BANK0_STATUS);
      0002DE 4B 07            [ 1]  783 	push	#0x07
      0002E0 CDr00r08         [ 4]  784 	call	_write_spi
      0002E3 5B 01            [ 2]  785 	addw	sp, #1
                                    786 ;	se8r01-receive-pwm.c: 302: if((temp0&0x80)!=temp1)
      0002E5 A4 80            [ 1]  787 	and	a, #0x80
      0002E7 11 01            [ 1]  788 	cp	a, (0x01, sp)
      0002E9 27 09            [ 1]  789 	jreq	00103$
                                    790 ;	se8r01-receive-pwm.c: 304: write_spi_reg(iRF_CMD_ACTIVATE,0x53);
      0002EB 4B 53            [ 1]  791 	push	#0x53
      0002ED 4B 50            [ 1]  792 	push	#0x50
      0002EF CDr00r2E         [ 4]  793 	call	_write_spi_reg
      0002F2 5B 02            [ 2]  794 	addw	sp, #2
      0002F4                        795 00103$:
      0002F4 84               [ 1]  796 	pop	a
      0002F5 81               [ 4]  797 	ret
                                    798 ;	se8r01-receive-pwm.c: 311: void SE8R01_Calibration()
                                    799 ;	-----------------------------------------
                                    800 ;	 function SE8R01_Calibration
                                    801 ;	-----------------------------------------
      0002F6                        802 _SE8R01_Calibration:
      0002F6 52 0D            [ 2]  803 	sub	sp, #13
                                    804 ;	se8r01-receive-pwm.c: 314: rf_switch_bank(iBANK0);
      0002F8 4B 00            [ 1]  805 	push	#0x00
      0002FA CDr02rD9         [ 4]  806 	call	_rf_switch_bank
      0002FD 84               [ 1]  807 	pop	a
                                    808 ;	se8r01-receive-pwm.c: 315: temp[0]=0x03;
      0002FE 96               [ 1]  809 	ldw	x, sp
      0002FF 5C               [ 2]  810 	incw	x
      000300 1F 06            [ 2]  811 	ldw	(0x06, sp), x
      000302 1E 06            [ 2]  812 	ldw	x, (0x06, sp)
      000304 A6 03            [ 1]  813 	ld	a, #0x03
      000306 F7               [ 1]  814 	ld	(x), a
                                    815 ;	se8r01-receive-pwm.c: 316: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK0_CONFIG,temp, 1);
      000307 1E 06            [ 2]  816 	ldw	x, (0x06, sp)
      000309 4B 01            [ 1]  817 	push	#0x01
      00030B 89               [ 2]  818 	pushw	x
      00030C 4B 20            [ 1]  819 	push	#0x20
      00030E CDr00rA8         [ 4]  820 	call	_write_spi_buf
      000311 5B 04            [ 2]  821 	addw	sp, #4
                                    822 ;	se8r01-receive-pwm.c: 318: temp[0]=0x32;
      000313 1E 06            [ 2]  823 	ldw	x, (0x06, sp)
      000315 A6 32            [ 1]  824 	ld	a, #0x32
      000317 F7               [ 1]  825 	ld	(x), a
                                    826 ;	se8r01-receive-pwm.c: 320: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK0_RF_CH, temp,1);
      000318 1E 06            [ 2]  827 	ldw	x, (0x06, sp)
      00031A 4B 01            [ 1]  828 	push	#0x01
      00031C 89               [ 2]  829 	pushw	x
      00031D 4B 25            [ 1]  830 	push	#0x25
      00031F CDr00rA8         [ 4]  831 	call	_write_spi_buf
      000322 5B 04            [ 2]  832 	addw	sp, #4
                                    833 ;	se8r01-receive-pwm.c: 324: if (SE8R01_DR_2M==1)
      000324 CEu00u00         [ 2]  834 	ldw	x, _SE8R01_DR_2M+0
      000327 A3 00 01         [ 2]  835 	cpw	x, #0x0001
      00032A 26 07            [ 1]  836 	jrne	00105$
                                    837 ;	se8r01-receive-pwm.c: 325: {temp[0]=0x48;}
      00032C 1E 06            [ 2]  838 	ldw	x, (0x06, sp)
      00032E A6 48            [ 1]  839 	ld	a, #0x48
      000330 F7               [ 1]  840 	ld	(x), a
      000331 20 14            [ 2]  841 	jra	00106$
      000333                        842 00105$:
                                    843 ;	se8r01-receive-pwm.c: 326: else if (SE8R01_DR_1M==1)
      000333 CEu00u02         [ 2]  844 	ldw	x, _SE8R01_DR_1M+0
      000336 A3 00 01         [ 2]  845 	cpw	x, #0x0001
      000339 26 07            [ 1]  846 	jrne	00102$
                                    847 ;	se8r01-receive-pwm.c: 327: {temp[0]=0x40;}
      00033B 1E 06            [ 2]  848 	ldw	x, (0x06, sp)
      00033D A6 40            [ 1]  849 	ld	a, #0x40
      00033F F7               [ 1]  850 	ld	(x), a
      000340 20 05            [ 2]  851 	jra	00106$
      000342                        852 00102$:
                                    853 ;	se8r01-receive-pwm.c: 329: {temp[0]=0x68;}   
      000342 1E 06            [ 2]  854 	ldw	x, (0x06, sp)
      000344 A6 68            [ 1]  855 	ld	a, #0x68
      000346 F7               [ 1]  856 	ld	(x), a
      000347                        857 00106$:
                                    858 ;	se8r01-receive-pwm.c: 331: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK0_RF_SETUP,temp,1);
      000347 1E 06            [ 2]  859 	ldw	x, (0x06, sp)
      000349 4B 01            [ 1]  860 	push	#0x01
      00034B 89               [ 2]  861 	pushw	x
      00034C 4B 26            [ 1]  862 	push	#0x26
      00034E CDr00rA8         [ 4]  863 	call	_write_spi_buf
      000351 5B 04            [ 2]  864 	addw	sp, #4
                                    865 ;	se8r01-receive-pwm.c: 332: temp[0]=0x77;
      000353 1E 06            [ 2]  866 	ldw	x, (0x06, sp)
      000355 A6 77            [ 1]  867 	ld	a, #0x77
      000357 F7               [ 1]  868 	ld	(x), a
                                    869 ;	se8r01-receive-pwm.c: 333: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK0_PRE_GURD, temp,1);
      000358 1E 06            [ 2]  870 	ldw	x, (0x06, sp)
      00035A 4B 01            [ 1]  871 	push	#0x01
      00035C 89               [ 2]  872 	pushw	x
      00035D 4B 3F            [ 1]  873 	push	#0x3f
      00035F CDr00rA8         [ 4]  874 	call	_write_spi_buf
      000362 5B 04            [ 2]  875 	addw	sp, #4
                                    876 ;	se8r01-receive-pwm.c: 335: rf_switch_bank(iBANK1);
      000364 4B 80            [ 1]  877 	push	#0x80
      000366 CDr02rD9         [ 4]  878 	call	_rf_switch_bank
      000369 84               [ 1]  879 	pop	a
                                    880 ;	se8r01-receive-pwm.c: 336: temp[0]=0x40;
      00036A 1E 06            [ 2]  881 	ldw	x, (0x06, sp)
      00036C A6 40            [ 1]  882 	ld	a, #0x40
      00036E F7               [ 1]  883 	ld	(x), a
                                    884 ;	se8r01-receive-pwm.c: 337: temp[1]=0x00;
      00036F 1E 06            [ 2]  885 	ldw	x, (0x06, sp)
      000371 5C               [ 2]  886 	incw	x
      000372 1F 0C            [ 2]  887 	ldw	(0x0c, sp), x
      000374 1E 0C            [ 2]  888 	ldw	x, (0x0c, sp)
      000376 7F               [ 1]  889 	clr	(x)
                                    890 ;	se8r01-receive-pwm.c: 338: temp[2]=0x10;
      000377 1E 06            [ 2]  891 	ldw	x, (0x06, sp)
      000379 5C               [ 2]  892 	incw	x
      00037A 5C               [ 2]  893 	incw	x
      00037B 1F 0A            [ 2]  894 	ldw	(0x0a, sp), x
      00037D 1E 0A            [ 2]  895 	ldw	x, (0x0a, sp)
      00037F A6 10            [ 1]  896 	ld	a, #0x10
      000381 F7               [ 1]  897 	ld	(x), a
                                    898 ;	se8r01-receive-pwm.c: 340: {temp[3]=0xE6;}
      000382 1E 06            [ 2]  899 	ldw	x, (0x06, sp)
      000384 1C 00 03         [ 2]  900 	addw	x, #0x0003
      000387 1F 08            [ 2]  901 	ldw	(0x08, sp), x
                                    902 ;	se8r01-receive-pwm.c: 339: if (SE8R01_DR_2M==1)
      000389 CEu00u00         [ 2]  903 	ldw	x, _SE8R01_DR_2M+0
      00038C A3 00 01         [ 2]  904 	cpw	x, #0x0001
      00038F 26 07            [ 1]  905 	jrne	00108$
                                    906 ;	se8r01-receive-pwm.c: 340: {temp[3]=0xE6;}
      000391 1E 08            [ 2]  907 	ldw	x, (0x08, sp)
      000393 A6 E6            [ 1]  908 	ld	a, #0xe6
      000395 F7               [ 1]  909 	ld	(x), a
      000396 20 05            [ 2]  910 	jra	00109$
      000398                        911 00108$:
                                    912 ;	se8r01-receive-pwm.c: 342: {temp[3]=0xE4;}
      000398 1E 08            [ 2]  913 	ldw	x, (0x08, sp)
      00039A A6 E4            [ 1]  914 	ld	a, #0xe4
      00039C F7               [ 1]  915 	ld	(x), a
      00039D                        916 00109$:
                                    917 ;	se8r01-receive-pwm.c: 344: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_PLL_CTL0, temp, 4);
      00039D 1E 06            [ 2]  918 	ldw	x, (0x06, sp)
      00039F 4B 04            [ 1]  919 	push	#0x04
      0003A1 89               [ 2]  920 	pushw	x
      0003A2 4B 21            [ 1]  921 	push	#0x21
      0003A4 CDr00rA8         [ 4]  922 	call	_write_spi_buf
      0003A7 5B 04            [ 2]  923 	addw	sp, #4
                                    924 ;	se8r01-receive-pwm.c: 346: temp[0]=0x20;
      0003A9 1E 06            [ 2]  925 	ldw	x, (0x06, sp)
      0003AB A6 20            [ 1]  926 	ld	a, #0x20
      0003AD F7               [ 1]  927 	ld	(x), a
                                    928 ;	se8r01-receive-pwm.c: 347: temp[1]=0x08;
      0003AE 1E 0C            [ 2]  929 	ldw	x, (0x0c, sp)
      0003B0 A6 08            [ 1]  930 	ld	a, #0x08
      0003B2 F7               [ 1]  931 	ld	(x), a
                                    932 ;	se8r01-receive-pwm.c: 348: temp[2]=0x50;
      0003B3 1E 0A            [ 2]  933 	ldw	x, (0x0a, sp)
      0003B5 A6 50            [ 1]  934 	ld	a, #0x50
      0003B7 F7               [ 1]  935 	ld	(x), a
                                    936 ;	se8r01-receive-pwm.c: 349: temp[3]=0x40;
      0003B8 1E 08            [ 2]  937 	ldw	x, (0x08, sp)
      0003BA A6 40            [ 1]  938 	ld	a, #0x40
      0003BC F7               [ 1]  939 	ld	(x), a
                                    940 ;	se8r01-receive-pwm.c: 350: temp[4]=0x50;
      0003BD 1E 06            [ 2]  941 	ldw	x, (0x06, sp)
      0003BF A6 50            [ 1]  942 	ld	a, #0x50
      0003C1 E7 04            [ 1]  943 	ld	(0x0004, x), a
                                    944 ;	se8r01-receive-pwm.c: 351: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_CAL_CTL, temp, 5);
      0003C3 1E 06            [ 2]  945 	ldw	x, (0x06, sp)
      0003C5 4B 05            [ 1]  946 	push	#0x05
      0003C7 89               [ 2]  947 	pushw	x
      0003C8 4B 23            [ 1]  948 	push	#0x23
      0003CA CDr00rA8         [ 4]  949 	call	_write_spi_buf
      0003CD 5B 04            [ 2]  950 	addw	sp, #4
                                    951 ;	se8r01-receive-pwm.c: 353: temp[0]=0x00;
      0003CF 1E 06            [ 2]  952 	ldw	x, (0x06, sp)
      0003D1 7F               [ 1]  953 	clr	(x)
                                    954 ;	se8r01-receive-pwm.c: 354: temp[1]=0x00;
      0003D2 1E 0C            [ 2]  955 	ldw	x, (0x0c, sp)
      0003D4 7F               [ 1]  956 	clr	(x)
                                    957 ;	se8r01-receive-pwm.c: 355: if (SE8R01_DR_2M==1)
      0003D5 CEu00u00         [ 2]  958 	ldw	x, _SE8R01_DR_2M+0
      0003D8 A3 00 01         [ 2]  959 	cpw	x, #0x0001
      0003DB 26 07            [ 1]  960 	jrne	00111$
                                    961 ;	se8r01-receive-pwm.c: 356: { temp[2]=0x1E;}
      0003DD 1E 0A            [ 2]  962 	ldw	x, (0x0a, sp)
      0003DF A6 1E            [ 1]  963 	ld	a, #0x1e
      0003E1 F7               [ 1]  964 	ld	(x), a
      0003E2 20 05            [ 2]  965 	jra	00112$
      0003E4                        966 00111$:
                                    967 ;	se8r01-receive-pwm.c: 358: { temp[2]=0x1F;}
      0003E4 1E 0A            [ 2]  968 	ldw	x, (0x0a, sp)
      0003E6 A6 1F            [ 1]  969 	ld	a, #0x1f
      0003E8 F7               [ 1]  970 	ld	(x), a
      0003E9                        971 00112$:
                                    972 ;	se8r01-receive-pwm.c: 360: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_IF_FREQ, temp, 3);
      0003E9 1E 06            [ 2]  973 	ldw	x, (0x06, sp)
      0003EB 4B 03            [ 1]  974 	push	#0x03
      0003ED 89               [ 2]  975 	pushw	x
      0003EE 4B 2A            [ 1]  976 	push	#0x2a
      0003F0 CDr00rA8         [ 4]  977 	call	_write_spi_buf
      0003F3 5B 04            [ 2]  978 	addw	sp, #4
                                    979 ;	se8r01-receive-pwm.c: 362: if (SE8R01_DR_2M==1)
      0003F5 CEu00u00         [ 2]  980 	ldw	x, _SE8R01_DR_2M+0
      0003F8 A3 00 01         [ 2]  981 	cpw	x, #0x0001
      0003FB 26 07            [ 1]  982 	jrne	00114$
                                    983 ;	se8r01-receive-pwm.c: 363: { temp[0]=0x29;}
      0003FD 1E 06            [ 2]  984 	ldw	x, (0x06, sp)
      0003FF A6 29            [ 1]  985 	ld	a, #0x29
      000401 F7               [ 1]  986 	ld	(x), a
      000402 20 05            [ 2]  987 	jra	00115$
      000404                        988 00114$:
                                    989 ;	se8r01-receive-pwm.c: 365: { temp[0]=0x14;}
      000404 1E 06            [ 2]  990 	ldw	x, (0x06, sp)
      000406 A6 14            [ 1]  991 	ld	a, #0x14
      000408 F7               [ 1]  992 	ld	(x), a
      000409                        993 00115$:
                                    994 ;	se8r01-receive-pwm.c: 367: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_FDEV, temp, 1);
      000409 1E 06            [ 2]  995 	ldw	x, (0x06, sp)
      00040B 4B 01            [ 1]  996 	push	#0x01
      00040D 89               [ 2]  997 	pushw	x
      00040E 4B 2C            [ 1]  998 	push	#0x2c
      000410 CDr00rA8         [ 4]  999 	call	_write_spi_buf
      000413 5B 04            [ 2] 1000 	addw	sp, #4
                                   1001 ;	se8r01-receive-pwm.c: 369: temp[0]=0x00;
      000415 1E 06            [ 2] 1002 	ldw	x, (0x06, sp)
      000417 7F               [ 1] 1003 	clr	(x)
                                   1004 ;	se8r01-receive-pwm.c: 370: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_DAC_CAL_LOW,temp,1);
      000418 1E 06            [ 2] 1005 	ldw	x, (0x06, sp)
      00041A 4B 01            [ 1] 1006 	push	#0x01
      00041C 89               [ 2] 1007 	pushw	x
      00041D 4B 37            [ 1] 1008 	push	#0x37
      00041F CDr00rA8         [ 4] 1009 	call	_write_spi_buf
      000422 5B 04            [ 2] 1010 	addw	sp, #4
                                   1011 ;	se8r01-receive-pwm.c: 372: temp[0]=0x7F;
      000424 1E 06            [ 2] 1012 	ldw	x, (0x06, sp)
      000426 A6 7F            [ 1] 1013 	ld	a, #0x7f
      000428 F7               [ 1] 1014 	ld	(x), a
                                   1015 ;	se8r01-receive-pwm.c: 373: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_DAC_CAL_HI,temp,1);
      000429 1E 06            [ 2] 1016 	ldw	x, (0x06, sp)
      00042B 4B 01            [ 1] 1017 	push	#0x01
      00042D 89               [ 2] 1018 	pushw	x
      00042E 4B 38            [ 1] 1019 	push	#0x38
      000430 CDr00rA8         [ 4] 1020 	call	_write_spi_buf
      000433 5B 04            [ 2] 1021 	addw	sp, #4
                                   1022 ;	se8r01-receive-pwm.c: 375: temp[0]=0x02;
      000435 1E 06            [ 2] 1023 	ldw	x, (0x06, sp)
      000437 A6 02            [ 1] 1024 	ld	a, #0x02
      000439 F7               [ 1] 1025 	ld	(x), a
                                   1026 ;	se8r01-receive-pwm.c: 376: temp[1]=0xC1;
      00043A 1E 0C            [ 2] 1027 	ldw	x, (0x0c, sp)
      00043C A6 C1            [ 1] 1028 	ld	a, #0xc1
      00043E F7               [ 1] 1029 	ld	(x), a
                                   1030 ;	se8r01-receive-pwm.c: 377: temp[2]=0xEB;            
      00043F 1E 0A            [ 2] 1031 	ldw	x, (0x0a, sp)
      000441 A6 EB            [ 1] 1032 	ld	a, #0xeb
      000443 F7               [ 1] 1033 	ld	(x), a
                                   1034 ;	se8r01-receive-pwm.c: 378: temp[3]=0x1C;
      000444 1E 08            [ 2] 1035 	ldw	x, (0x08, sp)
      000446 A6 1C            [ 1] 1036 	ld	a, #0x1c
      000448 F7               [ 1] 1037 	ld	(x), a
                                   1038 ;	se8r01-receive-pwm.c: 379: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_AGC_GAIN, temp,4);
      000449 1E 06            [ 2] 1039 	ldw	x, (0x06, sp)
      00044B 4B 04            [ 1] 1040 	push	#0x04
      00044D 89               [ 2] 1041 	pushw	x
      00044E 4B 3D            [ 1] 1042 	push	#0x3d
      000450 CDr00rA8         [ 4] 1043 	call	_write_spi_buf
      000453 5B 04            [ 2] 1044 	addw	sp, #4
                                   1045 ;	se8r01-receive-pwm.c: 381: temp[0]=0x97;
      000455 1E 06            [ 2] 1046 	ldw	x, (0x06, sp)
      000457 A6 97            [ 1] 1047 	ld	a, #0x97
      000459 F7               [ 1] 1048 	ld	(x), a
                                   1049 ;	se8r01-receive-pwm.c: 382: temp[1]=0x64;
      00045A 1E 0C            [ 2] 1050 	ldw	x, (0x0c, sp)
      00045C A6 64            [ 1] 1051 	ld	a, #0x64
      00045E F7               [ 1] 1052 	ld	(x), a
                                   1053 ;	se8r01-receive-pwm.c: 383: temp[2]=0x00;
      00045F 1E 0A            [ 2] 1054 	ldw	x, (0x0a, sp)
      000461 7F               [ 1] 1055 	clr	(x)
                                   1056 ;	se8r01-receive-pwm.c: 384: temp[3]=0x81;
      000462 1E 08            [ 2] 1057 	ldw	x, (0x08, sp)
      000464 A6 81            [ 1] 1058 	ld	a, #0x81
      000466 F7               [ 1] 1059 	ld	(x), a
                                   1060 ;	se8r01-receive-pwm.c: 385: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_RF_IVGEN, temp, 4);
      000467 1E 06            [ 2] 1061 	ldw	x, (0x06, sp)
      000469 4B 04            [ 1] 1062 	push	#0x04
      00046B 89               [ 2] 1063 	pushw	x
      00046C 4B 3E            [ 1] 1064 	push	#0x3e
      00046E CDr00rA8         [ 4] 1065 	call	_write_spi_buf
      000471 5B 04            [ 2] 1066 	addw	sp, #4
                                   1067 ;	se8r01-receive-pwm.c: 386: rf_switch_bank(iBANK0);
      000473 4B 00            [ 1] 1068 	push	#0x00
      000475 CDr02rD9         [ 4] 1069 	call	_rf_switch_bank
      000478 84               [ 1] 1070 	pop	a
                                   1071 ;	se8r01-receive-pwm.c: 391: delayTenMicro();
      000479 CDr00r00         [ 4] 1072 	call	_delayTenMicro
                                   1073 ;	se8r01-receive-pwm.c: 392: PC_ODR |= (1 << CE);
      00047C AE 50 0A         [ 2] 1074 	ldw	x, #0x500a
      00047F F6               [ 1] 1075 	ld	a, (x)
      000480 AA 10            [ 1] 1076 	or	a, #0x10
      000482 F7               [ 1] 1077 	ld	(x), a
                                   1078 ;	se8r01-receive-pwm.c: 393: delayTenMicro();
      000483 CDr00r00         [ 4] 1079 	call	_delayTenMicro
                                   1080 ;	se8r01-receive-pwm.c: 394: delayTenMicro();
      000486 CDr00r00         [ 4] 1081 	call	_delayTenMicro
                                   1082 ;	se8r01-receive-pwm.c: 395: delayTenMicro();
      000489 CDr00r00         [ 4] 1083 	call	_delayTenMicro
                                   1084 ;	se8r01-receive-pwm.c: 396: PC_ODR &= ~(1 << CE);
      00048C AE 50 0A         [ 2] 1085 	ldw	x, #0x500a
      00048F F6               [ 1] 1086 	ld	a, (x)
      000490 A4 EF            [ 1] 1087 	and	a, #0xef
      000492 F7               [ 1] 1088 	ld	(x), a
                                   1089 ;	se8r01-receive-pwm.c: 397: delay(50);                            // delay 50ms waitting for calibaration.
      000493 4B 32            [ 1] 1090 	push	#0x32
      000495 4B 00            [ 1] 1091 	push	#0x00
      000497 CDr01r8E         [ 4] 1092 	call	_delay
      00049A 5B 02            [ 2] 1093 	addw	sp, #2
                                   1094 ;	se8r01-receive-pwm.c: 402: delayTenMicro();
      00049C CDr00r00         [ 4] 1095 	call	_delayTenMicro
                                   1096 ;	se8r01-receive-pwm.c: 403: PC_ODR |= (1 << CE);
      00049F AE 50 0A         [ 2] 1097 	ldw	x, #0x500a
      0004A2 F6               [ 1] 1098 	ld	a, (x)
      0004A3 AA 10            [ 1] 1099 	or	a, #0x10
      0004A5 F7               [ 1] 1100 	ld	(x), a
                                   1101 ;	se8r01-receive-pwm.c: 404: delayTenMicro();
      0004A6 CDr00r00         [ 4] 1102 	call	_delayTenMicro
                                   1103 ;	se8r01-receive-pwm.c: 405: delayTenMicro();
      0004A9 CDr00r00         [ 4] 1104 	call	_delayTenMicro
                                   1105 ;	se8r01-receive-pwm.c: 406: delayTenMicro();
      0004AC CDr00r00         [ 4] 1106 	call	_delayTenMicro
                                   1107 ;	se8r01-receive-pwm.c: 407: PC_ODR &= ~(1 << CE);
      0004AF AE 50 0A         [ 2] 1108 	ldw	x, #0x500a
      0004B2 F6               [ 1] 1109 	ld	a, (x)
      0004B3 A4 EF            [ 1] 1110 	and	a, #0xef
      0004B5 F7               [ 1] 1111 	ld	(x), a
                                   1112 ;	se8r01-receive-pwm.c: 408: delay(50);                            // delay 50ms waitting for calibaration.
      0004B6 4B 32            [ 1] 1113 	push	#0x32
      0004B8 4B 00            [ 1] 1114 	push	#0x00
      0004BA CDr01r8E         [ 4] 1115 	call	_delay
      0004BD 5B 02            [ 2] 1116 	addw	sp, #2
      0004BF 5B 0D            [ 2] 1117 	addw	sp, #13
      0004C1 81               [ 4] 1118 	ret
                                   1119 ;	se8r01-receive-pwm.c: 412: void SE8R01_Analog_Init()           //SE8R01 初始化
                                   1120 ;	-----------------------------------------
                                   1121 ;	 function SE8R01_Analog_Init
                                   1122 ;	-----------------------------------------
      0004C2                       1123 _SE8R01_Analog_Init:
      0004C2 52 15            [ 2] 1124 	sub	sp, #21
                                   1125 ;	se8r01-receive-pwm.c: 417: gtemp[0]=0x28;
      0004C4 AEr00r00         [ 2] 1126 	ldw	x, #_gtemp+0
      0004C7 1F 14            [ 2] 1127 	ldw	(0x14, sp), x
      0004C9 1E 14            [ 2] 1128 	ldw	x, (0x14, sp)
      0004CB A6 28            [ 1] 1129 	ld	a, #0x28
      0004CD F7               [ 1] 1130 	ld	(x), a
                                   1131 ;	se8r01-receive-pwm.c: 418: gtemp[1]=0x32;
      0004CE 1E 14            [ 2] 1132 	ldw	x, (0x14, sp)
      0004D0 5C               [ 2] 1133 	incw	x
      0004D1 1F 08            [ 2] 1134 	ldw	(0x08, sp), x
      0004D3 1E 08            [ 2] 1135 	ldw	x, (0x08, sp)
      0004D5 A6 32            [ 1] 1136 	ld	a, #0x32
      0004D7 F7               [ 1] 1137 	ld	(x), a
                                   1138 ;	se8r01-receive-pwm.c: 419: gtemp[2]=0x80;
      0004D8 1E 14            [ 2] 1139 	ldw	x, (0x14, sp)
      0004DA 5C               [ 2] 1140 	incw	x
      0004DB 5C               [ 2] 1141 	incw	x
      0004DC 1F 06            [ 2] 1142 	ldw	(0x06, sp), x
      0004DE 1E 06            [ 2] 1143 	ldw	x, (0x06, sp)
      0004E0 A6 80            [ 1] 1144 	ld	a, #0x80
      0004E2 F7               [ 1] 1145 	ld	(x), a
                                   1146 ;	se8r01-receive-pwm.c: 420: gtemp[3]=0x90;
      0004E3 1E 14            [ 2] 1147 	ldw	x, (0x14, sp)
      0004E5 1C 00 03         [ 2] 1148 	addw	x, #0x0003
      0004E8 1F 0E            [ 2] 1149 	ldw	(0x0e, sp), x
      0004EA 1E 0E            [ 2] 1150 	ldw	x, (0x0e, sp)
      0004EC A6 90            [ 1] 1151 	ld	a, #0x90
      0004EE F7               [ 1] 1152 	ld	(x), a
                                   1153 ;	se8r01-receive-pwm.c: 421: gtemp[4]=0x00;
      0004EF 1E 14            [ 2] 1154 	ldw	x, (0x14, sp)
      0004F1 1C 00 04         [ 2] 1155 	addw	x, #0x0004
      0004F4 7F               [ 1] 1156 	clr	(x)
                                   1157 ;	se8r01-receive-pwm.c: 422: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK0_SETUP_VALUE, gtemp, 5);
      0004F5 1E 14            [ 2] 1158 	ldw	x, (0x14, sp)
      0004F7 4B 05            [ 1] 1159 	push	#0x05
      0004F9 89               [ 2] 1160 	pushw	x
      0004FA 4B 3E            [ 1] 1161 	push	#0x3e
      0004FC CDr00rA8         [ 4] 1162 	call	_write_spi_buf
      0004FF 5B 04            [ 2] 1163 	addw	sp, #4
                                   1164 ;	se8r01-receive-pwm.c: 423: delay(2);
      000501 4B 02            [ 1] 1165 	push	#0x02
      000503 4B 00            [ 1] 1166 	push	#0x00
      000505 CDr01r8E         [ 4] 1167 	call	_delay
      000508 5B 02            [ 2] 1168 	addw	sp, #2
                                   1169 ;	se8r01-receive-pwm.c: 426: rf_switch_bank(iBANK1);
      00050A 4B 80            [ 1] 1170 	push	#0x80
      00050C CDr02rD9         [ 4] 1171 	call	_rf_switch_bank
      00050F 84               [ 1] 1172 	pop	a
                                   1173 ;	se8r01-receive-pwm.c: 428: temp[0]=0x40;
      000510 96               [ 1] 1174 	ldw	x, sp
      000511 5C               [ 2] 1175 	incw	x
      000512 1F 0C            [ 2] 1176 	ldw	(0x0c, sp), x
      000514 1E 0C            [ 2] 1177 	ldw	x, (0x0c, sp)
      000516 A6 40            [ 1] 1178 	ld	a, #0x40
      000518 F7               [ 1] 1179 	ld	(x), a
                                   1180 ;	se8r01-receive-pwm.c: 429: temp[1]=0x01;               
      000519 1E 0C            [ 2] 1181 	ldw	x, (0x0c, sp)
      00051B 5C               [ 2] 1182 	incw	x
      00051C 1F 0A            [ 2] 1183 	ldw	(0x0a, sp), x
      00051E 1E 0A            [ 2] 1184 	ldw	x, (0x0a, sp)
      000520 A6 01            [ 1] 1185 	ld	a, #0x01
      000522 F7               [ 1] 1186 	ld	(x), a
                                   1187 ;	se8r01-receive-pwm.c: 430: temp[2]=0x30;               
      000523 1E 0C            [ 2] 1188 	ldw	x, (0x0c, sp)
      000525 5C               [ 2] 1189 	incw	x
      000526 5C               [ 2] 1190 	incw	x
      000527 1F 12            [ 2] 1191 	ldw	(0x12, sp), x
      000529 1E 12            [ 2] 1192 	ldw	x, (0x12, sp)
      00052B A6 30            [ 1] 1193 	ld	a, #0x30
      00052D F7               [ 1] 1194 	ld	(x), a
                                   1195 ;	se8r01-receive-pwm.c: 432: { temp[3]=0xE2; }              
      00052E 1E 0C            [ 2] 1196 	ldw	x, (0x0c, sp)
      000530 1C 00 03         [ 2] 1197 	addw	x, #0x0003
      000533 1F 10            [ 2] 1198 	ldw	(0x10, sp), x
                                   1199 ;	se8r01-receive-pwm.c: 431: if (SE8R01_DR_2M==1)
      000535 CEu00u00         [ 2] 1200 	ldw	x, _SE8R01_DR_2M+0
      000538 A3 00 01         [ 2] 1201 	cpw	x, #0x0001
      00053B 26 07            [ 1] 1202 	jrne	00102$
                                   1203 ;	se8r01-receive-pwm.c: 432: { temp[3]=0xE2; }              
      00053D 1E 10            [ 2] 1204 	ldw	x, (0x10, sp)
      00053F A6 E2            [ 1] 1205 	ld	a, #0xe2
      000541 F7               [ 1] 1206 	ld	(x), a
      000542 20 05            [ 2] 1207 	jra	00103$
      000544                       1208 00102$:
                                   1209 ;	se8r01-receive-pwm.c: 434: { temp[3]=0xE0;}
      000544 1E 10            [ 2] 1210 	ldw	x, (0x10, sp)
      000546 A6 E0            [ 1] 1211 	ld	a, #0xe0
      000548 F7               [ 1] 1212 	ld	(x), a
      000549                       1213 00103$:
                                   1214 ;	se8r01-receive-pwm.c: 436: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_PLL_CTL0, temp,4);
      000549 1E 0C            [ 2] 1215 	ldw	x, (0x0c, sp)
      00054B 4B 04            [ 1] 1216 	push	#0x04
      00054D 89               [ 2] 1217 	pushw	x
      00054E 4B 21            [ 1] 1218 	push	#0x21
      000550 CDr00rA8         [ 4] 1219 	call	_write_spi_buf
      000553 5B 04            [ 2] 1220 	addw	sp, #4
                                   1221 ;	se8r01-receive-pwm.c: 438: temp[0]=0x29;
      000555 1E 0C            [ 2] 1222 	ldw	x, (0x0c, sp)
      000557 A6 29            [ 1] 1223 	ld	a, #0x29
      000559 F7               [ 1] 1224 	ld	(x), a
                                   1225 ;	se8r01-receive-pwm.c: 439: temp[1]=0x89;
      00055A 1E 0A            [ 2] 1226 	ldw	x, (0x0a, sp)
      00055C A6 89            [ 1] 1227 	ld	a, #0x89
      00055E F7               [ 1] 1228 	ld	(x), a
                                   1229 ;	se8r01-receive-pwm.c: 440: temp[2]=0x55;                     
      00055F 1E 12            [ 2] 1230 	ldw	x, (0x12, sp)
      000561 A6 55            [ 1] 1231 	ld	a, #0x55
      000563 F7               [ 1] 1232 	ld	(x), a
                                   1233 ;	se8r01-receive-pwm.c: 441: temp[3]=0x40;
      000564 1E 10            [ 2] 1234 	ldw	x, (0x10, sp)
      000566 A6 40            [ 1] 1235 	ld	a, #0x40
      000568 F7               [ 1] 1236 	ld	(x), a
                                   1237 ;	se8r01-receive-pwm.c: 442: temp[4]=0x50;
      000569 1E 0C            [ 2] 1238 	ldw	x, (0x0c, sp)
      00056B A6 50            [ 1] 1239 	ld	a, #0x50
      00056D E7 04            [ 1] 1240 	ld	(0x0004, x), a
                                   1241 ;	se8r01-receive-pwm.c: 443: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_CAL_CTL, temp,5);
      00056F 1E 0C            [ 2] 1242 	ldw	x, (0x0c, sp)
      000571 4B 05            [ 1] 1243 	push	#0x05
      000573 89               [ 2] 1244 	pushw	x
      000574 4B 23            [ 1] 1245 	push	#0x23
      000576 CDr00rA8         [ 4] 1246 	call	_write_spi_buf
      000579 5B 04            [ 2] 1247 	addw	sp, #4
                                   1248 ;	se8r01-receive-pwm.c: 445: if (SE8R01_DR_2M==1)
      00057B CEu00u00         [ 2] 1249 	ldw	x, _SE8R01_DR_2M+0
      00057E A3 00 01         [ 2] 1250 	cpw	x, #0x0001
      000581 26 07            [ 1] 1251 	jrne	00105$
                                   1252 ;	se8r01-receive-pwm.c: 446: { temp[0]=0x29;}
      000583 1E 0C            [ 2] 1253 	ldw	x, (0x0c, sp)
      000585 A6 29            [ 1] 1254 	ld	a, #0x29
      000587 F7               [ 1] 1255 	ld	(x), a
      000588 20 05            [ 2] 1256 	jra	00106$
      00058A                       1257 00105$:
                                   1258 ;	se8r01-receive-pwm.c: 448: { temp[0]=0x14;}
      00058A 1E 0C            [ 2] 1259 	ldw	x, (0x0c, sp)
      00058C A6 14            [ 1] 1260 	ld	a, #0x14
      00058E F7               [ 1] 1261 	ld	(x), a
      00058F                       1262 00106$:
                                   1263 ;	se8r01-receive-pwm.c: 450: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_FDEV, temp,1);
      00058F 1E 0C            [ 2] 1264 	ldw	x, (0x0c, sp)
      000591 4B 01            [ 1] 1265 	push	#0x01
      000593 89               [ 2] 1266 	pushw	x
      000594 4B 2C            [ 1] 1267 	push	#0x2c
      000596 CDr00rA8         [ 4] 1268 	call	_write_spi_buf
      000599 5B 04            [ 2] 1269 	addw	sp, #4
                                   1270 ;	se8r01-receive-pwm.c: 452: temp[0]=0x55;
      00059B 1E 0C            [ 2] 1271 	ldw	x, (0x0c, sp)
      00059D A6 55            [ 1] 1272 	ld	a, #0x55
      00059F F7               [ 1] 1273 	ld	(x), a
                                   1274 ;	se8r01-receive-pwm.c: 453: temp[1]=0xC2;
      0005A0 1E 0A            [ 2] 1275 	ldw	x, (0x0a, sp)
      0005A2 A6 C2            [ 1] 1276 	ld	a, #0xc2
      0005A4 F7               [ 1] 1277 	ld	(x), a
                                   1278 ;	se8r01-receive-pwm.c: 454: temp[2]=0x09;
      0005A5 1E 12            [ 2] 1279 	ldw	x, (0x12, sp)
      0005A7 A6 09            [ 1] 1280 	ld	a, #0x09
      0005A9 F7               [ 1] 1281 	ld	(x), a
                                   1282 ;	se8r01-receive-pwm.c: 455: temp[3]=0xAC;  
      0005AA 1E 10            [ 2] 1283 	ldw	x, (0x10, sp)
      0005AC A6 AC            [ 1] 1284 	ld	a, #0xac
      0005AE F7               [ 1] 1285 	ld	(x), a
                                   1286 ;	se8r01-receive-pwm.c: 456: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_RX_CTRL,temp,4);
      0005AF 1E 0C            [ 2] 1287 	ldw	x, (0x0c, sp)
      0005B1 4B 04            [ 1] 1288 	push	#0x04
      0005B3 89               [ 2] 1289 	pushw	x
      0005B4 4B 31            [ 1] 1290 	push	#0x31
      0005B6 CDr00rA8         [ 4] 1291 	call	_write_spi_buf
      0005B9 5B 04            [ 2] 1292 	addw	sp, #4
                                   1293 ;	se8r01-receive-pwm.c: 458: temp[0]=0x00;
      0005BB 1E 0C            [ 2] 1294 	ldw	x, (0x0c, sp)
      0005BD 7F               [ 1] 1295 	clr	(x)
                                   1296 ;	se8r01-receive-pwm.c: 459: temp[1]=0x14;
      0005BE 1E 0A            [ 2] 1297 	ldw	x, (0x0a, sp)
      0005C0 A6 14            [ 1] 1298 	ld	a, #0x14
      0005C2 F7               [ 1] 1299 	ld	(x), a
                                   1300 ;	se8r01-receive-pwm.c: 460: temp[2]=0x08;   
      0005C3 1E 12            [ 2] 1301 	ldw	x, (0x12, sp)
      0005C5 A6 08            [ 1] 1302 	ld	a, #0x08
      0005C7 F7               [ 1] 1303 	ld	(x), a
                                   1304 ;	se8r01-receive-pwm.c: 461: temp[3]=0x29;
      0005C8 1E 10            [ 2] 1305 	ldw	x, (0x10, sp)
      0005CA A6 29            [ 1] 1306 	ld	a, #0x29
      0005CC F7               [ 1] 1307 	ld	(x), a
                                   1308 ;	se8r01-receive-pwm.c: 462: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_FAGC_CTRL_1, temp,4);
      0005CD 1E 0C            [ 2] 1309 	ldw	x, (0x0c, sp)
      0005CF 4B 04            [ 1] 1310 	push	#0x04
      0005D1 89               [ 2] 1311 	pushw	x
      0005D2 4B 33            [ 1] 1312 	push	#0x33
      0005D4 CDr00rA8         [ 4] 1313 	call	_write_spi_buf
      0005D7 5B 04            [ 2] 1314 	addw	sp, #4
                                   1315 ;	se8r01-receive-pwm.c: 464: temp[0]=0x02;
      0005D9 1E 0C            [ 2] 1316 	ldw	x, (0x0c, sp)
      0005DB A6 02            [ 1] 1317 	ld	a, #0x02
      0005DD F7               [ 1] 1318 	ld	(x), a
                                   1319 ;	se8r01-receive-pwm.c: 465: temp[1]=0xC1;
      0005DE 1E 0A            [ 2] 1320 	ldw	x, (0x0a, sp)
      0005E0 A6 C1            [ 1] 1321 	ld	a, #0xc1
      0005E2 F7               [ 1] 1322 	ld	(x), a
                                   1323 ;	se8r01-receive-pwm.c: 466: temp[2]=0xCB;  
      0005E3 1E 12            [ 2] 1324 	ldw	x, (0x12, sp)
      0005E5 A6 CB            [ 1] 1325 	ld	a, #0xcb
      0005E7 F7               [ 1] 1326 	ld	(x), a
                                   1327 ;	se8r01-receive-pwm.c: 467: temp[3]=0x1C;
      0005E8 1E 10            [ 2] 1328 	ldw	x, (0x10, sp)
      0005EA A6 1C            [ 1] 1329 	ld	a, #0x1c
      0005EC F7               [ 1] 1330 	ld	(x), a
                                   1331 ;	se8r01-receive-pwm.c: 468: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_AGC_GAIN, temp,4);
      0005ED 1E 0C            [ 2] 1332 	ldw	x, (0x0c, sp)
      0005EF 4B 04            [ 1] 1333 	push	#0x04
      0005F1 89               [ 2] 1334 	pushw	x
      0005F2 4B 3D            [ 1] 1335 	push	#0x3d
      0005F4 CDr00rA8         [ 4] 1336 	call	_write_spi_buf
      0005F7 5B 04            [ 2] 1337 	addw	sp, #4
                                   1338 ;	se8r01-receive-pwm.c: 470: temp[0]=0x97;
      0005F9 1E 0C            [ 2] 1339 	ldw	x, (0x0c, sp)
      0005FB A6 97            [ 1] 1340 	ld	a, #0x97
      0005FD F7               [ 1] 1341 	ld	(x), a
                                   1342 ;	se8r01-receive-pwm.c: 471: temp[1]=0x64;
      0005FE 1E 0A            [ 2] 1343 	ldw	x, (0x0a, sp)
      000600 A6 64            [ 1] 1344 	ld	a, #0x64
      000602 F7               [ 1] 1345 	ld	(x), a
                                   1346 ;	se8r01-receive-pwm.c: 472: temp[2]=0x00;
      000603 1E 12            [ 2] 1347 	ldw	x, (0x12, sp)
      000605 7F               [ 1] 1348 	clr	(x)
                                   1349 ;	se8r01-receive-pwm.c: 473: temp[3]=0x01;
      000606 1E 10            [ 2] 1350 	ldw	x, (0x10, sp)
      000608 A6 01            [ 1] 1351 	ld	a, #0x01
      00060A F7               [ 1] 1352 	ld	(x), a
                                   1353 ;	se8r01-receive-pwm.c: 474: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_RF_IVGEN, temp,4);
      00060B 1E 0C            [ 2] 1354 	ldw	x, (0x0c, sp)
      00060D 4B 04            [ 1] 1355 	push	#0x04
      00060F 89               [ 2] 1356 	pushw	x
      000610 4B 3E            [ 1] 1357 	push	#0x3e
      000612 CDr00rA8         [ 4] 1358 	call	_write_spi_buf
      000615 5B 04            [ 2] 1359 	addw	sp, #4
                                   1360 ;	se8r01-receive-pwm.c: 476: gtemp[0]=0x2A;
      000617 1E 14            [ 2] 1361 	ldw	x, (0x14, sp)
      000619 A6 2A            [ 1] 1362 	ld	a, #0x2a
      00061B F7               [ 1] 1363 	ld	(x), a
                                   1364 ;	se8r01-receive-pwm.c: 477: gtemp[1]=0x04;
      00061C 1E 08            [ 2] 1365 	ldw	x, (0x08, sp)
      00061E A6 04            [ 1] 1366 	ld	a, #0x04
      000620 F7               [ 1] 1367 	ld	(x), a
                                   1368 ;	se8r01-receive-pwm.c: 478: gtemp[2]=0x00;
      000621 1E 06            [ 2] 1369 	ldw	x, (0x06, sp)
      000623 7F               [ 1] 1370 	clr	(x)
                                   1371 ;	se8r01-receive-pwm.c: 479: gtemp[3]=0x7D;
      000624 1E 0E            [ 2] 1372 	ldw	x, (0x0e, sp)
      000626 A6 7D            [ 1] 1373 	ld	a, #0x7d
      000628 F7               [ 1] 1374 	ld	(x), a
                                   1375 ;	se8r01-receive-pwm.c: 480: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_TEST_PKDET, gtemp, 4);
      000629 1E 14            [ 2] 1376 	ldw	x, (0x14, sp)
      00062B 4B 04            [ 1] 1377 	push	#0x04
      00062D 89               [ 2] 1378 	pushw	x
      00062E 4B 3F            [ 1] 1379 	push	#0x3f
      000630 CDr00rA8         [ 4] 1380 	call	_write_spi_buf
      000633 5B 04            [ 2] 1381 	addw	sp, #4
                                   1382 ;	se8r01-receive-pwm.c: 482: rf_switch_bank(iBANK0);
      000635 4B 00            [ 1] 1383 	push	#0x00
      000637 CDr02rD9         [ 4] 1384 	call	_rf_switch_bank
      00063A 84               [ 1] 1385 	pop	a
      00063B 5B 15            [ 2] 1386 	addw	sp, #21
      00063D 81               [ 4] 1387 	ret
                                   1388 ;	se8r01-receive-pwm.c: 485: void SE8R01_Init()  
                                   1389 ;	-----------------------------------------
                                   1390 ;	 function SE8R01_Init
                                   1391 ;	-----------------------------------------
      00063E                       1392 _SE8R01_Init:
      00063E 52 05            [ 2] 1393 	sub	sp, #5
                                   1394 ;	se8r01-receive-pwm.c: 488: SE8R01_Calibration();   
      000640 CDr02rF6         [ 4] 1395 	call	_SE8R01_Calibration
                                   1396 ;	se8r01-receive-pwm.c: 489: SE8R01_Analog_Init();   
      000643 CDr04rC2         [ 4] 1397 	call	_SE8R01_Analog_Init
                                   1398 ;	se8r01-receive-pwm.c: 493: if (SE8R01_DR_2M==1)
      000646 CEu00u00         [ 2] 1399 	ldw	x, _SE8R01_DR_2M+0
      000649 A3 00 01         [ 2] 1400 	cpw	x, #0x0001
      00064C 26 07            [ 1] 1401 	jrne	00105$
                                   1402 ;	se8r01-receive-pwm.c: 494: {  temp[0]=0b01001111; }     //2MHz,+5dbm
      00064E 96               [ 1] 1403 	ldw	x, sp
      00064F 5C               [ 2] 1404 	incw	x
      000650 A6 4F            [ 1] 1405 	ld	a, #0x4f
      000652 F7               [ 1] 1406 	ld	(x), a
      000653 20 14            [ 2] 1407 	jra	00106$
      000655                       1408 00105$:
                                   1409 ;	se8r01-receive-pwm.c: 495: else if  (SE8R01_DR_1M==1)
      000655 CEu00u02         [ 2] 1410 	ldw	x, _SE8R01_DR_1M+0
      000658 A3 00 01         [ 2] 1411 	cpw	x, #0x0001
      00065B 26 07            [ 1] 1412 	jrne	00102$
                                   1413 ;	se8r01-receive-pwm.c: 496: {  temp[0]=0b01000111;  }     //1MHz,+5dbm
      00065D 96               [ 1] 1414 	ldw	x, sp
      00065E 5C               [ 2] 1415 	incw	x
      00065F A6 47            [ 1] 1416 	ld	a, #0x47
      000661 F7               [ 1] 1417 	ld	(x), a
      000662 20 05            [ 2] 1418 	jra	00106$
      000664                       1419 00102$:
                                   1420 ;	se8r01-receive-pwm.c: 498: {temp[0]=0b01101111;  }     //500K,+5dbm
      000664 96               [ 1] 1421 	ldw	x, sp
      000665 5C               [ 2] 1422 	incw	x
      000666 A6 6F            [ 1] 1423 	ld	a, #0x6f
      000668 F7               [ 1] 1424 	ld	(x), a
      000669                       1425 00106$:
                                   1426 ;	se8r01-receive-pwm.c: 500: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK0_RF_SETUP,temp,1);
      000669 96               [ 1] 1427 	ldw	x, sp
      00066A 5C               [ 2] 1428 	incw	x
      00066B 4B 01            [ 1] 1429 	push	#0x01
      00066D 89               [ 2] 1430 	pushw	x
      00066E 4B 26            [ 1] 1431 	push	#0x26
      000670 CDr00rA8         [ 4] 1432 	call	_write_spi_buf
      000673 5B 04            [ 2] 1433 	addw	sp, #4
                                   1434 ;	se8r01-receive-pwm.c: 501: write_spi_reg(WRITE_REG|iRF_BANK0_EN_AA, 0b00111111);          //enable auto acc on pip 1
      000675 4B 3F            [ 1] 1435 	push	#0x3f
      000677 4B 21            [ 1] 1436 	push	#0x21
      000679 CDr00r2E         [ 4] 1437 	call	_write_spi_reg
      00067C 5B 02            [ 2] 1438 	addw	sp, #2
                                   1439 ;	se8r01-receive-pwm.c: 502: write_spi_reg(WRITE_REG|iRF_BANK0_EN_RXADDR, 0b00111111);      //enable pip 1
      00067E 4B 3F            [ 1] 1440 	push	#0x3f
      000680 4B 22            [ 1] 1441 	push	#0x22
      000682 CDr00r2E         [ 4] 1442 	call	_write_spi_reg
      000685 5B 02            [ 2] 1443 	addw	sp, #2
                                   1444 ;	se8r01-receive-pwm.c: 503: write_spi_reg(WRITE_REG|iRF_BANK0_SETUP_AW, 0x02);  
      000687 4B 02            [ 1] 1445 	push	#0x02
      000689 4B 23            [ 1] 1446 	push	#0x23
      00068B CDr00r2E         [ 4] 1447 	call	_write_spi_reg
      00068E 5B 02            [ 2] 1448 	addw	sp, #2
                                   1449 ;	se8r01-receive-pwm.c: 504: write_spi_reg(WRITE_REG|iRF_BANK0_RF_CH, 40);
      000690 4B 28            [ 1] 1450 	push	#0x28
      000692 4B 25            [ 1] 1451 	push	#0x25
      000694 CDr00r2E         [ 4] 1452 	call	_write_spi_reg
      000697 5B 02            [ 2] 1453 	addw	sp, #2
                                   1454 ;	se8r01-receive-pwm.c: 506: write_spi_buf(WRITE_REG + TX_ADDR, ADDRESS0, ADR_WIDTH);    	
      000699 AEr00r1A         [ 2] 1455 	ldw	x, #_ADDRESS0+0
      00069C 90 93            [ 1] 1456 	ldw	y, x
      00069E 89               [ 2] 1457 	pushw	x
      00069F 4B 04            [ 1] 1458 	push	#0x04
      0006A1 90 89            [ 2] 1459 	pushw	y
      0006A3 4B 30            [ 1] 1460 	push	#0x30
      0006A5 CDr00rA8         [ 4] 1461 	call	_write_spi_buf
      0006A8 5B 04            [ 2] 1462 	addw	sp, #4
      0006AA 85               [ 2] 1463 	popw	x
                                   1464 ;	se8r01-receive-pwm.c: 507: write_spi_buf(WRITE_REG + RX_ADDR_P0, ADDRESS0, ADR_WIDTH); 
      0006AB 4B 04            [ 1] 1465 	push	#0x04
      0006AD 89               [ 2] 1466 	pushw	x
      0006AE 4B 2A            [ 1] 1467 	push	#0x2a
      0006B0 CDr00rA8         [ 4] 1468 	call	_write_spi_buf
      0006B3 5B 04            [ 2] 1469 	addw	sp, #4
                                   1470 ;	se8r01-receive-pwm.c: 508: write_spi_buf(WRITE_REG + RX_ADDR_P1, ADDRESS1, ADR_WIDTH); 
      0006B5 AEr00r16         [ 2] 1471 	ldw	x, #_ADDRESS1+0
      0006B8 4B 04            [ 1] 1472 	push	#0x04
      0006BA 89               [ 2] 1473 	pushw	x
      0006BB 4B 2B            [ 1] 1474 	push	#0x2b
      0006BD CDr00rA8         [ 4] 1475 	call	_write_spi_buf
      0006C0 5B 04            [ 2] 1476 	addw	sp, #4
                                   1477 ;	se8r01-receive-pwm.c: 509: write_spi_buf(WRITE_REG + RX_ADDR_P2, ADDRESS2, 1); 
      0006C2 AEr00r12         [ 2] 1478 	ldw	x, #_ADDRESS2+0
      0006C5 4B 01            [ 1] 1479 	push	#0x01
      0006C7 89               [ 2] 1480 	pushw	x
      0006C8 4B 2C            [ 1] 1481 	push	#0x2c
      0006CA CDr00rA8         [ 4] 1482 	call	_write_spi_buf
      0006CD 5B 04            [ 2] 1483 	addw	sp, #4
                                   1484 ;	se8r01-receive-pwm.c: 510: write_spi_buf(WRITE_REG + RX_ADDR_P3, ADDRESS3, 1); 
      0006CF AEr00r13         [ 2] 1485 	ldw	x, #_ADDRESS3+0
      0006D2 4B 01            [ 1] 1486 	push	#0x01
      0006D4 89               [ 2] 1487 	pushw	x
      0006D5 4B 2D            [ 1] 1488 	push	#0x2d
      0006D7 CDr00rA8         [ 4] 1489 	call	_write_spi_buf
      0006DA 5B 04            [ 2] 1490 	addw	sp, #4
                                   1491 ;	se8r01-receive-pwm.c: 511: write_spi_buf(WRITE_REG + RX_ADDR_P4, ADDRESS4, 1); 
      0006DC AEr00r14         [ 2] 1492 	ldw	x, #_ADDRESS4+0
      0006DF 4B 01            [ 1] 1493 	push	#0x01
      0006E1 89               [ 2] 1494 	pushw	x
      0006E2 4B 2E            [ 1] 1495 	push	#0x2e
      0006E4 CDr00rA8         [ 4] 1496 	call	_write_spi_buf
      0006E7 5B 04            [ 2] 1497 	addw	sp, #4
                                   1498 ;	se8r01-receive-pwm.c: 512: write_spi_buf(WRITE_REG + RX_ADDR_P5, ADDRESS5, 1); 
      0006E9 AEr00r15         [ 2] 1499 	ldw	x, #_ADDRESS5+0
      0006EC 4B 01            [ 1] 1500 	push	#0x01
      0006EE 89               [ 2] 1501 	pushw	x
      0006EF 4B 2F            [ 1] 1502 	push	#0x2f
      0006F1 CDr00rA8         [ 4] 1503 	call	_write_spi_buf
      0006F4 5B 04            [ 2] 1504 	addw	sp, #4
                                   1505 ;	se8r01-receive-pwm.c: 513: write_spi_reg(WRITE_REG + RX_PW_P0, PLOAD_WIDTH); 
      0006F6 4B 20            [ 1] 1506 	push	#0x20
      0006F8 4B 31            [ 1] 1507 	push	#0x31
      0006FA CDr00r2E         [ 4] 1508 	call	_write_spi_reg
      0006FD 5B 02            [ 2] 1509 	addw	sp, #2
                                   1510 ;	se8r01-receive-pwm.c: 514: write_spi_reg(WRITE_REG|iRF_BANK0_CONFIG, 0x3f); 
      0006FF 4B 3F            [ 1] 1511 	push	#0x3f
      000701 4B 20            [ 1] 1512 	push	#0x20
      000703 CDr00r2E         [ 4] 1513 	call	_write_spi_reg
      000706 5B 02            [ 2] 1514 	addw	sp, #2
                                   1515 ;	se8r01-receive-pwm.c: 515: write_spi_reg(WRITE_REG|iRF_BANK0_DYNPD, 0b00111111);          // enable dynamic payload length data
      000708 4B 3F            [ 1] 1516 	push	#0x3f
      00070A 4B 3C            [ 1] 1517 	push	#0x3c
      00070C CDr00r2E         [ 4] 1518 	call	_write_spi_reg
      00070F 5B 02            [ 2] 1519 	addw	sp, #2
                                   1520 ;	se8r01-receive-pwm.c: 516: write_spi_reg(WRITE_REG|iRF_BANK0_FEATURE, 0x07);        // enable dynamic paload lenght; enbale payload with ack enable w_tx_payload_noack
      000711 4B 07            [ 1] 1521 	push	#0x07
      000713 4B 3D            [ 1] 1522 	push	#0x3d
      000715 CDr00r2E         [ 4] 1523 	call	_write_spi_reg
      000718 5B 02            [ 2] 1524 	addw	sp, #2
                                   1525 ;	se8r01-receive-pwm.c: 517: PC_ODR |= (1 << CE);
      00071A AE 50 0A         [ 2] 1526 	ldw	x, #0x500a
      00071D F6               [ 1] 1527 	ld	a, (x)
      00071E AA 10            [ 1] 1528 	or	a, #0x10
      000720 F7               [ 1] 1529 	ld	(x), a
      000721 5B 05            [ 2] 1530 	addw	sp, #5
      000723 81               [ 4] 1531 	ret
                                   1532 ;	se8r01-receive-pwm.c: 522: void Init_Tim2 ()
                                   1533 ;	-----------------------------------------
                                   1534 ;	 function Init_Tim2
                                   1535 ;	-----------------------------------------
      000724                       1536 _Init_Tim2:
                                   1537 ;	se8r01-receive-pwm.c: 551: TIM2_CCMR3 |=0X70;//Set the timer 2 / three channel three (PD2) output mode
      000724 AE 53 09         [ 2] 1538 	ldw	x, #0x5309
      000727 F6               [ 1] 1539 	ld	a, (x)
      000728 AA 70            [ 1] 1540 	or	a, #0x70
      00072A F7               [ 1] 1541 	ld	(x), a
                                   1542 ;	se8r01-receive-pwm.c: 552: TIM2_CCMR3 |=0X04;//Comparison of 3 pre load / / output enable
      00072B AE 53 09         [ 2] 1543 	ldw	x, #0x5309
      00072E F6               [ 1] 1544 	ld	a, (x)
      00072F AA 04            [ 1] 1545 	or	a, #0x04
      000731 F7               [ 1] 1546 	ld	(x), a
                                   1547 ;	se8r01-receive-pwm.c: 554: TIM2_CCER2 |=0x03;//  Channel 3 enable, active low output configuration
      000732 AE 53 0B         [ 2] 1548 	ldw	x, #0x530b
      000735 F6               [ 1] 1549 	ld	a, (x)
      000736 AA 03            [ 1] 1550 	or	a, #0x03
      000738 F7               [ 1] 1551 	ld	(x), a
                                   1552 ;	se8r01-receive-pwm.c: 557: TIM2_PSCR =0X04;// Automatic loading / / initialization register, PWM Fang Bo frequency, Fpwm=0.125M/62500=2HZ
      000739 AE 53 0E         [ 2] 1553 	ldw	x, #0x530e
      00073C A6 04            [ 1] 1554 	ld	a, #0x04
      00073E F7               [ 1] 1555 	ld	(x), a
                                   1556 ;	se8r01-receive-pwm.c: 558: TIM2_ARRH =62500/256; //auto reload register value
      00073F AE 53 0F         [ 2] 1557 	ldw	x, #0x530f
      000742 A6 F4            [ 1] 1558 	ld	a, #0xf4
      000744 F7               [ 1] 1559 	ld	(x), a
                                   1560 ;	se8r01-receive-pwm.c: 559: TIM2_ARRL =62500%256;
      000745 AE 53 10         [ 2] 1561 	ldw	x, #0x5310
      000748 A6 24            [ 1] 1562 	ld	a, #0x24
      00074A F7               [ 1] 1563 	ld	(x), a
                                   1564 ;	se8r01-receive-pwm.c: 561: TIM2_CCR3H =31250/256; //compare capture register value
      00074B AE 53 15         [ 2] 1565 	ldw	x, #0x5315
      00074E A6 7A            [ 1] 1566 	ld	a, #0x7a
      000750 F7               [ 1] 1567 	ld	(x), a
                                   1568 ;	se8r01-receive-pwm.c: 562: TIM2_CCR3L =31250%256;
      000751 AE 53 16         [ 2] 1569 	ldw	x, #0x5316
      000754 A6 12            [ 1] 1570 	ld	a, #0x12
      000756 F7               [ 1] 1571 	ld	(x), a
                                   1572 ;	se8r01-receive-pwm.c: 566: TIM2_CR1 |=0x81;
      000757 AE 53 00         [ 2] 1573 	ldw	x, #0x5300
      00075A F6               [ 1] 1574 	ld	a, (x)
      00075B AA 81            [ 1] 1575 	or	a, #0x81
      00075D F7               [ 1] 1576 	ld	(x), a
      00075E 81               [ 4] 1577 	ret
                                   1578 ;	se8r01-receive-pwm.c: 573: int main () {
                                   1579 ;	-----------------------------------------
                                   1580 ;	 function main
                                   1581 ;	-----------------------------------------
      00075F                       1582 _main:
      00075F 52 33            [ 2] 1583 	sub	sp, #51
                                   1584 ;	se8r01-receive-pwm.c: 575: UCHAR rx_addr_p1[]  = { 0xd2, 0xf0, 0xf0, 0xf0, 0xf0 };
      000761 90 96            [ 1] 1585 	ldw	y, sp
      000763 72 A9 00 2D      [ 2] 1586 	addw	y, #45
      000767 A6 D2            [ 1] 1587 	ld	a, #0xd2
      000769 90 F7            [ 1] 1588 	ld	(y), a
      00076B 93               [ 1] 1589 	ldw	x, y
      00076C 5C               [ 2] 1590 	incw	x
      00076D A6 F0            [ 1] 1591 	ld	a, #0xf0
      00076F F7               [ 1] 1592 	ld	(x), a
      000770 93               [ 1] 1593 	ldw	x, y
      000771 5C               [ 2] 1594 	incw	x
      000772 5C               [ 2] 1595 	incw	x
      000773 A6 F0            [ 1] 1596 	ld	a, #0xf0
      000775 F7               [ 1] 1597 	ld	(x), a
      000776 93               [ 1] 1598 	ldw	x, y
      000777 A6 F0            [ 1] 1599 	ld	a, #0xf0
      000779 E7 03            [ 1] 1600 	ld	(0x0003, x), a
      00077B 93               [ 1] 1601 	ldw	x, y
      00077C A6 F0            [ 1] 1602 	ld	a, #0xf0
      00077E E7 04            [ 1] 1603 	ld	(0x0004, x), a
                                   1604 ;	se8r01-receive-pwm.c: 576: UCHAR tx_addr[]     = { 0xe1, 0xf0, 0xf0, 0xf0, 0xf0 };
      000780 90 96            [ 1] 1605 	ldw	y, sp
      000782 72 A9 00 22      [ 2] 1606 	addw	y, #34
      000786 A6 E1            [ 1] 1607 	ld	a, #0xe1
      000788 90 F7            [ 1] 1608 	ld	(y), a
      00078A 93               [ 1] 1609 	ldw	x, y
      00078B 5C               [ 2] 1610 	incw	x
      00078C A6 F0            [ 1] 1611 	ld	a, #0xf0
      00078E F7               [ 1] 1612 	ld	(x), a
      00078F 93               [ 1] 1613 	ldw	x, y
      000790 5C               [ 2] 1614 	incw	x
      000791 5C               [ 2] 1615 	incw	x
      000792 A6 F0            [ 1] 1616 	ld	a, #0xf0
      000794 F7               [ 1] 1617 	ld	(x), a
      000795 93               [ 1] 1618 	ldw	x, y
      000796 A6 F0            [ 1] 1619 	ld	a, #0xf0
      000798 E7 03            [ 1] 1620 	ld	(0x0003, x), a
      00079A 93               [ 1] 1621 	ldw	x, y
      00079B 1C 00 04         [ 2] 1622 	addw	x, #0x0004
      00079E A6 F0            [ 1] 1623 	ld	a, #0xf0
      0007A0 F7               [ 1] 1624 	ld	(x), a
                                   1625 ;	se8r01-receive-pwm.c: 581: InitializeSystemClock();
      0007A1 CDr01r44         [ 4] 1626 	call	_InitializeSystemClock
                                   1627 ;	se8r01-receive-pwm.c: 582: InitializeUART();
      0007A4 CDr02r3C         [ 4] 1628 	call	_InitializeUART
                                   1629 ;	se8r01-receive-pwm.c: 584: InitializeSPI ();
      0007A7 CDr01r1C         [ 4] 1630 	call	_InitializeSPI
                                   1631 ;	se8r01-receive-pwm.c: 586: UARTPrintF("start debug \n\r");
      0007AA AEr08rEB         [ 2] 1632 	ldw	x, #___str_0+0
      0007AD 89               [ 2] 1633 	pushw	x
      0007AE CDr01rD9         [ 4] 1634 	call	_UARTPrintF
      0007B1 5B 02            [ 2] 1635 	addw	sp, #2
                                   1636 ;	se8r01-receive-pwm.c: 588: memset (tx_payload, 0, sizeof(tx_payload));
      0007B3 96               [ 1] 1637 	ldw	x, sp
      0007B4 5C               [ 2] 1638 	incw	x
      0007B5 4B 21            [ 1] 1639 	push	#0x21
      0007B7 4B 00            [ 1] 1640 	push	#0x00
      0007B9 4B 00            [ 1] 1641 	push	#0x00
      0007BB 4B 00            [ 1] 1642 	push	#0x00
      0007BD 89               [ 2] 1643 	pushw	x
      0007BE CDr00r00         [ 4] 1644 	call	_memset
      0007C1 5B 06            [ 2] 1645 	addw	sp, #6
                                   1646 ;	se8r01-receive-pwm.c: 591: init_io();                        // Initialize IO port
      0007C3 CDr02rB5         [ 4] 1647 	call	_init_io
                                   1648 ;	se8r01-receive-pwm.c: 592: write_spi_reg(FLUSH_RX,0); // receive data 
      0007C6 4B 00            [ 1] 1649 	push	#0x00
      0007C8 4B E2            [ 1] 1650 	push	#0xe2
      0007CA CDr00r2E         [ 4] 1651 	call	_write_spi_reg
      0007CD 5B 02            [ 2] 1652 	addw	sp, #2
                                   1653 ;	se8r01-receive-pwm.c: 593: readstatus = read_spi_reg(CONFIG);
      0007CF 4B 00            [ 1] 1654 	push	#0x00
      0007D1 CDr00r6A         [ 4] 1655 	call	_read_spi_reg
      0007D4 5B 01            [ 2] 1656 	addw	sp, #1
                                   1657 ;	se8r01-receive-pwm.c: 594: UARTPrintF("config = \n\r");
      0007D6 AEr08rFA         [ 2] 1658 	ldw	x, #___str_1+0
      0007D9 88               [ 1] 1659 	push	a
      0007DA 89               [ 2] 1660 	pushw	x
      0007DB CDr01rD9         [ 4] 1661 	call	_UARTPrintF
      0007DE 5B 02            [ 2] 1662 	addw	sp, #2
      0007E0 84               [ 1] 1663 	pop	a
                                   1664 ;	se8r01-receive-pwm.c: 595: print_UCHAR_hex(readstatus);
      0007E1 88               [ 1] 1665 	push	a
      0007E2 CDr01rF0         [ 4] 1666 	call	_print_UCHAR_hex
      0007E5 84               [ 1] 1667 	pop	a
                                   1668 ;	se8r01-receive-pwm.c: 596: readstatus = read_spi_reg(STATUS);
      0007E6 4B 07            [ 1] 1669 	push	#0x07
      0007E8 CDr00r6A         [ 4] 1670 	call	_read_spi_reg
      0007EB 5B 01            [ 2] 1671 	addw	sp, #1
                                   1672 ;	se8r01-receive-pwm.c: 597: UARTPrintF("status = \n\r");
      0007ED AEr09r06         [ 2] 1673 	ldw	x, #___str_2+0
      0007F0 88               [ 1] 1674 	push	a
      0007F1 89               [ 2] 1675 	pushw	x
      0007F2 CDr01rD9         [ 4] 1676 	call	_UARTPrintF
      0007F5 5B 02            [ 2] 1677 	addw	sp, #2
      0007F7 84               [ 1] 1678 	pop	a
                                   1679 ;	se8r01-receive-pwm.c: 598: print_UCHAR_hex(readstatus);
      0007F8 88               [ 1] 1680 	push	a
      0007F9 CDr01rF0         [ 4] 1681 	call	_print_UCHAR_hex
      0007FC 84               [ 1] 1682 	pop	a
                                   1683 ;	se8r01-receive-pwm.c: 600: Init_Tim2 (); //pwm for led on pd2
      0007FD CDr07r24         [ 4] 1684 	call	_Init_Tim2
                                   1685 ;	se8r01-receive-pwm.c: 601: PD_DDR |= (1<<2);
      000800 AE 50 11         [ 2] 1686 	ldw	x, #0x5011
      000803 F6               [ 1] 1687 	ld	a, (x)
      000804 AA 04            [ 1] 1688 	or	a, #0x04
      000806 F7               [ 1] 1689 	ld	(x), a
                                   1690 ;	se8r01-receive-pwm.c: 602: PD_CR1 |= (1<<2);
      000807 AE 50 12         [ 2] 1691 	ldw	x, #0x5012
      00080A F6               [ 1] 1692 	ld	a, (x)
      00080B AA 04            [ 1] 1693 	or	a, #0x04
      00080D F7               [ 1] 1694 	ld	(x), a
                                   1695 ;	se8r01-receive-pwm.c: 603: PD_CR2 &= 0xFD;
      00080E AE 50 13         [ 2] 1696 	ldw	x, #0x5013
      000811 F6               [ 1] 1697 	ld	a, (x)
      000812 A4 FD            [ 1] 1698 	and	a, #0xfd
      000814 F7               [ 1] 1699 	ld	(x), a
                                   1700 ;	se8r01-receive-pwm.c: 604: SE8R01_Init();
      000815 CDr06r3E         [ 4] 1701 	call	_SE8R01_Init
                                   1702 ;	se8r01-receive-pwm.c: 605: UARTPrintF("timer initialised = \n\r");
      000818 AEr09r12         [ 2] 1703 	ldw	x, #___str_3+0
      00081B 89               [ 2] 1704 	pushw	x
      00081C CDr01rD9         [ 4] 1705 	call	_UARTPrintF
      00081F 5B 02            [ 2] 1706 	addw	sp, #2
                                   1707 ;	se8r01-receive-pwm.c: 608: while (1) {
      000821                       1708 00110$:
                                   1709 ;	se8r01-receive-pwm.c: 610: if ((PD_IDR & (1 << 3))==0) //input low
      000821 AE 50 10         [ 2] 1710 	ldw	x, #0x5010
      000824 F6               [ 1] 1711 	ld	a, (x)
      000825 A5 08            [ 1] 1712 	bcp	a, #0x08
      000827 27 03            [ 1] 1713 	jreq	00170$
      000829 CCr08rB1         [ 2] 1714 	jp	00105$
      00082C                       1715 00170$:
                                   1716 ;	se8r01-receive-pwm.c: 614: delay(240);
      00082C 4B F0            [ 1] 1717 	push	#0xf0
      00082E 4B 00            [ 1] 1718 	push	#0x00
      000830 CDr01r8E         [ 4] 1719 	call	_delay
      000833 5B 02            [ 2] 1720 	addw	sp, #2
                                   1721 ;	se8r01-receive-pwm.c: 615: signal_lv=read_spi_reg(iRF_BANK0_RPD);
      000835 4B 09            [ 1] 1722 	push	#0x09
      000837 CDr00r6A         [ 4] 1723 	call	_read_spi_reg
      00083A 5B 01            [ 2] 1724 	addw	sp, #1
      00083C C7u00u0A         [ 1] 1725 	ld	_signal_lv+0, a
                                   1726 ;	se8r01-receive-pwm.c: 616: status = read_spi_reg(STATUS);
      00083F 4B 07            [ 1] 1727 	push	#0x07
      000841 CDr00r6A         [ 4] 1728 	call	_read_spi_reg
      000844 5B 01            [ 2] 1729 	addw	sp, #1
      000846 C7u00u0D         [ 1] 1730 	ld	_status+0, a
                                   1731 ;	se8r01-receive-pwm.c: 618: if(status&STA_MARK_RX)                                                 // if receive data ready (TX_DS) interrupt
      000849 72 06u00u0D 02   [ 2] 1732 	btjt	_status+0, #6, 00171$
      00084E 20 57            [ 2] 1733 	jra	00103$
      000850                       1734 00171$:
                                   1735 ;	se8r01-receive-pwm.c: 621: pip= (status & 0b00001110)>>1;
      000850 C6u00u0D         [ 1] 1736 	ld	a, _status+0
      000853 A4 0E            [ 1] 1737 	and	a, #0x0e
      000855 44               [ 1] 1738 	srl	a
      000856 5F               [ 1] 1739 	clrw	x
      000857 97               [ 1] 1740 	ld	xl, a
      000858 CFu00u0B         [ 2] 1741 	ldw	_pip+0, x
                                   1742 ;	se8r01-receive-pwm.c: 622: pload_width_now=read_spi_reg(iRF_CMD_R_RX_PL_WID);
      00085B 4B 60            [ 1] 1743 	push	#0x60
      00085D CDr00r6A         [ 4] 1744 	call	_read_spi_reg
      000860 5B 01            [ 2] 1745 	addw	sp, #1
      000862 5F               [ 1] 1746 	clrw	x
      000863 97               [ 1] 1747 	ld	xl, a
      000864 CFu00u06         [ 2] 1748 	ldw	_pload_width_now+0, x
                                   1749 ;	se8r01-receive-pwm.c: 623: read_spi_buf(RD_RX_PLOAD, rx_buf,32);             // read playload to rx_buf
      000867 AEr00r1E         [ 2] 1750 	ldw	x, #_rx_buf+0
      00086A 1F 32            [ 2] 1751 	ldw	(0x32, sp), x
      00086C 1E 32            [ 2] 1752 	ldw	x, (0x32, sp)
      00086E 4B 20            [ 1] 1753 	push	#0x20
      000870 89               [ 2] 1754 	pushw	x
      000871 4B 61            [ 1] 1755 	push	#0x61
      000873 CDr00rE0         [ 4] 1756 	call	_read_spi_buf
      000876 5B 04            [ 2] 1757 	addw	sp, #4
                                   1758 ;	se8r01-receive-pwm.c: 624: write_spi_reg(FLUSH_RX,0);
      000878 4B 00            [ 1] 1759 	push	#0x00
      00087A 4B E2            [ 1] 1760 	push	#0xe2
      00087C CDr00r2E         [ 4] 1761 	call	_write_spi_reg
      00087F 5B 02            [ 2] 1762 	addw	sp, #2
                                   1763 ;	se8r01-receive-pwm.c: 626: newdata=1;
      000881 35 01u00u09      [ 1] 1764 	mov	_newdata+1, #0x01
      000885 72 5Fu00u08      [ 1] 1765 	clr	_newdata+0
                                   1766 ;	se8r01-receive-pwm.c: 627: for (teller=0;teller<32;++teller)
      000889 5F               [ 1] 1767 	clrw	x
      00088A                       1768 00112$:
                                   1769 ;	se8r01-receive-pwm.c: 628: print_UCHAR_hex (rx_buf[teller]);
      00088A 90 93            [ 1] 1770 	ldw	y, x
      00088C 72 F9 32         [ 2] 1771 	addw	y, (0x32, sp)
      00088F 90 F6            [ 1] 1772 	ld	a, (y)
      000891 89               [ 2] 1773 	pushw	x
      000892 88               [ 1] 1774 	push	a
      000893 CDr01rF0         [ 4] 1775 	call	_print_UCHAR_hex
      000896 84               [ 1] 1776 	pop	a
      000897 85               [ 2] 1777 	popw	x
                                   1778 ;	se8r01-receive-pwm.c: 627: for (teller=0;teller<32;++teller)
      000898 5C               [ 2] 1779 	incw	x
      000899 A3 00 20         [ 2] 1780 	cpw	x, #0x0020
      00089C 2F EC            [ 1] 1781 	jrslt	00112$
                                   1782 ;	se8r01-receive-pwm.c: 629: UARTPrintF("\n\r");
      00089E AEr09r29         [ 2] 1783 	ldw	x, #___str_4+0
      0008A1 89               [ 2] 1784 	pushw	x
      0008A2 CDr01rD9         [ 4] 1785 	call	_UARTPrintF
      0008A5 5B 02            [ 2] 1786 	addw	sp, #2
      0008A7                       1787 00103$:
                                   1788 ;	se8r01-receive-pwm.c: 632: write_spi_reg(WRITE_REG+STATUS,status);       // clear RX_DR or TX_DS or MAX_RT interrupt flag
      0008A7 3Bu00u0D         [ 1] 1789 	push	_status+0
      0008AA 4B 27            [ 1] 1790 	push	#0x27
      0008AC CDr00r2E         [ 4] 1791 	call	_write_spi_reg
      0008AF 5B 02            [ 2] 1792 	addw	sp, #2
      0008B1                       1793 00105$:
                                   1794 ;	se8r01-receive-pwm.c: 637: for (x1 = 0; x1 < 50; ++x1)
      0008B1 5F               [ 1] 1795 	clrw	x
      0008B2 1F 2B            [ 2] 1796 	ldw	(0x2b, sp), x
      0008B4                       1797 00121$:
      0008B4 1E 2B            [ 2] 1798 	ldw	x, (0x2b, sp)
      0008B6 A3 00 32         [ 2] 1799 	cpw	x, #0x0032
      0008B9 2F 03            [ 1] 1800 	jrslt	00173$
      0008BB CCr08r21         [ 2] 1801 	jp	00110$
      0008BE                       1802 00173$:
                                   1803 ;	se8r01-receive-pwm.c: 638: for (y1 = 0; y1 < 50; ++y1)
      0008BE 5F               [ 1] 1804 	clrw	x
      0008BF 1F 29            [ 2] 1805 	ldw	(0x29, sp), x
      0008C1                       1806 00118$:
      0008C1 1E 29            [ 2] 1807 	ldw	x, (0x29, sp)
      0008C3 A3 00 32         [ 2] 1808 	cpw	x, #0x0032
      0008C6 2E 19            [ 1] 1809 	jrsge	00122$
                                   1810 ;	se8r01-receive-pwm.c: 639: for (z1 = 0; z1 < 50; ++z1)
      0008C8 5F               [ 1] 1811 	clrw	x
      0008C9 1F 27            [ 2] 1812 	ldw	(0x27, sp), x
      0008CB                       1813 00115$:
      0008CB 1E 27            [ 2] 1814 	ldw	x, (0x27, sp)
      0008CD A3 00 32         [ 2] 1815 	cpw	x, #0x0032
      0008D0 2E 08            [ 1] 1816 	jrsge	00119$
                                   1817 ;	se8r01-receive-pwm.c: 640: __asm__("nop");
      0008D2 9D               [ 1] 1818 	nop
                                   1819 ;	se8r01-receive-pwm.c: 639: for (z1 = 0; z1 < 50; ++z1)
      0008D3 1E 27            [ 2] 1820 	ldw	x, (0x27, sp)
      0008D5 5C               [ 2] 1821 	incw	x
      0008D6 1F 27            [ 2] 1822 	ldw	(0x27, sp), x
      0008D8 20 F1            [ 2] 1823 	jra	00115$
      0008DA                       1824 00119$:
                                   1825 ;	se8r01-receive-pwm.c: 638: for (y1 = 0; y1 < 50; ++y1)
      0008DA 1E 29            [ 2] 1826 	ldw	x, (0x29, sp)
      0008DC 5C               [ 2] 1827 	incw	x
      0008DD 1F 29            [ 2] 1828 	ldw	(0x29, sp), x
      0008DF 20 E0            [ 2] 1829 	jra	00118$
      0008E1                       1830 00122$:
                                   1831 ;	se8r01-receive-pwm.c: 637: for (x1 = 0; x1 < 50; ++x1)
      0008E1 1E 2B            [ 2] 1832 	ldw	x, (0x2b, sp)
      0008E3 5C               [ 2] 1833 	incw	x
      0008E4 1F 2B            [ 2] 1834 	ldw	(0x2b, sp), x
      0008E6 20 CC            [ 2] 1835 	jra	00121$
      0008E8 5B 33            [ 2] 1836 	addw	sp, #51
      0008EA 81               [ 4] 1837 	ret
                                   1838 	.area CODE
      0008EB                       1839 ___str_0:
      0008EB 73 74 61 72 74 20 64  1840 	.ascii "start debug "
             65 62 75 67 20
      0008F7 0A                    1841 	.db 0x0A
      0008F8 0D                    1842 	.db 0x0D
      0008F9 00                    1843 	.db 0x00
      0008FA                       1844 ___str_1:
      0008FA 63 6F 6E 66 69 67 20  1845 	.ascii "config = "
             3D 20
      000903 0A                    1846 	.db 0x0A
      000904 0D                    1847 	.db 0x0D
      000905 00                    1848 	.db 0x00
      000906                       1849 ___str_2:
      000906 73 74 61 74 75 73 20  1850 	.ascii "status = "
             3D 20
      00090F 0A                    1851 	.db 0x0A
      000910 0D                    1852 	.db 0x0D
      000911 00                    1853 	.db 0x00
      000912                       1854 ___str_3:
      000912 74 69 6D 65 72 20 69  1855 	.ascii "timer initialised = "
             6E 69 74 69 61 6C 69
             73 65 64 20 3D 20
      000926 0A                    1856 	.db 0x0A
      000927 0D                    1857 	.db 0x0D
      000928 00                    1858 	.db 0x00
      000929                       1859 ___str_4:
      000929 0A                    1860 	.db 0x0A
      00092A 0D                    1861 	.db 0x0D
      00092B 00                    1862 	.db 0x00
                                   1863 	.area INITIALIZER
      000000                       1864 __xinit__SE8R01_DR_2M:
      000000 00 00                 1865 	.dw #0x0000
      000002                       1866 __xinit__SE8R01_DR_1M:
      000002 00 00                 1867 	.dw #0x0000
      000004                       1868 __xinit__SE8R01_DR_500K:
      000004 00 01                 1869 	.dw #0x0001
      000006                       1870 __xinit__pload_width_now:
      000006 00 00                 1871 	.dw #0x0000
      000008                       1872 __xinit__newdata:
      000008 00 00                 1873 	.dw #0x0000
      00000A                       1874 __xinit__signal_lv:
      00000A 00                    1875 	.db #0x00	;  0
      00000B                       1876 __xinit__pip:
      00000B 00 00                 1877 	.dw #0x0000
      00000D                       1878 __xinit__status:
      00000D 00                    1879 	.db #0x00	; 0
      00000E                       1880 __xinit__TX_ADDRESS:
      00000E B3                    1881 	.db #0xB3	; 179
      00000F 43                    1882 	.db #0x43	; 67	'C'
      000010 10                    1883 	.db #0x10	; 16
      000011 10                    1884 	.db #0x10	; 16
      000012                       1885 __xinit__ADDRESS2:
      000012 B1                    1886 	.db #0xB1	; 177
      000013                       1887 __xinit__ADDRESS3:
      000013 B2                    1888 	.db #0xB2	; 178
      000014                       1889 __xinit__ADDRESS4:
      000014 B3                    1890 	.db #0xB3	; 179
      000015                       1891 __xinit__ADDRESS5:
      000015 B4                    1892 	.db #0xB4	; 180
      000016                       1893 __xinit__ADDRESS1:
      000016 B0                    1894 	.db #0xB0	; 176
      000017 43                    1895 	.db #0x43	; 67	'C'
      000018 10                    1896 	.db #0x10	; 16
      000019 10                    1897 	.db #0x10	; 16
      00001A                       1898 __xinit__ADDRESS0:
      00001A 34                    1899 	.db #0x34	; 52	'4'
      00001B 43                    1900 	.db #0x43	; 67	'C'
      00001C 10                    1901 	.db #0x10	; 16
      00001D 10                    1902 	.db #0x10	; 16
      00001E                       1903 __xinit__rx_buf:
      00001E 00                    1904 	.db #0x00	; 0
      00001F 00                    1905 	.db 0x00
      000020 00                    1906 	.db 0x00
      000021 00                    1907 	.db 0x00
      000022 00                    1908 	.db 0x00
      000023 00                    1909 	.db 0x00
      000024 00                    1910 	.db 0x00
      000025 00                    1911 	.db 0x00
      000026 00                    1912 	.db 0x00
      000027 00                    1913 	.db 0x00
      000028 00                    1914 	.db 0x00
      000029 00                    1915 	.db 0x00
      00002A 00                    1916 	.db 0x00
      00002B 00                    1917 	.db 0x00
      00002C 00                    1918 	.db 0x00
      00002D 00                    1919 	.db 0x00
      00002E 00                    1920 	.db 0x00
      00002F 00                    1921 	.db 0x00
      000030 00                    1922 	.db 0x00
      000031 00                    1923 	.db 0x00
      000032 00                    1924 	.db 0x00
      000033 00                    1925 	.db 0x00
      000034 00                    1926 	.db 0x00
      000035 00                    1927 	.db 0x00
      000036 00                    1928 	.db 0x00
      000037 00                    1929 	.db 0x00
      000038 00                    1930 	.db 0x00
      000039 00                    1931 	.db 0x00
      00003A 00                    1932 	.db 0x00
      00003B 00                    1933 	.db 0x00
      00003C 00                    1934 	.db 0x00
      00003D 00                    1935 	.db 0x00
      00003E                       1936 __xinit__tx_buf:
      00003E 00                    1937 	.db #0x00	; 0
      00003F 00                    1938 	.db 0x00
      000040 00                    1939 	.db 0x00
      000041 00                    1940 	.db 0x00
      000042 00                    1941 	.db 0x00
      000043 00                    1942 	.db 0x00
      000044 00                    1943 	.db 0x00
      000045 00                    1944 	.db 0x00
      000046 00                    1945 	.db 0x00
      000047 00                    1946 	.db 0x00
      000048 00                    1947 	.db 0x00
      000049 00                    1948 	.db 0x00
      00004A 00                    1949 	.db 0x00
      00004B 00                    1950 	.db 0x00
      00004C 00                    1951 	.db 0x00
      00004D 00                    1952 	.db 0x00
      00004E 00                    1953 	.db 0x00
      00004F 00                    1954 	.db 0x00
      000050 00                    1955 	.db 0x00
      000051 00                    1956 	.db 0x00
      000052 00                    1957 	.db 0x00
      000053 00                    1958 	.db 0x00
      000054 00                    1959 	.db 0x00
      000055 00                    1960 	.db 0x00
      000056 00                    1961 	.db 0x00
      000057 00                    1962 	.db 0x00
      000058 00                    1963 	.db 0x00
      000059 00                    1964 	.db 0x00
      00005A 00                    1965 	.db 0x00
      00005B 00                    1966 	.db 0x00
      00005C 00                    1967 	.db 0x00
      00005D 00                    1968 	.db 0x00
                                   1969 	.area CABS (ABS)
