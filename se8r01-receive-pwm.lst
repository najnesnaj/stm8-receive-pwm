                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.0 #8981 (Jul 11 2014) (Linux)
                                      4 ; This file was generated Tue Jul  4 11:51:56 2017
                                      5 ;--------------------------------------------------------
                                      6 	.module se8r01_receive_pwm
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _main
                                     13 	.globl _SE8R01_Init
                                     14 	.globl _SE8R01_Analog_Init
                                     15 	.globl _SE8R01_Calibration
                                     16 	.globl _rf_switch_bank
                                     17 	.globl _init_io
                                     18 	.globl _InitializeUART
                                     19 	.globl _print_UCHAR_hex
                                     20 	.globl _UARTPrintF
                                     21 	.globl _delay
                                     22 	.globl _InitializeSystemClock
                                     23 	.globl _InitializeSPI
                                     24 	.globl _read_spi_buf
                                     25 	.globl _write_spi_buf
                                     26 	.globl _read_spi_reg
                                     27 	.globl _write_spi_reg
                                     28 	.globl _write_spi
                                     29 	.globl _delayTenMicro
                                     30 	.globl _memset
                                     31 	.globl _tx_buf
                                     32 	.globl _rx_buf
                                     33 	.globl _ADDRESS0
                                     34 	.globl _ADDRESS1
                                     35 	.globl _ADDRESS5
                                     36 	.globl _ADDRESS4
                                     37 	.globl _ADDRESS3
                                     38 	.globl _ADDRESS2
                                     39 	.globl _TX_ADDRESS
                                     40 	.globl _status
                                     41 	.globl _pip
                                     42 	.globl _signal_lv
                                     43 	.globl _newdata
                                     44 	.globl _pload_width_now
                                     45 	.globl _SE8R01_DR_500K
                                     46 	.globl _SE8R01_DR_1M
                                     47 	.globl _SE8R01_DR_2M
                                     48 	.globl _myData_pip4
                                     49 	.globl _myData_pip5
                                     50 	.globl _gtemp
                                     51 ;--------------------------------------------------------
                                     52 ; ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area DATA
      000000                         55 _gtemp::
      000000                         56 	.ds 5
      000005                         57 _myData_pip5::
      000005                         58 	.ds 5
      00000A                         59 _myData_pip4::
      00000A                         60 	.ds 5
                                     61 ;--------------------------------------------------------
                                     62 ; ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area INITIALIZED
      000000                         65 _SE8R01_DR_2M::
      000000                         66 	.ds 2
      000002                         67 _SE8R01_DR_1M::
      000002                         68 	.ds 2
      000004                         69 _SE8R01_DR_500K::
      000004                         70 	.ds 2
      000006                         71 _pload_width_now::
      000006                         72 	.ds 2
      000008                         73 _newdata::
      000008                         74 	.ds 2
      00000A                         75 _signal_lv::
      00000A                         76 	.ds 1
      00000B                         77 _pip::
      00000B                         78 	.ds 2
      00000D                         79 _status::
      00000D                         80 	.ds 1
      00000E                         81 _TX_ADDRESS::
      00000E                         82 	.ds 4
      000012                         83 _ADDRESS2::
      000012                         84 	.ds 1
      000013                         85 _ADDRESS3::
      000013                         86 	.ds 1
      000014                         87 _ADDRESS4::
      000014                         88 	.ds 1
      000015                         89 _ADDRESS5::
      000015                         90 	.ds 1
      000016                         91 _ADDRESS1::
      000016                         92 	.ds 4
      00001A                         93 _ADDRESS0::
      00001A                         94 	.ds 4
      00001E                         95 _rx_buf::
      00001E                         96 	.ds 32
      00003E                         97 _tx_buf::
      00003E                         98 	.ds 32
                                     99 ;--------------------------------------------------------
                                    100 ; Stack segment in internal ram 
                                    101 ;--------------------------------------------------------
                                    102 	.area	SSEG
      000000                        103 __start__stack:
      000000                        104 	.ds	1
                                    105 
                                    106 ;--------------------------------------------------------
                                    107 ; absolute external ram data
                                    108 ;--------------------------------------------------------
                                    109 	.area DABS (ABS)
                                    110 ;--------------------------------------------------------
                                    111 ; interrupt vector 
                                    112 ;--------------------------------------------------------
                                    113 	.area HOME
      000000                        114 __interrupt_vect:
      000000 82v00u00u00            115 	int s_GSINIT ;reset
      000004 82 00 00 00            116 	int 0x0000 ;trap
      000008 82 00 00 00            117 	int 0x0000 ;int0
      00000C 82 00 00 00            118 	int 0x0000 ;int1
      000010 82 00 00 00            119 	int 0x0000 ;int2
      000014 82 00 00 00            120 	int 0x0000 ;int3
      000018 82 00 00 00            121 	int 0x0000 ;int4
      00001C 82 00 00 00            122 	int 0x0000 ;int5
      000020 82 00 00 00            123 	int 0x0000 ;int6
      000024 82 00 00 00            124 	int 0x0000 ;int7
      000028 82 00 00 00            125 	int 0x0000 ;int8
      00002C 82 00 00 00            126 	int 0x0000 ;int9
      000030 82 00 00 00            127 	int 0x0000 ;int10
      000034 82 00 00 00            128 	int 0x0000 ;int11
      000038 82 00 00 00            129 	int 0x0000 ;int12
      00003C 82 00 00 00            130 	int 0x0000 ;int13
      000040 82 00 00 00            131 	int 0x0000 ;int14
      000044 82 00 00 00            132 	int 0x0000 ;int15
      000048 82 00 00 00            133 	int 0x0000 ;int16
      00004C 82 00 00 00            134 	int 0x0000 ;int17
      000050 82 00 00 00            135 	int 0x0000 ;int18
      000054 82 00 00 00            136 	int 0x0000 ;int19
      000058 82 00 00 00            137 	int 0x0000 ;int20
      00005C 82 00 00 00            138 	int 0x0000 ;int21
      000060 82 00 00 00            139 	int 0x0000 ;int22
      000064 82 00 00 00            140 	int 0x0000 ;int23
      000068 82 00 00 00            141 	int 0x0000 ;int24
      00006C 82 00 00 00            142 	int 0x0000 ;int25
      000070 82 00 00 00            143 	int 0x0000 ;int26
      000074 82 00 00 00            144 	int 0x0000 ;int27
      000078 82 00 00 00            145 	int 0x0000 ;int28
      00007C 82 00 00 00            146 	int 0x0000 ;int29
                                    147 ;--------------------------------------------------------
                                    148 ; global & static initialisations
                                    149 ;--------------------------------------------------------
                                    150 	.area HOME
                                    151 	.area GSINIT
                                    152 	.area GSFINAL
                                    153 	.area GSINIT
      000000                        154 __sdcc_gs_init_startup:
      000000                        155 __sdcc_init_data:
                                    156 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]  157 	ldw x, #l_DATA
      000003 27 07            [ 1]  158 	jreq	00002$
      000005                        159 00001$:
      000005 72 4FuFFuFF      [ 1]  160 	clr (s_DATA - 1, x)
      000009 5A               [ 2]  161 	decw x
      00000A 26 F9            [ 1]  162 	jrne	00001$
      00000C                        163 00002$:
      00000C AEr00r00         [ 2]  164 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]  165 	jreq	00004$
      000011                        166 00003$:
      000011 D6uFFuFF         [ 1]  167 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]  168 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]  169 	decw	x
      000018 26 F7            [ 1]  170 	jrne	00003$
      00001A                        171 00004$:
                                    172 ; stm8_genXINIT() end
                                    173 	.area GSFINAL
      000000 CCr00r80         [ 2]  174 	jp	__sdcc_program_startup
                                    175 ;--------------------------------------------------------
                                    176 ; Home
                                    177 ;--------------------------------------------------------
                                    178 	.area HOME
                                    179 	.area HOME
      000080                        180 __sdcc_program_startup:
      000080 CCr07r24         [ 2]  181 	jp	_main
                                    182 ;	return from main will return to caller
                                    183 ;--------------------------------------------------------
                                    184 ; code
                                    185 ;--------------------------------------------------------
                                    186 	.area CODE
                                    187 ;	se8r01-receive-pwm.c: 46: void delayTenMicro (void) {
                                    188 ;	-----------------------------------------
                                    189 ;	 function delayTenMicro
                                    190 ;	-----------------------------------------
      000000                        191 _delayTenMicro:
                                    192 ;	se8r01-receive-pwm.c: 48: for (a = 0; a < 50; ++a)
      000000 A6 32            [ 1]  193 	ld	a, #0x32
      000002                        194 00104$:
                                    195 ;	se8r01-receive-pwm.c: 49: __asm__("nop");
      000002 9D               [ 1]  196 	nop
      000003 4A               [ 1]  197 	dec	a
                                    198 ;	se8r01-receive-pwm.c: 48: for (a = 0; a < 50; ++a)
      000004 4D               [ 1]  199 	tnz	a
      000005 26 FB            [ 1]  200 	jrne	00104$
      000007 81               [ 4]  201 	ret
                                    202 ;	se8r01-receive-pwm.c: 51: UCHAR write_spi (UCHAR value) {
                                    203 ;	-----------------------------------------
                                    204 ;	 function write_spi
                                    205 ;	-----------------------------------------
      000008                        206 _write_spi:
                                    207 ;	se8r01-receive-pwm.c: 53: delayTenMicro ();
      000008 CDr00r00         [ 4]  208 	call	_delayTenMicro
                                    209 ;	se8r01-receive-pwm.c: 54: SPI_DR = value;
      00000B AE 52 04         [ 2]  210 	ldw	x, #0x5204
      00000E 7B 03            [ 1]  211 	ld	a, (0x03, sp)
      000010 F7               [ 1]  212 	ld	(x), a
                                    213 ;	se8r01-receive-pwm.c: 55: delayTenMicro ();
      000011 CDr00r00         [ 4]  214 	call	_delayTenMicro
                                    215 ;	se8r01-receive-pwm.c: 56: while ((SPI_SR & TXE) == 0);
      000014                        216 00101$:
      000014 AE 52 03         [ 2]  217 	ldw	x, #0x5203
      000017 F6               [ 1]  218 	ld	a, (x)
      000018 A5 02            [ 1]  219 	bcp	a, #0x02
      00001A 27 F8            [ 1]  220 	jreq	00101$
                                    221 ;	se8r01-receive-pwm.c: 57: delayTenMicro ();
      00001C CDr00r00         [ 4]  222 	call	_delayTenMicro
                                    223 ;	se8r01-receive-pwm.c: 58: while ((SPI_SR & RXNE) == 0);
      00001F                        224 00104$:
      00001F AE 52 03         [ 2]  225 	ldw	x, #0x5203
      000022 F6               [ 1]  226 	ld	a, (x)
      000023 44               [ 1]  227 	srl	a
      000024 24 F9            [ 1]  228 	jrnc	00104$
                                    229 ;	se8r01-receive-pwm.c: 59: delayTenMicro ();
      000026 CDr00r00         [ 4]  230 	call	_delayTenMicro
                                    231 ;	se8r01-receive-pwm.c: 60: ret = SPI_DR;
      000029 AE 52 04         [ 2]  232 	ldw	x, #0x5204
      00002C F6               [ 1]  233 	ld	a, (x)
                                    234 ;	se8r01-receive-pwm.c: 61: return (ret);
      00002D 81               [ 4]  235 	ret
                                    236 ;	se8r01-receive-pwm.c: 63: UCHAR write_spi_reg (UCHAR reg, UCHAR value) {
                                    237 ;	-----------------------------------------
                                    238 ;	 function write_spi_reg
                                    239 ;	-----------------------------------------
      00002E                        240 _write_spi_reg:
      00002E 88               [ 1]  241 	push	a
                                    242 ;	se8r01-receive-pwm.c: 65: PC_ODR &= ~(1 << CSN);
      00002F AE 50 0A         [ 2]  243 	ldw	x, #0x500a
      000032 F6               [ 1]  244 	ld	a, (x)
      000033 A4 F7            [ 1]  245 	and	a, #0xf7
      000035 F7               [ 1]  246 	ld	(x), a
                                    247 ;	se8r01-receive-pwm.c: 66: ret = write_spi (reg);
      000036 7B 04            [ 1]  248 	ld	a, (0x04, sp)
      000038 88               [ 1]  249 	push	a
      000039 CDr00r08         [ 4]  250 	call	_write_spi
      00003C 5B 01            [ 2]  251 	addw	sp, #1
      00003E 6B 01            [ 1]  252 	ld	(0x01, sp), a
                                    253 ;	se8r01-receive-pwm.c: 67: if (reg != NOP && reg != FLUSH_RX && reg != FLUSH_TX)
      000040 7B 04            [ 1]  254 	ld	a, (0x04, sp)
      000042 A1 FF            [ 1]  255 	cp	a, #0xff
      000044 27 15            [ 1]  256 	jreq	00102$
      000046 7B 04            [ 1]  257 	ld	a, (0x04, sp)
      000048 A1 E2            [ 1]  258 	cp	a, #0xe2
      00004A 27 0F            [ 1]  259 	jreq	00102$
      00004C 7B 04            [ 1]  260 	ld	a, (0x04, sp)
      00004E A1 E1            [ 1]  261 	cp	a, #0xe1
      000050 27 09            [ 1]  262 	jreq	00102$
                                    263 ;	se8r01-receive-pwm.c: 68: write_spi (value);
      000052 7B 05            [ 1]  264 	ld	a, (0x05, sp)
      000054 88               [ 1]  265 	push	a
      000055 CDr00r08         [ 4]  266 	call	_write_spi
      000058 84               [ 1]  267 	pop	a
      000059 20 03            [ 2]  268 	jra	00103$
      00005B                        269 00102$:
                                    270 ;	se8r01-receive-pwm.c: 70: delayTenMicro ();
      00005B CDr00r00         [ 4]  271 	call	_delayTenMicro
      00005E                        272 00103$:
                                    273 ;	se8r01-receive-pwm.c: 71: PC_ODR |= (1 << CSN);
      00005E AE 50 0A         [ 2]  274 	ldw	x, #0x500a
      000061 F6               [ 1]  275 	ld	a, (x)
      000062 AA 08            [ 1]  276 	or	a, #0x08
      000064 F7               [ 1]  277 	ld	(x), a
                                    278 ;	se8r01-receive-pwm.c: 72: return (ret);
      000065 7B 01            [ 1]  279 	ld	a, (0x01, sp)
      000067 5B 01            [ 2]  280 	addw	sp, #1
      000069 81               [ 4]  281 	ret
                                    282 ;	se8r01-receive-pwm.c: 74: UCHAR read_spi_reg (UCHAR reg) {
                                    283 ;	-----------------------------------------
                                    284 ;	 function read_spi_reg
                                    285 ;	-----------------------------------------
      00006A                        286 _read_spi_reg:
      00006A 88               [ 1]  287 	push	a
                                    288 ;	se8r01-receive-pwm.c: 76: PC_ODR &= ~(1 << CSN);
      00006B AE 50 0A         [ 2]  289 	ldw	x, #0x500a
      00006E F6               [ 1]  290 	ld	a, (x)
      00006F A4 F7            [ 1]  291 	and	a, #0xf7
      000071 F7               [ 1]  292 	ld	(x), a
                                    293 ;	se8r01-receive-pwm.c: 77: ret = write_spi (reg);
      000072 7B 04            [ 1]  294 	ld	a, (0x04, sp)
      000074 88               [ 1]  295 	push	a
      000075 CDr00r08         [ 4]  296 	call	_write_spi
      000078 5B 01            [ 2]  297 	addw	sp, #1
      00007A 6B 01            [ 1]  298 	ld	(0x01, sp), a
                                    299 ;	se8r01-receive-pwm.c: 78: if (reg != NOP && reg != FLUSH_RX && reg != FLUSH_TX)
      00007C 7B 04            [ 1]  300 	ld	a, (0x04, sp)
      00007E A1 FF            [ 1]  301 	cp	a, #0xff
      000080 27 17            [ 1]  302 	jreq	00102$
      000082 7B 04            [ 1]  303 	ld	a, (0x04, sp)
      000084 A1 E2            [ 1]  304 	cp	a, #0xe2
      000086 27 11            [ 1]  305 	jreq	00102$
      000088 7B 04            [ 1]  306 	ld	a, (0x04, sp)
      00008A A1 E1            [ 1]  307 	cp	a, #0xe1
      00008C 27 0B            [ 1]  308 	jreq	00102$
                                    309 ;	se8r01-receive-pwm.c: 79: ret = write_spi (NOP);
      00008E 4B FF            [ 1]  310 	push	#0xff
      000090 CDr00r08         [ 4]  311 	call	_write_spi
      000093 5B 01            [ 2]  312 	addw	sp, #1
      000095 6B 01            [ 1]  313 	ld	(0x01, sp), a
      000097 20 03            [ 2]  314 	jra	00103$
      000099                        315 00102$:
                                    316 ;	se8r01-receive-pwm.c: 81: delayTenMicro ();
      000099 CDr00r00         [ 4]  317 	call	_delayTenMicro
      00009C                        318 00103$:
                                    319 ;	se8r01-receive-pwm.c: 82: PC_ODR |= (1 << CSN);
      00009C AE 50 0A         [ 2]  320 	ldw	x, #0x500a
      00009F F6               [ 1]  321 	ld	a, (x)
      0000A0 AA 08            [ 1]  322 	or	a, #0x08
      0000A2 F7               [ 1]  323 	ld	(x), a
                                    324 ;	se8r01-receive-pwm.c: 83: return (ret);
      0000A3 7B 01            [ 1]  325 	ld	a, (0x01, sp)
      0000A5 5B 01            [ 2]  326 	addw	sp, #1
      0000A7 81               [ 4]  327 	ret
                                    328 ;	se8r01-receive-pwm.c: 85: UCHAR write_spi_buf (UCHAR reg, UCHAR *array, UCHAR len) {
                                    329 ;	-----------------------------------------
                                    330 ;	 function write_spi_buf
                                    331 ;	-----------------------------------------
      0000A8                        332 _write_spi_buf:
      0000A8 52 02            [ 2]  333 	sub	sp, #2
                                    334 ;	se8r01-receive-pwm.c: 87: PC_ODR &= ~(1 << CSN);
      0000AA AE 50 0A         [ 2]  335 	ldw	x, #0x500a
      0000AD F6               [ 1]  336 	ld	a, (x)
      0000AE A4 F7            [ 1]  337 	and	a, #0xf7
      0000B0 F7               [ 1]  338 	ld	(x), a
                                    339 ;	se8r01-receive-pwm.c: 88: ret = write_spi (reg);
      0000B1 7B 05            [ 1]  340 	ld	a, (0x05, sp)
      0000B3 88               [ 1]  341 	push	a
      0000B4 CDr00r08         [ 4]  342 	call	_write_spi
      0000B7 5B 01            [ 2]  343 	addw	sp, #1
      0000B9 6B 02            [ 1]  344 	ld	(0x02, sp), a
                                    345 ;	se8r01-receive-pwm.c: 89: for (n = 0; n < len; ++n)
      0000BB 0F 01            [ 1]  346 	clr	(0x01, sp)
      0000BD                        347 00103$:
      0000BD 7B 01            [ 1]  348 	ld	a, (0x01, sp)
      0000BF 11 08            [ 1]  349 	cp	a, (0x08, sp)
      0000C1 24 11            [ 1]  350 	jrnc	00101$
                                    351 ;	se8r01-receive-pwm.c: 90: write_spi (array[n]);
      0000C3 5F               [ 1]  352 	clrw	x
      0000C4 7B 01            [ 1]  353 	ld	a, (0x01, sp)
      0000C6 97               [ 1]  354 	ld	xl, a
      0000C7 72 FB 06         [ 2]  355 	addw	x, (0x06, sp)
      0000CA F6               [ 1]  356 	ld	a, (x)
      0000CB 88               [ 1]  357 	push	a
      0000CC CDr00r08         [ 4]  358 	call	_write_spi
      0000CF 84               [ 1]  359 	pop	a
                                    360 ;	se8r01-receive-pwm.c: 89: for (n = 0; n < len; ++n)
      0000D0 0C 01            [ 1]  361 	inc	(0x01, sp)
      0000D2 20 E9            [ 2]  362 	jra	00103$
      0000D4                        363 00101$:
                                    364 ;	se8r01-receive-pwm.c: 91: PC_ODR |= (1 << CSN);
      0000D4 AE 50 0A         [ 2]  365 	ldw	x, #0x500a
      0000D7 F6               [ 1]  366 	ld	a, (x)
      0000D8 AA 08            [ 1]  367 	or	a, #0x08
      0000DA F7               [ 1]  368 	ld	(x), a
                                    369 ;	se8r01-receive-pwm.c: 92: return (ret);
      0000DB 7B 02            [ 1]  370 	ld	a, (0x02, sp)
      0000DD 5B 02            [ 2]  371 	addw	sp, #2
      0000DF 81               [ 4]  372 	ret
                                    373 ;	se8r01-receive-pwm.c: 94: UCHAR read_spi_buf (UCHAR reg, UCHAR *array, UCHAR len) {
                                    374 ;	-----------------------------------------
                                    375 ;	 function read_spi_buf
                                    376 ;	-----------------------------------------
      0000E0                        377 _read_spi_buf:
      0000E0 52 02            [ 2]  378 	sub	sp, #2
                                    379 ;	se8r01-receive-pwm.c: 96: PC_ODR &= ~(1 << CSN);
      0000E2 AE 50 0A         [ 2]  380 	ldw	x, #0x500a
      0000E5 F6               [ 1]  381 	ld	a, (x)
      0000E6 A4 F7            [ 1]  382 	and	a, #0xf7
      0000E8 F7               [ 1]  383 	ld	(x), a
                                    384 ;	se8r01-receive-pwm.c: 97: ret = write_spi (reg);
      0000E9 7B 05            [ 1]  385 	ld	a, (0x05, sp)
      0000EB 88               [ 1]  386 	push	a
      0000EC CDr00r08         [ 4]  387 	call	_write_spi
      0000EF 5B 01            [ 2]  388 	addw	sp, #1
      0000F1 6B 01            [ 1]  389 	ld	(0x01, sp), a
                                    390 ;	se8r01-receive-pwm.c: 98: for (n = 0; n < len; ++n)
      0000F3 0F 02            [ 1]  391 	clr	(0x02, sp)
      0000F5                        392 00103$:
      0000F5 7B 02            [ 1]  393 	ld	a, (0x02, sp)
      0000F7 11 08            [ 1]  394 	cp	a, (0x08, sp)
      0000F9 24 15            [ 1]  395 	jrnc	00101$
                                    396 ;	se8r01-receive-pwm.c: 99: array[n] = write_spi (NOP);
      0000FB 5F               [ 1]  397 	clrw	x
      0000FC 7B 02            [ 1]  398 	ld	a, (0x02, sp)
      0000FE 97               [ 1]  399 	ld	xl, a
      0000FF 72 FB 06         [ 2]  400 	addw	x, (0x06, sp)
      000102 89               [ 2]  401 	pushw	x
      000103 4B FF            [ 1]  402 	push	#0xff
      000105 CDr00r08         [ 4]  403 	call	_write_spi
      000108 5B 01            [ 2]  404 	addw	sp, #1
      00010A 85               [ 2]  405 	popw	x
      00010B F7               [ 1]  406 	ld	(x), a
                                    407 ;	se8r01-receive-pwm.c: 98: for (n = 0; n < len; ++n)
      00010C 0C 02            [ 1]  408 	inc	(0x02, sp)
      00010E 20 E5            [ 2]  409 	jra	00103$
      000110                        410 00101$:
                                    411 ;	se8r01-receive-pwm.c: 100: PC_ODR |= (1 << CSN);
      000110 AE 50 0A         [ 2]  412 	ldw	x, #0x500a
      000113 F6               [ 1]  413 	ld	a, (x)
      000114 AA 08            [ 1]  414 	or	a, #0x08
      000116 F7               [ 1]  415 	ld	(x), a
                                    416 ;	se8r01-receive-pwm.c: 101: return (ret);
      000117 7B 01            [ 1]  417 	ld	a, (0x01, sp)
      000119 5B 02            [ 2]  418 	addw	sp, #2
      00011B 81               [ 4]  419 	ret
                                    420 ;	se8r01-receive-pwm.c: 103: void InitializeSPI () {
                                    421 ;	-----------------------------------------
                                    422 ;	 function InitializeSPI
                                    423 ;	-----------------------------------------
      00011C                        424 _InitializeSPI:
                                    425 ;	se8r01-receive-pwm.c: 104: SPI_CR1 = MSBFIRST | SPI_ENABLE | BR_DIV256 | MASTER | CPOL0 | CPHA0;
      00011C AE 52 00         [ 2]  426 	ldw	x, #0x5200
      00011F A6 7C            [ 1]  427 	ld	a, #0x7c
      000121 F7               [ 1]  428 	ld	(x), a
                                    429 ;	se8r01-receive-pwm.c: 105: SPI_CR2 = BDM_2LINE | CRCEN_OFF | CRCNEXT_TXBUF | FULL_DUPLEX | SSM_DISABLE;
      000122 AE 52 01         [ 2]  430 	ldw	x, #0x5201
      000125 7F               [ 1]  431 	clr	(x)
                                    432 ;	se8r01-receive-pwm.c: 106: SPI_ICR = TXIE_MASKED | RXIE_MASKED | ERRIE_MASKED | WKIE_MASKED;
      000126 AE 52 02         [ 2]  433 	ldw	x, #0x5202
      000129 7F               [ 1]  434 	clr	(x)
                                    435 ;	se8r01-receive-pwm.c: 107: PC_DDR = (1 << PC3) | (1 << PC4); // output mode
      00012A AE 50 0C         [ 2]  436 	ldw	x, #0x500c
      00012D A6 18            [ 1]  437 	ld	a, #0x18
      00012F F7               [ 1]  438 	ld	(x), a
                                    439 ;	se8r01-receive-pwm.c: 108: PC_CR1 = (1 << PC3) | (1 << PC4); // push-pull
      000130 AE 50 0D         [ 2]  440 	ldw	x, #0x500d
      000133 A6 18            [ 1]  441 	ld	a, #0x18
      000135 F7               [ 1]  442 	ld	(x), a
                                    443 ;	se8r01-receive-pwm.c: 109: PC_CR2 = (1 << PC3) | (1 << PC4); // up to 10MHz speed
      000136 AE 50 0E         [ 2]  444 	ldw	x, #0x500e
      000139 A6 18            [ 1]  445 	ld	a, #0x18
      00013B F7               [ 1]  446 	ld	(x), a
                                    447 ;	se8r01-receive-pwm.c: 111: PC_ODR &= ~(1 << CE);
      00013C AE 50 0A         [ 2]  448 	ldw	x, #0x500a
      00013F F6               [ 1]  449 	ld	a, (x)
      000140 A4 EF            [ 1]  450 	and	a, #0xef
      000142 F7               [ 1]  451 	ld	(x), a
      000143 81               [ 4]  452 	ret
                                    453 ;	se8r01-receive-pwm.c: 113: void InitializeSystemClock() {
                                    454 ;	-----------------------------------------
                                    455 ;	 function InitializeSystemClock
                                    456 ;	-----------------------------------------
      000144                        457 _InitializeSystemClock:
                                    458 ;	se8r01-receive-pwm.c: 114: CLK_ICKR = 0;                       //  Reset the Internal Clock Register.
      000144 AE 50 C0         [ 2]  459 	ldw	x, #0x50c0
      000147 7F               [ 1]  460 	clr	(x)
                                    461 ;	se8r01-receive-pwm.c: 115: CLK_ICKR = CLK_HSIEN;               //  Enable the HSI.
      000148 AE 50 C0         [ 2]  462 	ldw	x, #0x50c0
      00014B A6 01            [ 1]  463 	ld	a, #0x01
      00014D F7               [ 1]  464 	ld	(x), a
                                    465 ;	se8r01-receive-pwm.c: 116: CLK_ECKR = 0;                       //  Disable the external clock.
      00014E AE 50 C1         [ 2]  466 	ldw	x, #0x50c1
      000151 7F               [ 1]  467 	clr	(x)
                                    468 ;	se8r01-receive-pwm.c: 117: while ((CLK_ICKR & CLK_HSIRDY) == 0);       //  Wait for the HSI to be ready for use.
      000152                        469 00101$:
      000152 AE 50 C0         [ 2]  470 	ldw	x, #0x50c0
      000155 F6               [ 1]  471 	ld	a, (x)
      000156 A5 02            [ 1]  472 	bcp	a, #0x02
      000158 27 F8            [ 1]  473 	jreq	00101$
                                    474 ;	se8r01-receive-pwm.c: 118: CLK_CKDIVR = 0;                     //  Ensure the clocks are running at full speed.
      00015A AE 50 C6         [ 2]  475 	ldw	x, #0x50c6
      00015D 7F               [ 1]  476 	clr	(x)
                                    477 ;	se8r01-receive-pwm.c: 119: CLK_PCKENR1 = 0xff;                 //  Enable all peripheral clocks.
      00015E AE 50 C7         [ 2]  478 	ldw	x, #0x50c7
      000161 A6 FF            [ 1]  479 	ld	a, #0xff
      000163 F7               [ 1]  480 	ld	(x), a
                                    481 ;	se8r01-receive-pwm.c: 120: CLK_PCKENR2 = 0xff;                 //  Ditto.
      000164 AE 50 CA         [ 2]  482 	ldw	x, #0x50ca
      000167 A6 FF            [ 1]  483 	ld	a, #0xff
      000169 F7               [ 1]  484 	ld	(x), a
                                    485 ;	se8r01-receive-pwm.c: 121: CLK_CCOR = 0;                       //  Turn off CCO.
      00016A AE 50 C9         [ 2]  486 	ldw	x, #0x50c9
      00016D 7F               [ 1]  487 	clr	(x)
                                    488 ;	se8r01-receive-pwm.c: 122: CLK_HSITRIMR = 0;                   //  Turn off any HSIU trimming.
      00016E AE 50 CC         [ 2]  489 	ldw	x, #0x50cc
      000171 7F               [ 1]  490 	clr	(x)
                                    491 ;	se8r01-receive-pwm.c: 123: CLK_SWIMCCR = 0;                    //  Set SWIM to run at clock / 2.
      000172 AE 50 CD         [ 2]  492 	ldw	x, #0x50cd
      000175 7F               [ 1]  493 	clr	(x)
                                    494 ;	se8r01-receive-pwm.c: 124: CLK_SWR = 0xe1;                     //  Use HSI as the clock source.
      000176 AE 50 C4         [ 2]  495 	ldw	x, #0x50c4
      000179 A6 E1            [ 1]  496 	ld	a, #0xe1
      00017B F7               [ 1]  497 	ld	(x), a
                                    498 ;	se8r01-receive-pwm.c: 125: CLK_SWCR = 0;                       //  Reset the clock switch control register.
      00017C AE 50 C5         [ 2]  499 	ldw	x, #0x50c5
      00017F 7F               [ 1]  500 	clr	(x)
                                    501 ;	se8r01-receive-pwm.c: 126: CLK_SWCR = CLK_SWEN;                //  Enable switching.
      000180 AE 50 C5         [ 2]  502 	ldw	x, #0x50c5
      000183 A6 02            [ 1]  503 	ld	a, #0x02
      000185 F7               [ 1]  504 	ld	(x), a
                                    505 ;	se8r01-receive-pwm.c: 127: while ((CLK_SWCR & CLK_SWBSY) != 0);        //  Pause while the clock switch is busy.
      000186                        506 00104$:
      000186 AE 50 C5         [ 2]  507 	ldw	x, #0x50c5
      000189 F6               [ 1]  508 	ld	a, (x)
      00018A 44               [ 1]  509 	srl	a
      00018B 25 F9            [ 1]  510 	jrc	00104$
      00018D 81               [ 4]  511 	ret
                                    512 ;	se8r01-receive-pwm.c: 129: void delay (int time_ms) {
                                    513 ;	-----------------------------------------
                                    514 ;	 function delay
                                    515 ;	-----------------------------------------
      00018E                        516 _delay:
      00018E 52 0A            [ 2]  517 	sub	sp, #10
                                    518 ;	se8r01-receive-pwm.c: 131: for (x = 0; x < 1036*time_ms; ++x)
      000190 5F               [ 1]  519 	clrw	x
      000191 1F 03            [ 2]  520 	ldw	(0x03, sp), x
      000193 1F 01            [ 2]  521 	ldw	(0x01, sp), x
      000195 1E 0D            [ 2]  522 	ldw	x, (0x0d, sp)
      000197 89               [ 2]  523 	pushw	x
      000198 4B 0C            [ 1]  524 	push	#0x0c
      00019A 4B 04            [ 1]  525 	push	#0x04
      00019C CDr00r00         [ 4]  526 	call	__mulint
      00019F 5B 04            [ 2]  527 	addw	sp, #4
      0001A1 1F 09            [ 2]  528 	ldw	(0x09, sp), x
      0001A3                        529 00103$:
      0001A3 16 09            [ 2]  530 	ldw	y, (0x09, sp)
      0001A5 17 07            [ 2]  531 	ldw	(0x07, sp), y
      0001A7 7B 07            [ 1]  532 	ld	a, (0x07, sp)
      0001A9 49               [ 1]  533 	rlc	a
      0001AA 4F               [ 1]  534 	clr	a
      0001AB A2 00            [ 1]  535 	sbc	a, #0x00
      0001AD 6B 06            [ 1]  536 	ld	(0x06, sp), a
      0001AF 6B 05            [ 1]  537 	ld	(0x05, sp), a
      0001B1 1E 03            [ 2]  538 	ldw	x, (0x03, sp)
      0001B3 13 07            [ 2]  539 	cpw	x, (0x07, sp)
      0001B5 7B 02            [ 1]  540 	ld	a, (0x02, sp)
      0001B7 12 06            [ 1]  541 	sbc	a, (0x06, sp)
      0001B9 7B 01            [ 1]  542 	ld	a, (0x01, sp)
      0001BB 12 05            [ 1]  543 	sbc	a, (0x05, sp)
      0001BD 2E 17            [ 1]  544 	jrsge	00105$
                                    545 ;	se8r01-receive-pwm.c: 132: __asm__("nop");
      0001BF 9D               [ 1]  546 	nop
                                    547 ;	se8r01-receive-pwm.c: 131: for (x = 0; x < 1036*time_ms; ++x)
      0001C0 16 03            [ 2]  548 	ldw	y, (0x03, sp)
      0001C2 72 A9 00 01      [ 2]  549 	addw	y, #0x0001
      0001C6 7B 02            [ 1]  550 	ld	a, (0x02, sp)
      0001C8 A9 00            [ 1]  551 	adc	a, #0x00
      0001CA 97               [ 1]  552 	ld	xl, a
      0001CB 7B 01            [ 1]  553 	ld	a, (0x01, sp)
      0001CD A9 00            [ 1]  554 	adc	a, #0x00
      0001CF 95               [ 1]  555 	ld	xh, a
      0001D0 17 03            [ 2]  556 	ldw	(0x03, sp), y
      0001D2 1F 01            [ 2]  557 	ldw	(0x01, sp), x
      0001D4 20 CD            [ 2]  558 	jra	00103$
      0001D6                        559 00105$:
      0001D6 5B 0A            [ 2]  560 	addw	sp, #10
      0001D8 81               [ 4]  561 	ret
                                    562 ;	se8r01-receive-pwm.c: 137: void UARTPrintF (char *message) {
                                    563 ;	-----------------------------------------
                                    564 ;	 function UARTPrintF
                                    565 ;	-----------------------------------------
      0001D9                        566 _UARTPrintF:
                                    567 ;	se8r01-receive-pwm.c: 138: char *ch = message;
      0001D9 16 03            [ 2]  568 	ldw	y, (0x03, sp)
                                    569 ;	se8r01-receive-pwm.c: 139: while (*ch) {
      0001DB                        570 00104$:
      0001DB 90 F6            [ 1]  571 	ld	a, (y)
      0001DD 4D               [ 1]  572 	tnz	a
      0001DE 27 0F            [ 1]  573 	jreq	00107$
                                    574 ;	se8r01-receive-pwm.c: 140: UART1_DR = (unsigned char) *ch;     //  Put the next character into the data transmission register.
      0001E0 AE 52 31         [ 2]  575 	ldw	x, #0x5231
      0001E3 F7               [ 1]  576 	ld	(x), a
                                    577 ;	se8r01-receive-pwm.c: 141: while ((UART1_SR & SR_TXE) == 0);   //  Wait for transmission to complete.
      0001E4                        578 00101$:
      0001E4 AE 52 30         [ 2]  579 	ldw	x, #0x5230
      0001E7 F6               [ 1]  580 	ld	a, (x)
      0001E8 48               [ 1]  581 	sll	a
      0001E9 24 F9            [ 1]  582 	jrnc	00101$
                                    583 ;	se8r01-receive-pwm.c: 142: ch++;                               //  Grab the next character.
      0001EB 90 5C            [ 2]  584 	incw	y
      0001ED 20 EC            [ 2]  585 	jra	00104$
      0001EF                        586 00107$:
      0001EF 81               [ 4]  587 	ret
                                    588 ;	se8r01-receive-pwm.c: 145: void print_UCHAR_hex (unsigned char buffer) {
                                    589 ;	-----------------------------------------
                                    590 ;	 function print_UCHAR_hex
                                    591 ;	-----------------------------------------
      0001F0                        592 _print_UCHAR_hex:
      0001F0 52 0C            [ 2]  593 	sub	sp, #12
                                    594 ;	se8r01-receive-pwm.c: 148: a = (buffer >> 4);
      0001F2 7B 0F            [ 1]  595 	ld	a, (0x0f, sp)
      0001F4 4E               [ 1]  596 	swap	a
      0001F5 A4 0F            [ 1]  597 	and	a, #0x0f
      0001F7 5F               [ 1]  598 	clrw	x
      0001F8 97               [ 1]  599 	ld	xl, a
                                    600 ;	se8r01-receive-pwm.c: 149: if (a > 9)
      0001F9 A3 00 09         [ 2]  601 	cpw	x, #0x0009
      0001FC 2D 07            [ 1]  602 	jrsle	00102$
                                    603 ;	se8r01-receive-pwm.c: 150: a = a + 'a' - 10;
      0001FE 1C 00 57         [ 2]  604 	addw	x, #0x0057
      000201 1F 0B            [ 2]  605 	ldw	(0x0b, sp), x
      000203 20 05            [ 2]  606 	jra	00103$
      000205                        607 00102$:
                                    608 ;	se8r01-receive-pwm.c: 152: a += '0'; 
      000205 1C 00 30         [ 2]  609 	addw	x, #0x0030
      000208 1F 0B            [ 2]  610 	ldw	(0x0b, sp), x
      00020A                        611 00103$:
                                    612 ;	se8r01-receive-pwm.c: 153: b = buffer & 0x0f;
      00020A 7B 0F            [ 1]  613 	ld	a, (0x0f, sp)
      00020C A4 0F            [ 1]  614 	and	a, #0x0f
      00020E 5F               [ 1]  615 	clrw	x
      00020F 97               [ 1]  616 	ld	xl, a
                                    617 ;	se8r01-receive-pwm.c: 154: if (b > 9)
      000210 A3 00 09         [ 2]  618 	cpw	x, #0x0009
      000213 2D 07            [ 1]  619 	jrsle	00105$
                                    620 ;	se8r01-receive-pwm.c: 155: b = b + 'a' - 10;
      000215 1C 00 57         [ 2]  621 	addw	x, #0x0057
      000218 1F 09            [ 2]  622 	ldw	(0x09, sp), x
      00021A 20 05            [ 2]  623 	jra	00106$
      00021C                        624 00105$:
                                    625 ;	se8r01-receive-pwm.c: 157: b += '0'; 
      00021C 1C 00 30         [ 2]  626 	addw	x, #0x0030
      00021F 1F 09            [ 2]  627 	ldw	(0x09, sp), x
      000221                        628 00106$:
                                    629 ;	se8r01-receive-pwm.c: 158: message[0] = a;
      000221 90 96            [ 1]  630 	ldw	y, sp
      000223 90 5C            [ 2]  631 	incw	y
      000225 7B 0C            [ 1]  632 	ld	a, (0x0c, sp)
      000227 90 F7            [ 1]  633 	ld	(y), a
                                    634 ;	se8r01-receive-pwm.c: 159: message[1] = b;
      000229 93               [ 1]  635 	ldw	x, y
      00022A 5C               [ 2]  636 	incw	x
      00022B 7B 0A            [ 1]  637 	ld	a, (0x0a, sp)
      00022D F7               [ 1]  638 	ld	(x), a
                                    639 ;	se8r01-receive-pwm.c: 160: message[2] = 0;
      00022E 93               [ 1]  640 	ldw	x, y
      00022F 5C               [ 2]  641 	incw	x
      000230 5C               [ 2]  642 	incw	x
      000231 7F               [ 1]  643 	clr	(x)
                                    644 ;	se8r01-receive-pwm.c: 161: UARTPrintF (message);
      000232 90 89            [ 2]  645 	pushw	y
      000234 CDr01rD9         [ 4]  646 	call	_UARTPrintF
      000237 5B 02            [ 2]  647 	addw	sp, #2
      000239 5B 0C            [ 2]  648 	addw	sp, #12
      00023B 81               [ 4]  649 	ret
                                    650 ;	se8r01-receive-pwm.c: 164: void InitializeUART() {
                                    651 ;	-----------------------------------------
                                    652 ;	 function InitializeUART
                                    653 ;	-----------------------------------------
      00023C                        654 _InitializeUART:
                                    655 ;	se8r01-receive-pwm.c: 174: UART1_CR1 = 0;
      00023C AE 52 34         [ 2]  656 	ldw	x, #0x5234
      00023F 7F               [ 1]  657 	clr	(x)
                                    658 ;	se8r01-receive-pwm.c: 175: UART1_CR2 = 0;
      000240 AE 52 35         [ 2]  659 	ldw	x, #0x5235
      000243 7F               [ 1]  660 	clr	(x)
                                    661 ;	se8r01-receive-pwm.c: 176: UART1_CR4 = 0;
      000244 AE 52 37         [ 2]  662 	ldw	x, #0x5237
      000247 7F               [ 1]  663 	clr	(x)
                                    664 ;	se8r01-receive-pwm.c: 177: UART1_CR3 = 0;
      000248 AE 52 36         [ 2]  665 	ldw	x, #0x5236
      00024B 7F               [ 1]  666 	clr	(x)
                                    667 ;	se8r01-receive-pwm.c: 178: UART1_CR5 = 0;
      00024C AE 52 38         [ 2]  668 	ldw	x, #0x5238
      00024F 7F               [ 1]  669 	clr	(x)
                                    670 ;	se8r01-receive-pwm.c: 179: UART1_GTR = 0;
      000250 AE 52 39         [ 2]  671 	ldw	x, #0x5239
      000253 7F               [ 1]  672 	clr	(x)
                                    673 ;	se8r01-receive-pwm.c: 180: UART1_PSCR = 0;
      000254 AE 52 3A         [ 2]  674 	ldw	x, #0x523a
      000257 7F               [ 1]  675 	clr	(x)
                                    676 ;	se8r01-receive-pwm.c: 184: UNSET (UART1_CR1, CR1_M);        //  8 Data bits.
      000258 AE 52 34         [ 2]  677 	ldw	x, #0x5234
      00025B F6               [ 1]  678 	ld	a, (x)
      00025C A4 EF            [ 1]  679 	and	a, #0xef
      00025E F7               [ 1]  680 	ld	(x), a
                                    681 ;	se8r01-receive-pwm.c: 185: UNSET (UART1_CR1, CR1_PCEN);     //  Disable parity.
      00025F AE 52 34         [ 2]  682 	ldw	x, #0x5234
      000262 F6               [ 1]  683 	ld	a, (x)
      000263 A4 FB            [ 1]  684 	and	a, #0xfb
      000265 F7               [ 1]  685 	ld	(x), a
                                    686 ;	se8r01-receive-pwm.c: 186: UNSET (UART1_CR3, CR3_STOPH);    //  1 stop bit.
      000266 AE 52 36         [ 2]  687 	ldw	x, #0x5236
      000269 F6               [ 1]  688 	ld	a, (x)
      00026A A4 DF            [ 1]  689 	and	a, #0xdf
      00026C F7               [ 1]  690 	ld	(x), a
                                    691 ;	se8r01-receive-pwm.c: 187: UNSET (UART1_CR3, CR3_STOPL);    //  1 stop bit.
      00026D AE 52 36         [ 2]  692 	ldw	x, #0x5236
      000270 F6               [ 1]  693 	ld	a, (x)
      000271 A4 EF            [ 1]  694 	and	a, #0xef
      000273 F7               [ 1]  695 	ld	(x), a
                                    696 ;	se8r01-receive-pwm.c: 188: UART1_BRR2 = 0x0a;      //  Set the baud rate registers to 115200 baud
      000274 AE 52 33         [ 2]  697 	ldw	x, #0x5233
      000277 A6 0A            [ 1]  698 	ld	a, #0x0a
      000279 F7               [ 1]  699 	ld	(x), a
                                    700 ;	se8r01-receive-pwm.c: 189: UART1_BRR1 = 0x08;      //  based upon a 16 MHz system clock.
      00027A AE 52 32         [ 2]  701 	ldw	x, #0x5232
      00027D A6 08            [ 1]  702 	ld	a, #0x08
      00027F F7               [ 1]  703 	ld	(x), a
                                    704 ;	se8r01-receive-pwm.c: 193: UNSET (UART1_CR2, CR2_TEN);      //  Disable transmit.
      000280 AE 52 35         [ 2]  705 	ldw	x, #0x5235
      000283 F6               [ 1]  706 	ld	a, (x)
      000284 A4 F7            [ 1]  707 	and	a, #0xf7
      000286 F7               [ 1]  708 	ld	(x), a
                                    709 ;	se8r01-receive-pwm.c: 194: UNSET (UART1_CR2, CR2_REN);      //  Disable receive.
      000287 AE 52 35         [ 2]  710 	ldw	x, #0x5235
      00028A F6               [ 1]  711 	ld	a, (x)
      00028B A4 FB            [ 1]  712 	and	a, #0xfb
      00028D F7               [ 1]  713 	ld	(x), a
                                    714 ;	se8r01-receive-pwm.c: 198: SET (UART1_CR3, CR3_CPOL);
      00028E AE 52 36         [ 2]  715 	ldw	x, #0x5236
      000291 F6               [ 1]  716 	ld	a, (x)
      000292 AA 04            [ 1]  717 	or	a, #0x04
      000294 F7               [ 1]  718 	ld	(x), a
                                    719 ;	se8r01-receive-pwm.c: 199: SET (UART1_CR3, CR3_CPHA);
      000295 AE 52 36         [ 2]  720 	ldw	x, #0x5236
      000298 F6               [ 1]  721 	ld	a, (x)
      000299 AA 02            [ 1]  722 	or	a, #0x02
      00029B F7               [ 1]  723 	ld	(x), a
                                    724 ;	se8r01-receive-pwm.c: 200: SET (UART1_CR3, CR3_LBCL);
      00029C 72 10 52 36      [ 1]  725 	bset	0x5236, #0
                                    726 ;	se8r01-receive-pwm.c: 204: SET (UART1_CR2, CR2_TEN);
      0002A0 AE 52 35         [ 2]  727 	ldw	x, #0x5235
      0002A3 F6               [ 1]  728 	ld	a, (x)
      0002A4 AA 08            [ 1]  729 	or	a, #0x08
      0002A6 F7               [ 1]  730 	ld	(x), a
                                    731 ;	se8r01-receive-pwm.c: 205: SET (UART1_CR2, CR2_REN);
      0002A7 AE 52 35         [ 2]  732 	ldw	x, #0x5235
      0002AA F6               [ 1]  733 	ld	a, (x)
      0002AB AA 04            [ 1]  734 	or	a, #0x04
      0002AD F7               [ 1]  735 	ld	(x), a
                                    736 ;	se8r01-receive-pwm.c: 206: UART1_CR3 = CR3_CLKEN;
      0002AE AE 52 36         [ 2]  737 	ldw	x, #0x5236
      0002B1 A6 08            [ 1]  738 	ld	a, #0x08
      0002B3 F7               [ 1]  739 	ld	(x), a
      0002B4 81               [ 4]  740 	ret
                                    741 ;	se8r01-receive-pwm.c: 279: void init_io(void)
                                    742 ;	-----------------------------------------
                                    743 ;	 function init_io
                                    744 ;	-----------------------------------------
      0002B5                        745 _init_io:
                                    746 ;	se8r01-receive-pwm.c: 281: PD_DDR &= ~(1 << 3); // input mode
      0002B5 AE 50 11         [ 2]  747 	ldw	x, #0x5011
      0002B8 F6               [ 1]  748 	ld	a, (x)
      0002B9 A4 F7            [ 1]  749 	and	a, #0xf7
      0002BB F7               [ 1]  750 	ld	(x), a
                                    751 ;	se8r01-receive-pwm.c: 282: PD_CR1 |= (1 << 3); // input with pull up 
      0002BC AE 50 12         [ 2]  752 	ldw	x, #0x5012
      0002BF F6               [ 1]  753 	ld	a, (x)
      0002C0 AA 08            [ 1]  754 	or	a, #0x08
      0002C2 F7               [ 1]  755 	ld	(x), a
                                    756 ;	se8r01-receive-pwm.c: 283: PD_CR2 |= (1 << 3); // interrupt enabled 
      0002C3 AE 50 13         [ 2]  757 	ldw	x, #0x5013
      0002C6 F6               [ 1]  758 	ld	a, (x)
      0002C7 AA 08            [ 1]  759 	or	a, #0x08
      0002C9 F7               [ 1]  760 	ld	(x), a
                                    761 ;	se8r01-receive-pwm.c: 287: PC_ODR &= ~(1 << CE);
      0002CA AE 50 0A         [ 2]  762 	ldw	x, #0x500a
      0002CD F6               [ 1]  763 	ld	a, (x)
      0002CE A4 EF            [ 1]  764 	and	a, #0xef
      0002D0 F7               [ 1]  765 	ld	(x), a
                                    766 ;	se8r01-receive-pwm.c: 289: PC_ODR |= (1 << CSN);
      0002D1 AE 50 0A         [ 2]  767 	ldw	x, #0x500a
      0002D4 F6               [ 1]  768 	ld	a, (x)
      0002D5 AA 08            [ 1]  769 	or	a, #0x08
      0002D7 F7               [ 1]  770 	ld	(x), a
      0002D8 81               [ 4]  771 	ret
                                    772 ;	se8r01-receive-pwm.c: 295: void rf_switch_bank(unsigned char bankindex)
                                    773 ;	-----------------------------------------
                                    774 ;	 function rf_switch_bank
                                    775 ;	-----------------------------------------
      0002D9                        776 _rf_switch_bank:
      0002D9 88               [ 1]  777 	push	a
                                    778 ;	se8r01-receive-pwm.c: 298: temp1 = bankindex;
      0002DA 7B 04            [ 1]  779 	ld	a, (0x04, sp)
      0002DC 6B 01            [ 1]  780 	ld	(0x01, sp), a
                                    781 ;	se8r01-receive-pwm.c: 300: temp0 = write_spi(iRF_BANK0_STATUS);
      0002DE 4B 07            [ 1]  782 	push	#0x07
      0002E0 CDr00r08         [ 4]  783 	call	_write_spi
      0002E3 5B 01            [ 2]  784 	addw	sp, #1
                                    785 ;	se8r01-receive-pwm.c: 302: if((temp0&0x80)!=temp1)
      0002E5 A4 80            [ 1]  786 	and	a, #0x80
      0002E7 11 01            [ 1]  787 	cp	a, (0x01, sp)
      0002E9 27 09            [ 1]  788 	jreq	00103$
                                    789 ;	se8r01-receive-pwm.c: 304: write_spi_reg(iRF_CMD_ACTIVATE,0x53);
      0002EB 4B 53            [ 1]  790 	push	#0x53
      0002ED 4B 50            [ 1]  791 	push	#0x50
      0002EF CDr00r2E         [ 4]  792 	call	_write_spi_reg
      0002F2 5B 02            [ 2]  793 	addw	sp, #2
      0002F4                        794 00103$:
      0002F4 84               [ 1]  795 	pop	a
      0002F5 81               [ 4]  796 	ret
                                    797 ;	se8r01-receive-pwm.c: 311: void SE8R01_Calibration()
                                    798 ;	-----------------------------------------
                                    799 ;	 function SE8R01_Calibration
                                    800 ;	-----------------------------------------
      0002F6                        801 _SE8R01_Calibration:
      0002F6 52 0D            [ 2]  802 	sub	sp, #13
                                    803 ;	se8r01-receive-pwm.c: 314: rf_switch_bank(iBANK0);
      0002F8 4B 00            [ 1]  804 	push	#0x00
      0002FA CDr02rD9         [ 4]  805 	call	_rf_switch_bank
      0002FD 84               [ 1]  806 	pop	a
                                    807 ;	se8r01-receive-pwm.c: 315: temp[0]=0x03;
      0002FE 96               [ 1]  808 	ldw	x, sp
      0002FF 5C               [ 2]  809 	incw	x
      000300 1F 06            [ 2]  810 	ldw	(0x06, sp), x
      000302 1E 06            [ 2]  811 	ldw	x, (0x06, sp)
      000304 A6 03            [ 1]  812 	ld	a, #0x03
      000306 F7               [ 1]  813 	ld	(x), a
                                    814 ;	se8r01-receive-pwm.c: 316: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK0_CONFIG,temp, 1);
      000307 1E 06            [ 2]  815 	ldw	x, (0x06, sp)
      000309 4B 01            [ 1]  816 	push	#0x01
      00030B 89               [ 2]  817 	pushw	x
      00030C 4B 20            [ 1]  818 	push	#0x20
      00030E CDr00rA8         [ 4]  819 	call	_write_spi_buf
      000311 5B 04            [ 2]  820 	addw	sp, #4
                                    821 ;	se8r01-receive-pwm.c: 318: temp[0]=0x32;
      000313 1E 06            [ 2]  822 	ldw	x, (0x06, sp)
      000315 A6 32            [ 1]  823 	ld	a, #0x32
      000317 F7               [ 1]  824 	ld	(x), a
                                    825 ;	se8r01-receive-pwm.c: 320: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK0_RF_CH, temp,1);
      000318 1E 06            [ 2]  826 	ldw	x, (0x06, sp)
      00031A 4B 01            [ 1]  827 	push	#0x01
      00031C 89               [ 2]  828 	pushw	x
      00031D 4B 25            [ 1]  829 	push	#0x25
      00031F CDr00rA8         [ 4]  830 	call	_write_spi_buf
      000322 5B 04            [ 2]  831 	addw	sp, #4
                                    832 ;	se8r01-receive-pwm.c: 324: if (SE8R01_DR_2M==1)
      000324 CEu00u00         [ 2]  833 	ldw	x, _SE8R01_DR_2M+0
      000327 A3 00 01         [ 2]  834 	cpw	x, #0x0001
      00032A 26 07            [ 1]  835 	jrne	00105$
                                    836 ;	se8r01-receive-pwm.c: 325: {temp[0]=0x48;}
      00032C 1E 06            [ 2]  837 	ldw	x, (0x06, sp)
      00032E A6 48            [ 1]  838 	ld	a, #0x48
      000330 F7               [ 1]  839 	ld	(x), a
      000331 20 14            [ 2]  840 	jra	00106$
      000333                        841 00105$:
                                    842 ;	se8r01-receive-pwm.c: 326: else if (SE8R01_DR_1M==1)
      000333 CEu00u02         [ 2]  843 	ldw	x, _SE8R01_DR_1M+0
      000336 A3 00 01         [ 2]  844 	cpw	x, #0x0001
      000339 26 07            [ 1]  845 	jrne	00102$
                                    846 ;	se8r01-receive-pwm.c: 327: {temp[0]=0x40;}
      00033B 1E 06            [ 2]  847 	ldw	x, (0x06, sp)
      00033D A6 40            [ 1]  848 	ld	a, #0x40
      00033F F7               [ 1]  849 	ld	(x), a
      000340 20 05            [ 2]  850 	jra	00106$
      000342                        851 00102$:
                                    852 ;	se8r01-receive-pwm.c: 329: {temp[0]=0x68;}   
      000342 1E 06            [ 2]  853 	ldw	x, (0x06, sp)
      000344 A6 68            [ 1]  854 	ld	a, #0x68
      000346 F7               [ 1]  855 	ld	(x), a
      000347                        856 00106$:
                                    857 ;	se8r01-receive-pwm.c: 331: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK0_RF_SETUP,temp,1);
      000347 1E 06            [ 2]  858 	ldw	x, (0x06, sp)
      000349 4B 01            [ 1]  859 	push	#0x01
      00034B 89               [ 2]  860 	pushw	x
      00034C 4B 26            [ 1]  861 	push	#0x26
      00034E CDr00rA8         [ 4]  862 	call	_write_spi_buf
      000351 5B 04            [ 2]  863 	addw	sp, #4
                                    864 ;	se8r01-receive-pwm.c: 332: temp[0]=0x77;
      000353 1E 06            [ 2]  865 	ldw	x, (0x06, sp)
      000355 A6 77            [ 1]  866 	ld	a, #0x77
      000357 F7               [ 1]  867 	ld	(x), a
                                    868 ;	se8r01-receive-pwm.c: 333: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK0_PRE_GURD, temp,1);
      000358 1E 06            [ 2]  869 	ldw	x, (0x06, sp)
      00035A 4B 01            [ 1]  870 	push	#0x01
      00035C 89               [ 2]  871 	pushw	x
      00035D 4B 3F            [ 1]  872 	push	#0x3f
      00035F CDr00rA8         [ 4]  873 	call	_write_spi_buf
      000362 5B 04            [ 2]  874 	addw	sp, #4
                                    875 ;	se8r01-receive-pwm.c: 335: rf_switch_bank(iBANK1);
      000364 4B 80            [ 1]  876 	push	#0x80
      000366 CDr02rD9         [ 4]  877 	call	_rf_switch_bank
      000369 84               [ 1]  878 	pop	a
                                    879 ;	se8r01-receive-pwm.c: 336: temp[0]=0x40;
      00036A 1E 06            [ 2]  880 	ldw	x, (0x06, sp)
      00036C A6 40            [ 1]  881 	ld	a, #0x40
      00036E F7               [ 1]  882 	ld	(x), a
                                    883 ;	se8r01-receive-pwm.c: 337: temp[1]=0x00;
      00036F 1E 06            [ 2]  884 	ldw	x, (0x06, sp)
      000371 5C               [ 2]  885 	incw	x
      000372 1F 0C            [ 2]  886 	ldw	(0x0c, sp), x
      000374 1E 0C            [ 2]  887 	ldw	x, (0x0c, sp)
      000376 7F               [ 1]  888 	clr	(x)
                                    889 ;	se8r01-receive-pwm.c: 338: temp[2]=0x10;
      000377 1E 06            [ 2]  890 	ldw	x, (0x06, sp)
      000379 5C               [ 2]  891 	incw	x
      00037A 5C               [ 2]  892 	incw	x
      00037B 1F 0A            [ 2]  893 	ldw	(0x0a, sp), x
      00037D 1E 0A            [ 2]  894 	ldw	x, (0x0a, sp)
      00037F A6 10            [ 1]  895 	ld	a, #0x10
      000381 F7               [ 1]  896 	ld	(x), a
                                    897 ;	se8r01-receive-pwm.c: 340: {temp[3]=0xE6;}
      000382 1E 06            [ 2]  898 	ldw	x, (0x06, sp)
      000384 1C 00 03         [ 2]  899 	addw	x, #0x0003
      000387 1F 08            [ 2]  900 	ldw	(0x08, sp), x
                                    901 ;	se8r01-receive-pwm.c: 339: if (SE8R01_DR_2M==1)
      000389 CEu00u00         [ 2]  902 	ldw	x, _SE8R01_DR_2M+0
      00038C A3 00 01         [ 2]  903 	cpw	x, #0x0001
      00038F 26 07            [ 1]  904 	jrne	00108$
                                    905 ;	se8r01-receive-pwm.c: 340: {temp[3]=0xE6;}
      000391 1E 08            [ 2]  906 	ldw	x, (0x08, sp)
      000393 A6 E6            [ 1]  907 	ld	a, #0xe6
      000395 F7               [ 1]  908 	ld	(x), a
      000396 20 05            [ 2]  909 	jra	00109$
      000398                        910 00108$:
                                    911 ;	se8r01-receive-pwm.c: 342: {temp[3]=0xE4;}
      000398 1E 08            [ 2]  912 	ldw	x, (0x08, sp)
      00039A A6 E4            [ 1]  913 	ld	a, #0xe4
      00039C F7               [ 1]  914 	ld	(x), a
      00039D                        915 00109$:
                                    916 ;	se8r01-receive-pwm.c: 344: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_PLL_CTL0, temp, 4);
      00039D 1E 06            [ 2]  917 	ldw	x, (0x06, sp)
      00039F 4B 04            [ 1]  918 	push	#0x04
      0003A1 89               [ 2]  919 	pushw	x
      0003A2 4B 21            [ 1]  920 	push	#0x21
      0003A4 CDr00rA8         [ 4]  921 	call	_write_spi_buf
      0003A7 5B 04            [ 2]  922 	addw	sp, #4
                                    923 ;	se8r01-receive-pwm.c: 346: temp[0]=0x20;
      0003A9 1E 06            [ 2]  924 	ldw	x, (0x06, sp)
      0003AB A6 20            [ 1]  925 	ld	a, #0x20
      0003AD F7               [ 1]  926 	ld	(x), a
                                    927 ;	se8r01-receive-pwm.c: 347: temp[1]=0x08;
      0003AE 1E 0C            [ 2]  928 	ldw	x, (0x0c, sp)
      0003B0 A6 08            [ 1]  929 	ld	a, #0x08
      0003B2 F7               [ 1]  930 	ld	(x), a
                                    931 ;	se8r01-receive-pwm.c: 348: temp[2]=0x50;
      0003B3 1E 0A            [ 2]  932 	ldw	x, (0x0a, sp)
      0003B5 A6 50            [ 1]  933 	ld	a, #0x50
      0003B7 F7               [ 1]  934 	ld	(x), a
                                    935 ;	se8r01-receive-pwm.c: 349: temp[3]=0x40;
      0003B8 1E 08            [ 2]  936 	ldw	x, (0x08, sp)
      0003BA A6 40            [ 1]  937 	ld	a, #0x40
      0003BC F7               [ 1]  938 	ld	(x), a
                                    939 ;	se8r01-receive-pwm.c: 350: temp[4]=0x50;
      0003BD 1E 06            [ 2]  940 	ldw	x, (0x06, sp)
      0003BF A6 50            [ 1]  941 	ld	a, #0x50
      0003C1 E7 04            [ 1]  942 	ld	(0x0004, x), a
                                    943 ;	se8r01-receive-pwm.c: 351: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_CAL_CTL, temp, 5);
      0003C3 1E 06            [ 2]  944 	ldw	x, (0x06, sp)
      0003C5 4B 05            [ 1]  945 	push	#0x05
      0003C7 89               [ 2]  946 	pushw	x
      0003C8 4B 23            [ 1]  947 	push	#0x23
      0003CA CDr00rA8         [ 4]  948 	call	_write_spi_buf
      0003CD 5B 04            [ 2]  949 	addw	sp, #4
                                    950 ;	se8r01-receive-pwm.c: 353: temp[0]=0x00;
      0003CF 1E 06            [ 2]  951 	ldw	x, (0x06, sp)
      0003D1 7F               [ 1]  952 	clr	(x)
                                    953 ;	se8r01-receive-pwm.c: 354: temp[1]=0x00;
      0003D2 1E 0C            [ 2]  954 	ldw	x, (0x0c, sp)
      0003D4 7F               [ 1]  955 	clr	(x)
                                    956 ;	se8r01-receive-pwm.c: 355: if (SE8R01_DR_2M==1)
      0003D5 CEu00u00         [ 2]  957 	ldw	x, _SE8R01_DR_2M+0
      0003D8 A3 00 01         [ 2]  958 	cpw	x, #0x0001
      0003DB 26 07            [ 1]  959 	jrne	00111$
                                    960 ;	se8r01-receive-pwm.c: 356: { temp[2]=0x1E;}
      0003DD 1E 0A            [ 2]  961 	ldw	x, (0x0a, sp)
      0003DF A6 1E            [ 1]  962 	ld	a, #0x1e
      0003E1 F7               [ 1]  963 	ld	(x), a
      0003E2 20 05            [ 2]  964 	jra	00112$
      0003E4                        965 00111$:
                                    966 ;	se8r01-receive-pwm.c: 358: { temp[2]=0x1F;}
      0003E4 1E 0A            [ 2]  967 	ldw	x, (0x0a, sp)
      0003E6 A6 1F            [ 1]  968 	ld	a, #0x1f
      0003E8 F7               [ 1]  969 	ld	(x), a
      0003E9                        970 00112$:
                                    971 ;	se8r01-receive-pwm.c: 360: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_IF_FREQ, temp, 3);
      0003E9 1E 06            [ 2]  972 	ldw	x, (0x06, sp)
      0003EB 4B 03            [ 1]  973 	push	#0x03
      0003ED 89               [ 2]  974 	pushw	x
      0003EE 4B 2A            [ 1]  975 	push	#0x2a
      0003F0 CDr00rA8         [ 4]  976 	call	_write_spi_buf
      0003F3 5B 04            [ 2]  977 	addw	sp, #4
                                    978 ;	se8r01-receive-pwm.c: 362: if (SE8R01_DR_2M==1)
      0003F5 CEu00u00         [ 2]  979 	ldw	x, _SE8R01_DR_2M+0
      0003F8 A3 00 01         [ 2]  980 	cpw	x, #0x0001
      0003FB 26 07            [ 1]  981 	jrne	00114$
                                    982 ;	se8r01-receive-pwm.c: 363: { temp[0]=0x29;}
      0003FD 1E 06            [ 2]  983 	ldw	x, (0x06, sp)
      0003FF A6 29            [ 1]  984 	ld	a, #0x29
      000401 F7               [ 1]  985 	ld	(x), a
      000402 20 05            [ 2]  986 	jra	00115$
      000404                        987 00114$:
                                    988 ;	se8r01-receive-pwm.c: 365: { temp[0]=0x14;}
      000404 1E 06            [ 2]  989 	ldw	x, (0x06, sp)
      000406 A6 14            [ 1]  990 	ld	a, #0x14
      000408 F7               [ 1]  991 	ld	(x), a
      000409                        992 00115$:
                                    993 ;	se8r01-receive-pwm.c: 367: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_FDEV, temp, 1);
      000409 1E 06            [ 2]  994 	ldw	x, (0x06, sp)
      00040B 4B 01            [ 1]  995 	push	#0x01
      00040D 89               [ 2]  996 	pushw	x
      00040E 4B 2C            [ 1]  997 	push	#0x2c
      000410 CDr00rA8         [ 4]  998 	call	_write_spi_buf
      000413 5B 04            [ 2]  999 	addw	sp, #4
                                   1000 ;	se8r01-receive-pwm.c: 369: temp[0]=0x00;
      000415 1E 06            [ 2] 1001 	ldw	x, (0x06, sp)
      000417 7F               [ 1] 1002 	clr	(x)
                                   1003 ;	se8r01-receive-pwm.c: 370: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_DAC_CAL_LOW,temp,1);
      000418 1E 06            [ 2] 1004 	ldw	x, (0x06, sp)
      00041A 4B 01            [ 1] 1005 	push	#0x01
      00041C 89               [ 2] 1006 	pushw	x
      00041D 4B 37            [ 1] 1007 	push	#0x37
      00041F CDr00rA8         [ 4] 1008 	call	_write_spi_buf
      000422 5B 04            [ 2] 1009 	addw	sp, #4
                                   1010 ;	se8r01-receive-pwm.c: 372: temp[0]=0x7F;
      000424 1E 06            [ 2] 1011 	ldw	x, (0x06, sp)
      000426 A6 7F            [ 1] 1012 	ld	a, #0x7f
      000428 F7               [ 1] 1013 	ld	(x), a
                                   1014 ;	se8r01-receive-pwm.c: 373: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_DAC_CAL_HI,temp,1);
      000429 1E 06            [ 2] 1015 	ldw	x, (0x06, sp)
      00042B 4B 01            [ 1] 1016 	push	#0x01
      00042D 89               [ 2] 1017 	pushw	x
      00042E 4B 38            [ 1] 1018 	push	#0x38
      000430 CDr00rA8         [ 4] 1019 	call	_write_spi_buf
      000433 5B 04            [ 2] 1020 	addw	sp, #4
                                   1021 ;	se8r01-receive-pwm.c: 375: temp[0]=0x02;
      000435 1E 06            [ 2] 1022 	ldw	x, (0x06, sp)
      000437 A6 02            [ 1] 1023 	ld	a, #0x02
      000439 F7               [ 1] 1024 	ld	(x), a
                                   1025 ;	se8r01-receive-pwm.c: 376: temp[1]=0xC1;
      00043A 1E 0C            [ 2] 1026 	ldw	x, (0x0c, sp)
      00043C A6 C1            [ 1] 1027 	ld	a, #0xc1
      00043E F7               [ 1] 1028 	ld	(x), a
                                   1029 ;	se8r01-receive-pwm.c: 377: temp[2]=0xEB;            
      00043F 1E 0A            [ 2] 1030 	ldw	x, (0x0a, sp)
      000441 A6 EB            [ 1] 1031 	ld	a, #0xeb
      000443 F7               [ 1] 1032 	ld	(x), a
                                   1033 ;	se8r01-receive-pwm.c: 378: temp[3]=0x1C;
      000444 1E 08            [ 2] 1034 	ldw	x, (0x08, sp)
      000446 A6 1C            [ 1] 1035 	ld	a, #0x1c
      000448 F7               [ 1] 1036 	ld	(x), a
                                   1037 ;	se8r01-receive-pwm.c: 379: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_AGC_GAIN, temp,4);
      000449 1E 06            [ 2] 1038 	ldw	x, (0x06, sp)
      00044B 4B 04            [ 1] 1039 	push	#0x04
      00044D 89               [ 2] 1040 	pushw	x
      00044E 4B 3D            [ 1] 1041 	push	#0x3d
      000450 CDr00rA8         [ 4] 1042 	call	_write_spi_buf
      000453 5B 04            [ 2] 1043 	addw	sp, #4
                                   1044 ;	se8r01-receive-pwm.c: 381: temp[0]=0x97;
      000455 1E 06            [ 2] 1045 	ldw	x, (0x06, sp)
      000457 A6 97            [ 1] 1046 	ld	a, #0x97
      000459 F7               [ 1] 1047 	ld	(x), a
                                   1048 ;	se8r01-receive-pwm.c: 382: temp[1]=0x64;
      00045A 1E 0C            [ 2] 1049 	ldw	x, (0x0c, sp)
      00045C A6 64            [ 1] 1050 	ld	a, #0x64
      00045E F7               [ 1] 1051 	ld	(x), a
                                   1052 ;	se8r01-receive-pwm.c: 383: temp[2]=0x00;
      00045F 1E 0A            [ 2] 1053 	ldw	x, (0x0a, sp)
      000461 7F               [ 1] 1054 	clr	(x)
                                   1055 ;	se8r01-receive-pwm.c: 384: temp[3]=0x81;
      000462 1E 08            [ 2] 1056 	ldw	x, (0x08, sp)
      000464 A6 81            [ 1] 1057 	ld	a, #0x81
      000466 F7               [ 1] 1058 	ld	(x), a
                                   1059 ;	se8r01-receive-pwm.c: 385: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_RF_IVGEN, temp, 4);
      000467 1E 06            [ 2] 1060 	ldw	x, (0x06, sp)
      000469 4B 04            [ 1] 1061 	push	#0x04
      00046B 89               [ 2] 1062 	pushw	x
      00046C 4B 3E            [ 1] 1063 	push	#0x3e
      00046E CDr00rA8         [ 4] 1064 	call	_write_spi_buf
      000471 5B 04            [ 2] 1065 	addw	sp, #4
                                   1066 ;	se8r01-receive-pwm.c: 386: rf_switch_bank(iBANK0);
      000473 4B 00            [ 1] 1067 	push	#0x00
      000475 CDr02rD9         [ 4] 1068 	call	_rf_switch_bank
      000478 84               [ 1] 1069 	pop	a
                                   1070 ;	se8r01-receive-pwm.c: 391: delayTenMicro();
      000479 CDr00r00         [ 4] 1071 	call	_delayTenMicro
                                   1072 ;	se8r01-receive-pwm.c: 392: PC_ODR |= (1 << CE);
      00047C AE 50 0A         [ 2] 1073 	ldw	x, #0x500a
      00047F F6               [ 1] 1074 	ld	a, (x)
      000480 AA 10            [ 1] 1075 	or	a, #0x10
      000482 F7               [ 1] 1076 	ld	(x), a
                                   1077 ;	se8r01-receive-pwm.c: 393: delayTenMicro();
      000483 CDr00r00         [ 4] 1078 	call	_delayTenMicro
                                   1079 ;	se8r01-receive-pwm.c: 394: delayTenMicro();
      000486 CDr00r00         [ 4] 1080 	call	_delayTenMicro
                                   1081 ;	se8r01-receive-pwm.c: 395: delayTenMicro();
      000489 CDr00r00         [ 4] 1082 	call	_delayTenMicro
                                   1083 ;	se8r01-receive-pwm.c: 396: PC_ODR &= ~(1 << CE);
      00048C AE 50 0A         [ 2] 1084 	ldw	x, #0x500a
      00048F F6               [ 1] 1085 	ld	a, (x)
      000490 A4 EF            [ 1] 1086 	and	a, #0xef
      000492 F7               [ 1] 1087 	ld	(x), a
                                   1088 ;	se8r01-receive-pwm.c: 397: delay(50);                            // delay 50ms waitting for calibaration.
      000493 4B 32            [ 1] 1089 	push	#0x32
      000495 4B 00            [ 1] 1090 	push	#0x00
      000497 CDr01r8E         [ 4] 1091 	call	_delay
      00049A 5B 02            [ 2] 1092 	addw	sp, #2
                                   1093 ;	se8r01-receive-pwm.c: 402: delayTenMicro();
      00049C CDr00r00         [ 4] 1094 	call	_delayTenMicro
                                   1095 ;	se8r01-receive-pwm.c: 403: PC_ODR |= (1 << CE);
      00049F AE 50 0A         [ 2] 1096 	ldw	x, #0x500a
      0004A2 F6               [ 1] 1097 	ld	a, (x)
      0004A3 AA 10            [ 1] 1098 	or	a, #0x10
      0004A5 F7               [ 1] 1099 	ld	(x), a
                                   1100 ;	se8r01-receive-pwm.c: 404: delayTenMicro();
      0004A6 CDr00r00         [ 4] 1101 	call	_delayTenMicro
                                   1102 ;	se8r01-receive-pwm.c: 405: delayTenMicro();
      0004A9 CDr00r00         [ 4] 1103 	call	_delayTenMicro
                                   1104 ;	se8r01-receive-pwm.c: 406: delayTenMicro();
      0004AC CDr00r00         [ 4] 1105 	call	_delayTenMicro
                                   1106 ;	se8r01-receive-pwm.c: 407: PC_ODR &= ~(1 << CE);
      0004AF AE 50 0A         [ 2] 1107 	ldw	x, #0x500a
      0004B2 F6               [ 1] 1108 	ld	a, (x)
      0004B3 A4 EF            [ 1] 1109 	and	a, #0xef
      0004B5 F7               [ 1] 1110 	ld	(x), a
                                   1111 ;	se8r01-receive-pwm.c: 408: delay(50);                            // delay 50ms waitting for calibaration.
      0004B6 4B 32            [ 1] 1112 	push	#0x32
      0004B8 4B 00            [ 1] 1113 	push	#0x00
      0004BA CDr01r8E         [ 4] 1114 	call	_delay
      0004BD 5B 02            [ 2] 1115 	addw	sp, #2
      0004BF 5B 0D            [ 2] 1116 	addw	sp, #13
      0004C1 81               [ 4] 1117 	ret
                                   1118 ;	se8r01-receive-pwm.c: 412: void SE8R01_Analog_Init()           //SE8R01 初始化
                                   1119 ;	-----------------------------------------
                                   1120 ;	 function SE8R01_Analog_Init
                                   1121 ;	-----------------------------------------
      0004C2                       1122 _SE8R01_Analog_Init:
      0004C2 52 15            [ 2] 1123 	sub	sp, #21
                                   1124 ;	se8r01-receive-pwm.c: 417: gtemp[0]=0x28;
      0004C4 AEr00r00         [ 2] 1125 	ldw	x, #_gtemp+0
      0004C7 1F 14            [ 2] 1126 	ldw	(0x14, sp), x
      0004C9 1E 14            [ 2] 1127 	ldw	x, (0x14, sp)
      0004CB A6 28            [ 1] 1128 	ld	a, #0x28
      0004CD F7               [ 1] 1129 	ld	(x), a
                                   1130 ;	se8r01-receive-pwm.c: 418: gtemp[1]=0x32;
      0004CE 1E 14            [ 2] 1131 	ldw	x, (0x14, sp)
      0004D0 5C               [ 2] 1132 	incw	x
      0004D1 1F 08            [ 2] 1133 	ldw	(0x08, sp), x
      0004D3 1E 08            [ 2] 1134 	ldw	x, (0x08, sp)
      0004D5 A6 32            [ 1] 1135 	ld	a, #0x32
      0004D7 F7               [ 1] 1136 	ld	(x), a
                                   1137 ;	se8r01-receive-pwm.c: 419: gtemp[2]=0x80;
      0004D8 1E 14            [ 2] 1138 	ldw	x, (0x14, sp)
      0004DA 5C               [ 2] 1139 	incw	x
      0004DB 5C               [ 2] 1140 	incw	x
      0004DC 1F 06            [ 2] 1141 	ldw	(0x06, sp), x
      0004DE 1E 06            [ 2] 1142 	ldw	x, (0x06, sp)
      0004E0 A6 80            [ 1] 1143 	ld	a, #0x80
      0004E2 F7               [ 1] 1144 	ld	(x), a
                                   1145 ;	se8r01-receive-pwm.c: 420: gtemp[3]=0x90;
      0004E3 1E 14            [ 2] 1146 	ldw	x, (0x14, sp)
      0004E5 1C 00 03         [ 2] 1147 	addw	x, #0x0003
      0004E8 1F 0E            [ 2] 1148 	ldw	(0x0e, sp), x
      0004EA 1E 0E            [ 2] 1149 	ldw	x, (0x0e, sp)
      0004EC A6 90            [ 1] 1150 	ld	a, #0x90
      0004EE F7               [ 1] 1151 	ld	(x), a
                                   1152 ;	se8r01-receive-pwm.c: 421: gtemp[4]=0x00;
      0004EF 1E 14            [ 2] 1153 	ldw	x, (0x14, sp)
      0004F1 1C 00 04         [ 2] 1154 	addw	x, #0x0004
      0004F4 7F               [ 1] 1155 	clr	(x)
                                   1156 ;	se8r01-receive-pwm.c: 422: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK0_SETUP_VALUE, gtemp, 5);
      0004F5 1E 14            [ 2] 1157 	ldw	x, (0x14, sp)
      0004F7 4B 05            [ 1] 1158 	push	#0x05
      0004F9 89               [ 2] 1159 	pushw	x
      0004FA 4B 3E            [ 1] 1160 	push	#0x3e
      0004FC CDr00rA8         [ 4] 1161 	call	_write_spi_buf
      0004FF 5B 04            [ 2] 1162 	addw	sp, #4
                                   1163 ;	se8r01-receive-pwm.c: 423: delay(2);
      000501 4B 02            [ 1] 1164 	push	#0x02
      000503 4B 00            [ 1] 1165 	push	#0x00
      000505 CDr01r8E         [ 4] 1166 	call	_delay
      000508 5B 02            [ 2] 1167 	addw	sp, #2
                                   1168 ;	se8r01-receive-pwm.c: 426: rf_switch_bank(iBANK1);
      00050A 4B 80            [ 1] 1169 	push	#0x80
      00050C CDr02rD9         [ 4] 1170 	call	_rf_switch_bank
      00050F 84               [ 1] 1171 	pop	a
                                   1172 ;	se8r01-receive-pwm.c: 428: temp[0]=0x40;
      000510 96               [ 1] 1173 	ldw	x, sp
      000511 5C               [ 2] 1174 	incw	x
      000512 1F 0C            [ 2] 1175 	ldw	(0x0c, sp), x
      000514 1E 0C            [ 2] 1176 	ldw	x, (0x0c, sp)
      000516 A6 40            [ 1] 1177 	ld	a, #0x40
      000518 F7               [ 1] 1178 	ld	(x), a
                                   1179 ;	se8r01-receive-pwm.c: 429: temp[1]=0x01;               
      000519 1E 0C            [ 2] 1180 	ldw	x, (0x0c, sp)
      00051B 5C               [ 2] 1181 	incw	x
      00051C 1F 0A            [ 2] 1182 	ldw	(0x0a, sp), x
      00051E 1E 0A            [ 2] 1183 	ldw	x, (0x0a, sp)
      000520 A6 01            [ 1] 1184 	ld	a, #0x01
      000522 F7               [ 1] 1185 	ld	(x), a
                                   1186 ;	se8r01-receive-pwm.c: 430: temp[2]=0x30;               
      000523 1E 0C            [ 2] 1187 	ldw	x, (0x0c, sp)
      000525 5C               [ 2] 1188 	incw	x
      000526 5C               [ 2] 1189 	incw	x
      000527 1F 12            [ 2] 1190 	ldw	(0x12, sp), x
      000529 1E 12            [ 2] 1191 	ldw	x, (0x12, sp)
      00052B A6 30            [ 1] 1192 	ld	a, #0x30
      00052D F7               [ 1] 1193 	ld	(x), a
                                   1194 ;	se8r01-receive-pwm.c: 432: { temp[3]=0xE2; }              
      00052E 1E 0C            [ 2] 1195 	ldw	x, (0x0c, sp)
      000530 1C 00 03         [ 2] 1196 	addw	x, #0x0003
      000533 1F 10            [ 2] 1197 	ldw	(0x10, sp), x
                                   1198 ;	se8r01-receive-pwm.c: 431: if (SE8R01_DR_2M==1)
      000535 CEu00u00         [ 2] 1199 	ldw	x, _SE8R01_DR_2M+0
      000538 A3 00 01         [ 2] 1200 	cpw	x, #0x0001
      00053B 26 07            [ 1] 1201 	jrne	00102$
                                   1202 ;	se8r01-receive-pwm.c: 432: { temp[3]=0xE2; }              
      00053D 1E 10            [ 2] 1203 	ldw	x, (0x10, sp)
      00053F A6 E2            [ 1] 1204 	ld	a, #0xe2
      000541 F7               [ 1] 1205 	ld	(x), a
      000542 20 05            [ 2] 1206 	jra	00103$
      000544                       1207 00102$:
                                   1208 ;	se8r01-receive-pwm.c: 434: { temp[3]=0xE0;}
      000544 1E 10            [ 2] 1209 	ldw	x, (0x10, sp)
      000546 A6 E0            [ 1] 1210 	ld	a, #0xe0
      000548 F7               [ 1] 1211 	ld	(x), a
      000549                       1212 00103$:
                                   1213 ;	se8r01-receive-pwm.c: 436: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_PLL_CTL0, temp,4);
      000549 1E 0C            [ 2] 1214 	ldw	x, (0x0c, sp)
      00054B 4B 04            [ 1] 1215 	push	#0x04
      00054D 89               [ 2] 1216 	pushw	x
      00054E 4B 21            [ 1] 1217 	push	#0x21
      000550 CDr00rA8         [ 4] 1218 	call	_write_spi_buf
      000553 5B 04            [ 2] 1219 	addw	sp, #4
                                   1220 ;	se8r01-receive-pwm.c: 438: temp[0]=0x29;
      000555 1E 0C            [ 2] 1221 	ldw	x, (0x0c, sp)
      000557 A6 29            [ 1] 1222 	ld	a, #0x29
      000559 F7               [ 1] 1223 	ld	(x), a
                                   1224 ;	se8r01-receive-pwm.c: 439: temp[1]=0x89;
      00055A 1E 0A            [ 2] 1225 	ldw	x, (0x0a, sp)
      00055C A6 89            [ 1] 1226 	ld	a, #0x89
      00055E F7               [ 1] 1227 	ld	(x), a
                                   1228 ;	se8r01-receive-pwm.c: 440: temp[2]=0x55;                     
      00055F 1E 12            [ 2] 1229 	ldw	x, (0x12, sp)
      000561 A6 55            [ 1] 1230 	ld	a, #0x55
      000563 F7               [ 1] 1231 	ld	(x), a
                                   1232 ;	se8r01-receive-pwm.c: 441: temp[3]=0x40;
      000564 1E 10            [ 2] 1233 	ldw	x, (0x10, sp)
      000566 A6 40            [ 1] 1234 	ld	a, #0x40
      000568 F7               [ 1] 1235 	ld	(x), a
                                   1236 ;	se8r01-receive-pwm.c: 442: temp[4]=0x50;
      000569 1E 0C            [ 2] 1237 	ldw	x, (0x0c, sp)
      00056B A6 50            [ 1] 1238 	ld	a, #0x50
      00056D E7 04            [ 1] 1239 	ld	(0x0004, x), a
                                   1240 ;	se8r01-receive-pwm.c: 443: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_CAL_CTL, temp,5);
      00056F 1E 0C            [ 2] 1241 	ldw	x, (0x0c, sp)
      000571 4B 05            [ 1] 1242 	push	#0x05
      000573 89               [ 2] 1243 	pushw	x
      000574 4B 23            [ 1] 1244 	push	#0x23
      000576 CDr00rA8         [ 4] 1245 	call	_write_spi_buf
      000579 5B 04            [ 2] 1246 	addw	sp, #4
                                   1247 ;	se8r01-receive-pwm.c: 445: if (SE8R01_DR_2M==1)
      00057B CEu00u00         [ 2] 1248 	ldw	x, _SE8R01_DR_2M+0
      00057E A3 00 01         [ 2] 1249 	cpw	x, #0x0001
      000581 26 07            [ 1] 1250 	jrne	00105$
                                   1251 ;	se8r01-receive-pwm.c: 446: { temp[0]=0x29;}
      000583 1E 0C            [ 2] 1252 	ldw	x, (0x0c, sp)
      000585 A6 29            [ 1] 1253 	ld	a, #0x29
      000587 F7               [ 1] 1254 	ld	(x), a
      000588 20 05            [ 2] 1255 	jra	00106$
      00058A                       1256 00105$:
                                   1257 ;	se8r01-receive-pwm.c: 448: { temp[0]=0x14;}
      00058A 1E 0C            [ 2] 1258 	ldw	x, (0x0c, sp)
      00058C A6 14            [ 1] 1259 	ld	a, #0x14
      00058E F7               [ 1] 1260 	ld	(x), a
      00058F                       1261 00106$:
                                   1262 ;	se8r01-receive-pwm.c: 450: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_FDEV, temp,1);
      00058F 1E 0C            [ 2] 1263 	ldw	x, (0x0c, sp)
      000591 4B 01            [ 1] 1264 	push	#0x01
      000593 89               [ 2] 1265 	pushw	x
      000594 4B 2C            [ 1] 1266 	push	#0x2c
      000596 CDr00rA8         [ 4] 1267 	call	_write_spi_buf
      000599 5B 04            [ 2] 1268 	addw	sp, #4
                                   1269 ;	se8r01-receive-pwm.c: 452: temp[0]=0x55;
      00059B 1E 0C            [ 2] 1270 	ldw	x, (0x0c, sp)
      00059D A6 55            [ 1] 1271 	ld	a, #0x55
      00059F F7               [ 1] 1272 	ld	(x), a
                                   1273 ;	se8r01-receive-pwm.c: 453: temp[1]=0xC2;
      0005A0 1E 0A            [ 2] 1274 	ldw	x, (0x0a, sp)
      0005A2 A6 C2            [ 1] 1275 	ld	a, #0xc2
      0005A4 F7               [ 1] 1276 	ld	(x), a
                                   1277 ;	se8r01-receive-pwm.c: 454: temp[2]=0x09;
      0005A5 1E 12            [ 2] 1278 	ldw	x, (0x12, sp)
      0005A7 A6 09            [ 1] 1279 	ld	a, #0x09
      0005A9 F7               [ 1] 1280 	ld	(x), a
                                   1281 ;	se8r01-receive-pwm.c: 455: temp[3]=0xAC;  
      0005AA 1E 10            [ 2] 1282 	ldw	x, (0x10, sp)
      0005AC A6 AC            [ 1] 1283 	ld	a, #0xac
      0005AE F7               [ 1] 1284 	ld	(x), a
                                   1285 ;	se8r01-receive-pwm.c: 456: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_RX_CTRL,temp,4);
      0005AF 1E 0C            [ 2] 1286 	ldw	x, (0x0c, sp)
      0005B1 4B 04            [ 1] 1287 	push	#0x04
      0005B3 89               [ 2] 1288 	pushw	x
      0005B4 4B 31            [ 1] 1289 	push	#0x31
      0005B6 CDr00rA8         [ 4] 1290 	call	_write_spi_buf
      0005B9 5B 04            [ 2] 1291 	addw	sp, #4
                                   1292 ;	se8r01-receive-pwm.c: 458: temp[0]=0x00;
      0005BB 1E 0C            [ 2] 1293 	ldw	x, (0x0c, sp)
      0005BD 7F               [ 1] 1294 	clr	(x)
                                   1295 ;	se8r01-receive-pwm.c: 459: temp[1]=0x14;
      0005BE 1E 0A            [ 2] 1296 	ldw	x, (0x0a, sp)
      0005C0 A6 14            [ 1] 1297 	ld	a, #0x14
      0005C2 F7               [ 1] 1298 	ld	(x), a
                                   1299 ;	se8r01-receive-pwm.c: 460: temp[2]=0x08;   
      0005C3 1E 12            [ 2] 1300 	ldw	x, (0x12, sp)
      0005C5 A6 08            [ 1] 1301 	ld	a, #0x08
      0005C7 F7               [ 1] 1302 	ld	(x), a
                                   1303 ;	se8r01-receive-pwm.c: 461: temp[3]=0x29;
      0005C8 1E 10            [ 2] 1304 	ldw	x, (0x10, sp)
      0005CA A6 29            [ 1] 1305 	ld	a, #0x29
      0005CC F7               [ 1] 1306 	ld	(x), a
                                   1307 ;	se8r01-receive-pwm.c: 462: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_FAGC_CTRL_1, temp,4);
      0005CD 1E 0C            [ 2] 1308 	ldw	x, (0x0c, sp)
      0005CF 4B 04            [ 1] 1309 	push	#0x04
      0005D1 89               [ 2] 1310 	pushw	x
      0005D2 4B 33            [ 1] 1311 	push	#0x33
      0005D4 CDr00rA8         [ 4] 1312 	call	_write_spi_buf
      0005D7 5B 04            [ 2] 1313 	addw	sp, #4
                                   1314 ;	se8r01-receive-pwm.c: 464: temp[0]=0x02;
      0005D9 1E 0C            [ 2] 1315 	ldw	x, (0x0c, sp)
      0005DB A6 02            [ 1] 1316 	ld	a, #0x02
      0005DD F7               [ 1] 1317 	ld	(x), a
                                   1318 ;	se8r01-receive-pwm.c: 465: temp[1]=0xC1;
      0005DE 1E 0A            [ 2] 1319 	ldw	x, (0x0a, sp)
      0005E0 A6 C1            [ 1] 1320 	ld	a, #0xc1
      0005E2 F7               [ 1] 1321 	ld	(x), a
                                   1322 ;	se8r01-receive-pwm.c: 466: temp[2]=0xCB;  
      0005E3 1E 12            [ 2] 1323 	ldw	x, (0x12, sp)
      0005E5 A6 CB            [ 1] 1324 	ld	a, #0xcb
      0005E7 F7               [ 1] 1325 	ld	(x), a
                                   1326 ;	se8r01-receive-pwm.c: 467: temp[3]=0x1C;
      0005E8 1E 10            [ 2] 1327 	ldw	x, (0x10, sp)
      0005EA A6 1C            [ 1] 1328 	ld	a, #0x1c
      0005EC F7               [ 1] 1329 	ld	(x), a
                                   1330 ;	se8r01-receive-pwm.c: 468: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_AGC_GAIN, temp,4);
      0005ED 1E 0C            [ 2] 1331 	ldw	x, (0x0c, sp)
      0005EF 4B 04            [ 1] 1332 	push	#0x04
      0005F1 89               [ 2] 1333 	pushw	x
      0005F2 4B 3D            [ 1] 1334 	push	#0x3d
      0005F4 CDr00rA8         [ 4] 1335 	call	_write_spi_buf
      0005F7 5B 04            [ 2] 1336 	addw	sp, #4
                                   1337 ;	se8r01-receive-pwm.c: 470: temp[0]=0x97;
      0005F9 1E 0C            [ 2] 1338 	ldw	x, (0x0c, sp)
      0005FB A6 97            [ 1] 1339 	ld	a, #0x97
      0005FD F7               [ 1] 1340 	ld	(x), a
                                   1341 ;	se8r01-receive-pwm.c: 471: temp[1]=0x64;
      0005FE 1E 0A            [ 2] 1342 	ldw	x, (0x0a, sp)
      000600 A6 64            [ 1] 1343 	ld	a, #0x64
      000602 F7               [ 1] 1344 	ld	(x), a
                                   1345 ;	se8r01-receive-pwm.c: 472: temp[2]=0x00;
      000603 1E 12            [ 2] 1346 	ldw	x, (0x12, sp)
      000605 7F               [ 1] 1347 	clr	(x)
                                   1348 ;	se8r01-receive-pwm.c: 473: temp[3]=0x01;
      000606 1E 10            [ 2] 1349 	ldw	x, (0x10, sp)
      000608 A6 01            [ 1] 1350 	ld	a, #0x01
      00060A F7               [ 1] 1351 	ld	(x), a
                                   1352 ;	se8r01-receive-pwm.c: 474: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_RF_IVGEN, temp,4);
      00060B 1E 0C            [ 2] 1353 	ldw	x, (0x0c, sp)
      00060D 4B 04            [ 1] 1354 	push	#0x04
      00060F 89               [ 2] 1355 	pushw	x
      000610 4B 3E            [ 1] 1356 	push	#0x3e
      000612 CDr00rA8         [ 4] 1357 	call	_write_spi_buf
      000615 5B 04            [ 2] 1358 	addw	sp, #4
                                   1359 ;	se8r01-receive-pwm.c: 476: gtemp[0]=0x2A;
      000617 1E 14            [ 2] 1360 	ldw	x, (0x14, sp)
      000619 A6 2A            [ 1] 1361 	ld	a, #0x2a
      00061B F7               [ 1] 1362 	ld	(x), a
                                   1363 ;	se8r01-receive-pwm.c: 477: gtemp[1]=0x04;
      00061C 1E 08            [ 2] 1364 	ldw	x, (0x08, sp)
      00061E A6 04            [ 1] 1365 	ld	a, #0x04
      000620 F7               [ 1] 1366 	ld	(x), a
                                   1367 ;	se8r01-receive-pwm.c: 478: gtemp[2]=0x00;
      000621 1E 06            [ 2] 1368 	ldw	x, (0x06, sp)
      000623 7F               [ 1] 1369 	clr	(x)
                                   1370 ;	se8r01-receive-pwm.c: 479: gtemp[3]=0x7D;
      000624 1E 0E            [ 2] 1371 	ldw	x, (0x0e, sp)
      000626 A6 7D            [ 1] 1372 	ld	a, #0x7d
      000628 F7               [ 1] 1373 	ld	(x), a
                                   1374 ;	se8r01-receive-pwm.c: 480: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_TEST_PKDET, gtemp, 4);
      000629 1E 14            [ 2] 1375 	ldw	x, (0x14, sp)
      00062B 4B 04            [ 1] 1376 	push	#0x04
      00062D 89               [ 2] 1377 	pushw	x
      00062E 4B 3F            [ 1] 1378 	push	#0x3f
      000630 CDr00rA8         [ 4] 1379 	call	_write_spi_buf
      000633 5B 04            [ 2] 1380 	addw	sp, #4
                                   1381 ;	se8r01-receive-pwm.c: 482: rf_switch_bank(iBANK0);
      000635 4B 00            [ 1] 1382 	push	#0x00
      000637 CDr02rD9         [ 4] 1383 	call	_rf_switch_bank
      00063A 84               [ 1] 1384 	pop	a
      00063B 5B 15            [ 2] 1385 	addw	sp, #21
      00063D 81               [ 4] 1386 	ret
                                   1387 ;	se8r01-receive-pwm.c: 485: void SE8R01_Init()  
                                   1388 ;	-----------------------------------------
                                   1389 ;	 function SE8R01_Init
                                   1390 ;	-----------------------------------------
      00063E                       1391 _SE8R01_Init:
      00063E 52 05            [ 2] 1392 	sub	sp, #5
                                   1393 ;	se8r01-receive-pwm.c: 488: SE8R01_Calibration();   
      000640 CDr02rF6         [ 4] 1394 	call	_SE8R01_Calibration
                                   1395 ;	se8r01-receive-pwm.c: 489: SE8R01_Analog_Init();   
      000643 CDr04rC2         [ 4] 1396 	call	_SE8R01_Analog_Init
                                   1397 ;	se8r01-receive-pwm.c: 493: if (SE8R01_DR_2M==1)
      000646 CEu00u00         [ 2] 1398 	ldw	x, _SE8R01_DR_2M+0
      000649 A3 00 01         [ 2] 1399 	cpw	x, #0x0001
      00064C 26 07            [ 1] 1400 	jrne	00105$
                                   1401 ;	se8r01-receive-pwm.c: 494: {  temp[0]=0b01001111; }     //2MHz,+5dbm
      00064E 96               [ 1] 1402 	ldw	x, sp
      00064F 5C               [ 2] 1403 	incw	x
      000650 A6 4F            [ 1] 1404 	ld	a, #0x4f
      000652 F7               [ 1] 1405 	ld	(x), a
      000653 20 14            [ 2] 1406 	jra	00106$
      000655                       1407 00105$:
                                   1408 ;	se8r01-receive-pwm.c: 495: else if  (SE8R01_DR_1M==1)
      000655 CEu00u02         [ 2] 1409 	ldw	x, _SE8R01_DR_1M+0
      000658 A3 00 01         [ 2] 1410 	cpw	x, #0x0001
      00065B 26 07            [ 1] 1411 	jrne	00102$
                                   1412 ;	se8r01-receive-pwm.c: 496: {  temp[0]=0b01000111;  }     //1MHz,+5dbm
      00065D 96               [ 1] 1413 	ldw	x, sp
      00065E 5C               [ 2] 1414 	incw	x
      00065F A6 47            [ 1] 1415 	ld	a, #0x47
      000661 F7               [ 1] 1416 	ld	(x), a
      000662 20 05            [ 2] 1417 	jra	00106$
      000664                       1418 00102$:
                                   1419 ;	se8r01-receive-pwm.c: 498: {temp[0]=0b01101111;  }     //500K,+5dbm
      000664 96               [ 1] 1420 	ldw	x, sp
      000665 5C               [ 2] 1421 	incw	x
      000666 A6 6F            [ 1] 1422 	ld	a, #0x6f
      000668 F7               [ 1] 1423 	ld	(x), a
      000669                       1424 00106$:
                                   1425 ;	se8r01-receive-pwm.c: 500: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK0_RF_SETUP,temp,1);
      000669 96               [ 1] 1426 	ldw	x, sp
      00066A 5C               [ 2] 1427 	incw	x
      00066B 4B 01            [ 1] 1428 	push	#0x01
      00066D 89               [ 2] 1429 	pushw	x
      00066E 4B 26            [ 1] 1430 	push	#0x26
      000670 CDr00rA8         [ 4] 1431 	call	_write_spi_buf
      000673 5B 04            [ 2] 1432 	addw	sp, #4
                                   1433 ;	se8r01-receive-pwm.c: 501: write_spi_reg(WRITE_REG|iRF_BANK0_EN_AA, 0b00111111);          //enable auto acc on pip 1
      000675 4B 3F            [ 1] 1434 	push	#0x3f
      000677 4B 21            [ 1] 1435 	push	#0x21
      000679 CDr00r2E         [ 4] 1436 	call	_write_spi_reg
      00067C 5B 02            [ 2] 1437 	addw	sp, #2
                                   1438 ;	se8r01-receive-pwm.c: 502: write_spi_reg(WRITE_REG|iRF_BANK0_EN_RXADDR, 0b00111111);      //enable pip 1
      00067E 4B 3F            [ 1] 1439 	push	#0x3f
      000680 4B 22            [ 1] 1440 	push	#0x22
      000682 CDr00r2E         [ 4] 1441 	call	_write_spi_reg
      000685 5B 02            [ 2] 1442 	addw	sp, #2
                                   1443 ;	se8r01-receive-pwm.c: 503: write_spi_reg(WRITE_REG|iRF_BANK0_SETUP_AW, 0x02);  
      000687 4B 02            [ 1] 1444 	push	#0x02
      000689 4B 23            [ 1] 1445 	push	#0x23
      00068B CDr00r2E         [ 4] 1446 	call	_write_spi_reg
      00068E 5B 02            [ 2] 1447 	addw	sp, #2
                                   1448 ;	se8r01-receive-pwm.c: 504: write_spi_reg(WRITE_REG|iRF_BANK0_RF_CH, 40);
      000690 4B 28            [ 1] 1449 	push	#0x28
      000692 4B 25            [ 1] 1450 	push	#0x25
      000694 CDr00r2E         [ 4] 1451 	call	_write_spi_reg
      000697 5B 02            [ 2] 1452 	addw	sp, #2
                                   1453 ;	se8r01-receive-pwm.c: 506: write_spi_buf(WRITE_REG + TX_ADDR, ADDRESS0, ADR_WIDTH);    	
      000699 AEr00r1A         [ 2] 1454 	ldw	x, #_ADDRESS0+0
      00069C 90 93            [ 1] 1455 	ldw	y, x
      00069E 89               [ 2] 1456 	pushw	x
      00069F 4B 04            [ 1] 1457 	push	#0x04
      0006A1 90 89            [ 2] 1458 	pushw	y
      0006A3 4B 30            [ 1] 1459 	push	#0x30
      0006A5 CDr00rA8         [ 4] 1460 	call	_write_spi_buf
      0006A8 5B 04            [ 2] 1461 	addw	sp, #4
      0006AA 85               [ 2] 1462 	popw	x
                                   1463 ;	se8r01-receive-pwm.c: 507: write_spi_buf(WRITE_REG + RX_ADDR_P0, ADDRESS0, ADR_WIDTH); 
      0006AB 4B 04            [ 1] 1464 	push	#0x04
      0006AD 89               [ 2] 1465 	pushw	x
      0006AE 4B 2A            [ 1] 1466 	push	#0x2a
      0006B0 CDr00rA8         [ 4] 1467 	call	_write_spi_buf
      0006B3 5B 04            [ 2] 1468 	addw	sp, #4
                                   1469 ;	se8r01-receive-pwm.c: 508: write_spi_buf(WRITE_REG + RX_ADDR_P1, ADDRESS1, ADR_WIDTH); 
      0006B5 AEr00r16         [ 2] 1470 	ldw	x, #_ADDRESS1+0
      0006B8 4B 04            [ 1] 1471 	push	#0x04
      0006BA 89               [ 2] 1472 	pushw	x
      0006BB 4B 2B            [ 1] 1473 	push	#0x2b
      0006BD CDr00rA8         [ 4] 1474 	call	_write_spi_buf
      0006C0 5B 04            [ 2] 1475 	addw	sp, #4
                                   1476 ;	se8r01-receive-pwm.c: 509: write_spi_buf(WRITE_REG + RX_ADDR_P2, ADDRESS2, 1); 
      0006C2 AEr00r12         [ 2] 1477 	ldw	x, #_ADDRESS2+0
      0006C5 4B 01            [ 1] 1478 	push	#0x01
      0006C7 89               [ 2] 1479 	pushw	x
      0006C8 4B 2C            [ 1] 1480 	push	#0x2c
      0006CA CDr00rA8         [ 4] 1481 	call	_write_spi_buf
      0006CD 5B 04            [ 2] 1482 	addw	sp, #4
                                   1483 ;	se8r01-receive-pwm.c: 510: write_spi_buf(WRITE_REG + RX_ADDR_P3, ADDRESS3, 1); 
      0006CF AEr00r13         [ 2] 1484 	ldw	x, #_ADDRESS3+0
      0006D2 4B 01            [ 1] 1485 	push	#0x01
      0006D4 89               [ 2] 1486 	pushw	x
      0006D5 4B 2D            [ 1] 1487 	push	#0x2d
      0006D7 CDr00rA8         [ 4] 1488 	call	_write_spi_buf
      0006DA 5B 04            [ 2] 1489 	addw	sp, #4
                                   1490 ;	se8r01-receive-pwm.c: 511: write_spi_buf(WRITE_REG + RX_ADDR_P4, ADDRESS4, 1); 
      0006DC AEr00r14         [ 2] 1491 	ldw	x, #_ADDRESS4+0
      0006DF 4B 01            [ 1] 1492 	push	#0x01
      0006E1 89               [ 2] 1493 	pushw	x
      0006E2 4B 2E            [ 1] 1494 	push	#0x2e
      0006E4 CDr00rA8         [ 4] 1495 	call	_write_spi_buf
      0006E7 5B 04            [ 2] 1496 	addw	sp, #4
                                   1497 ;	se8r01-receive-pwm.c: 512: write_spi_buf(WRITE_REG + RX_ADDR_P5, ADDRESS5, 1); 
      0006E9 AEr00r15         [ 2] 1498 	ldw	x, #_ADDRESS5+0
      0006EC 4B 01            [ 1] 1499 	push	#0x01
      0006EE 89               [ 2] 1500 	pushw	x
      0006EF 4B 2F            [ 1] 1501 	push	#0x2f
      0006F1 CDr00rA8         [ 4] 1502 	call	_write_spi_buf
      0006F4 5B 04            [ 2] 1503 	addw	sp, #4
                                   1504 ;	se8r01-receive-pwm.c: 513: write_spi_reg(WRITE_REG + RX_PW_P0, PLOAD_WIDTH); 
      0006F6 4B 20            [ 1] 1505 	push	#0x20
      0006F8 4B 31            [ 1] 1506 	push	#0x31
      0006FA CDr00r2E         [ 4] 1507 	call	_write_spi_reg
      0006FD 5B 02            [ 2] 1508 	addw	sp, #2
                                   1509 ;	se8r01-receive-pwm.c: 514: write_spi_reg(WRITE_REG|iRF_BANK0_CONFIG, 0x3f); 
      0006FF 4B 3F            [ 1] 1510 	push	#0x3f
      000701 4B 20            [ 1] 1511 	push	#0x20
      000703 CDr00r2E         [ 4] 1512 	call	_write_spi_reg
      000706 5B 02            [ 2] 1513 	addw	sp, #2
                                   1514 ;	se8r01-receive-pwm.c: 515: write_spi_reg(WRITE_REG|iRF_BANK0_DYNPD, 0b00111111);          // enable dynamic payload length data
      000708 4B 3F            [ 1] 1515 	push	#0x3f
      00070A 4B 3C            [ 1] 1516 	push	#0x3c
      00070C CDr00r2E         [ 4] 1517 	call	_write_spi_reg
      00070F 5B 02            [ 2] 1518 	addw	sp, #2
                                   1519 ;	se8r01-receive-pwm.c: 516: write_spi_reg(WRITE_REG|iRF_BANK0_FEATURE, 0x07);        // enable dynamic paload lenght; enbale payload with ack enable w_tx_payload_noack
      000711 4B 07            [ 1] 1520 	push	#0x07
      000713 4B 3D            [ 1] 1521 	push	#0x3d
      000715 CDr00r2E         [ 4] 1522 	call	_write_spi_reg
      000718 5B 02            [ 2] 1523 	addw	sp, #2
                                   1524 ;	se8r01-receive-pwm.c: 517: PC_ODR |= (1 << CE);
      00071A AE 50 0A         [ 2] 1525 	ldw	x, #0x500a
      00071D F6               [ 1] 1526 	ld	a, (x)
      00071E AA 10            [ 1] 1527 	or	a, #0x10
      000720 F7               [ 1] 1528 	ld	(x), a
      000721 5B 05            [ 2] 1529 	addw	sp, #5
      000723 81               [ 4] 1530 	ret
                                   1531 ;	se8r01-receive-pwm.c: 523: int main () {
                                   1532 ;	-----------------------------------------
                                   1533 ;	 function main
                                   1534 ;	-----------------------------------------
      000724                       1535 _main:
      000724 52 33            [ 2] 1536 	sub	sp, #51
                                   1537 ;	se8r01-receive-pwm.c: 525: UCHAR rx_addr_p1[]  = { 0xd2, 0xf0, 0xf0, 0xf0, 0xf0 };
      000726 90 96            [ 1] 1538 	ldw	y, sp
      000728 72 A9 00 0C      [ 2] 1539 	addw	y, #12
      00072C A6 D2            [ 1] 1540 	ld	a, #0xd2
      00072E 90 F7            [ 1] 1541 	ld	(y), a
      000730 93               [ 1] 1542 	ldw	x, y
      000731 5C               [ 2] 1543 	incw	x
      000732 A6 F0            [ 1] 1544 	ld	a, #0xf0
      000734 F7               [ 1] 1545 	ld	(x), a
      000735 93               [ 1] 1546 	ldw	x, y
      000736 5C               [ 2] 1547 	incw	x
      000737 5C               [ 2] 1548 	incw	x
      000738 A6 F0            [ 1] 1549 	ld	a, #0xf0
      00073A F7               [ 1] 1550 	ld	(x), a
      00073B 93               [ 1] 1551 	ldw	x, y
      00073C A6 F0            [ 1] 1552 	ld	a, #0xf0
      00073E E7 03            [ 1] 1553 	ld	(0x0003, x), a
      000740 93               [ 1] 1554 	ldw	x, y
      000741 A6 F0            [ 1] 1555 	ld	a, #0xf0
      000743 E7 04            [ 1] 1556 	ld	(0x0004, x), a
                                   1557 ;	se8r01-receive-pwm.c: 526: UCHAR tx_addr[]     = { 0xe1, 0xf0, 0xf0, 0xf0, 0xf0 };
      000745 90 96            [ 1] 1558 	ldw	y, sp
      000747 72 A9 00 07      [ 2] 1559 	addw	y, #7
      00074B A6 E1            [ 1] 1560 	ld	a, #0xe1
      00074D 90 F7            [ 1] 1561 	ld	(y), a
      00074F 93               [ 1] 1562 	ldw	x, y
      000750 5C               [ 2] 1563 	incw	x
      000751 A6 F0            [ 1] 1564 	ld	a, #0xf0
      000753 F7               [ 1] 1565 	ld	(x), a
      000754 93               [ 1] 1566 	ldw	x, y
      000755 5C               [ 2] 1567 	incw	x
      000756 5C               [ 2] 1568 	incw	x
      000757 A6 F0            [ 1] 1569 	ld	a, #0xf0
      000759 F7               [ 1] 1570 	ld	(x), a
      00075A 93               [ 1] 1571 	ldw	x, y
      00075B A6 F0            [ 1] 1572 	ld	a, #0xf0
      00075D E7 03            [ 1] 1573 	ld	(0x0003, x), a
      00075F 93               [ 1] 1574 	ldw	x, y
      000760 1C 00 04         [ 2] 1575 	addw	x, #0x0004
      000763 A6 F0            [ 1] 1576 	ld	a, #0xf0
      000765 F7               [ 1] 1577 	ld	(x), a
                                   1578 ;	se8r01-receive-pwm.c: 531: InitializeSystemClock();
      000766 CDr01r44         [ 4] 1579 	call	_InitializeSystemClock
                                   1580 ;	se8r01-receive-pwm.c: 532: InitializeUART();
      000769 CDr02r3C         [ 4] 1581 	call	_InitializeUART
                                   1582 ;	se8r01-receive-pwm.c: 534: InitializeSPI ();
      00076C CDr01r1C         [ 4] 1583 	call	_InitializeSPI
                                   1584 ;	se8r01-receive-pwm.c: 537: memset (tx_payload, 0, sizeof(tx_payload));
      00076F 96               [ 1] 1585 	ldw	x, sp
      000770 1C 00 11         [ 2] 1586 	addw	x, #17
      000773 4B 21            [ 1] 1587 	push	#0x21
      000775 4B 00            [ 1] 1588 	push	#0x00
      000777 4B 00            [ 1] 1589 	push	#0x00
      000779 4B 00            [ 1] 1590 	push	#0x00
      00077B 89               [ 2] 1591 	pushw	x
      00077C CDr00r00         [ 4] 1592 	call	_memset
      00077F 5B 06            [ 2] 1593 	addw	sp, #6
                                   1594 ;	se8r01-receive-pwm.c: 540: init_io();                        // Initialize IO port
      000781 CDr02rB5         [ 4] 1595 	call	_init_io
                                   1596 ;	se8r01-receive-pwm.c: 541: write_spi_reg(FLUSH_RX,0); // receive data 
      000784 4B 00            [ 1] 1597 	push	#0x00
      000786 4B E2            [ 1] 1598 	push	#0xe2
      000788 CDr00r2E         [ 4] 1599 	call	_write_spi_reg
      00078B 5B 02            [ 2] 1600 	addw	sp, #2
                                   1601 ;	se8r01-receive-pwm.c: 542: readstatus = read_spi_reg(CONFIG);
      00078D 4B 00            [ 1] 1602 	push	#0x00
      00078F CDr00r6A         [ 4] 1603 	call	_read_spi_reg
      000792 5B 01            [ 2] 1604 	addw	sp, #1
                                   1605 ;	se8r01-receive-pwm.c: 543: UARTPrintF("config = \n\r");
      000794 AEr08r88         [ 2] 1606 	ldw	x, #___str_0+0
      000797 88               [ 1] 1607 	push	a
      000798 89               [ 2] 1608 	pushw	x
      000799 CDr01rD9         [ 4] 1609 	call	_UARTPrintF
      00079C 5B 02            [ 2] 1610 	addw	sp, #2
      00079E 84               [ 1] 1611 	pop	a
                                   1612 ;	se8r01-receive-pwm.c: 544: print_UCHAR_hex(readstatus);
      00079F 88               [ 1] 1613 	push	a
      0007A0 CDr01rF0         [ 4] 1614 	call	_print_UCHAR_hex
      0007A3 84               [ 1] 1615 	pop	a
                                   1616 ;	se8r01-receive-pwm.c: 545: readstatus = read_spi_reg(STATUS);
      0007A4 4B 07            [ 1] 1617 	push	#0x07
      0007A6 CDr00r6A         [ 4] 1618 	call	_read_spi_reg
      0007A9 5B 01            [ 2] 1619 	addw	sp, #1
                                   1620 ;	se8r01-receive-pwm.c: 546: UARTPrintF("status = \n\r");
      0007AB AEr08r94         [ 2] 1621 	ldw	x, #___str_1+0
      0007AE 88               [ 1] 1622 	push	a
      0007AF 89               [ 2] 1623 	pushw	x
      0007B0 CDr01rD9         [ 4] 1624 	call	_UARTPrintF
      0007B3 5B 02            [ 2] 1625 	addw	sp, #2
      0007B5 84               [ 1] 1626 	pop	a
                                   1627 ;	se8r01-receive-pwm.c: 547: print_UCHAR_hex(readstatus);
      0007B6 88               [ 1] 1628 	push	a
      0007B7 CDr01rF0         [ 4] 1629 	call	_print_UCHAR_hex
      0007BA 84               [ 1] 1630 	pop	a
                                   1631 ;	se8r01-receive-pwm.c: 549: SE8R01_Init();
      0007BB CDr06r3E         [ 4] 1632 	call	_SE8R01_Init
                                   1633 ;	se8r01-receive-pwm.c: 553: while (1) {
      0007BE                       1634 00110$:
                                   1635 ;	se8r01-receive-pwm.c: 555: if ((PD_IDR & (1 << 3))==0) //input low
      0007BE AE 50 10         [ 2] 1636 	ldw	x, #0x5010
      0007C1 F6               [ 1] 1637 	ld	a, (x)
      0007C2 A5 08            [ 1] 1638 	bcp	a, #0x08
      0007C4 27 03            [ 1] 1639 	jreq	00170$
      0007C6 CCr08r4E         [ 2] 1640 	jp	00105$
      0007C9                       1641 00170$:
                                   1642 ;	se8r01-receive-pwm.c: 559: delay(240);
      0007C9 4B F0            [ 1] 1643 	push	#0xf0
      0007CB 4B 00            [ 1] 1644 	push	#0x00
      0007CD CDr01r8E         [ 4] 1645 	call	_delay
      0007D0 5B 02            [ 2] 1646 	addw	sp, #2
                                   1647 ;	se8r01-receive-pwm.c: 560: signal_lv=read_spi_reg(iRF_BANK0_RPD);
      0007D2 4B 09            [ 1] 1648 	push	#0x09
      0007D4 CDr00r6A         [ 4] 1649 	call	_read_spi_reg
      0007D7 5B 01            [ 2] 1650 	addw	sp, #1
      0007D9 C7u00u0A         [ 1] 1651 	ld	_signal_lv+0, a
                                   1652 ;	se8r01-receive-pwm.c: 561: status = read_spi_reg(STATUS);
      0007DC 4B 07            [ 1] 1653 	push	#0x07
      0007DE CDr00r6A         [ 4] 1654 	call	_read_spi_reg
      0007E1 5B 01            [ 2] 1655 	addw	sp, #1
      0007E3 C7u00u0D         [ 1] 1656 	ld	_status+0, a
                                   1657 ;	se8r01-receive-pwm.c: 563: if(status&STA_MARK_RX)                                                 // if receive data ready (TX_DS) interrupt
      0007E6 72 06u00u0D 02   [ 2] 1658 	btjt	_status+0, #6, 00171$
      0007EB 20 57            [ 2] 1659 	jra	00103$
      0007ED                       1660 00171$:
                                   1661 ;	se8r01-receive-pwm.c: 566: pip= (status & 0b00001110)>>1;
      0007ED C6u00u0D         [ 1] 1662 	ld	a, _status+0
      0007F0 A4 0E            [ 1] 1663 	and	a, #0x0e
      0007F2 44               [ 1] 1664 	srl	a
      0007F3 5F               [ 1] 1665 	clrw	x
      0007F4 97               [ 1] 1666 	ld	xl, a
      0007F5 CFu00u0B         [ 2] 1667 	ldw	_pip+0, x
                                   1668 ;	se8r01-receive-pwm.c: 567: pload_width_now=read_spi_reg(iRF_CMD_R_RX_PL_WID);
      0007F8 4B 60            [ 1] 1669 	push	#0x60
      0007FA CDr00r6A         [ 4] 1670 	call	_read_spi_reg
      0007FD 5B 01            [ 2] 1671 	addw	sp, #1
      0007FF 5F               [ 1] 1672 	clrw	x
      000800 97               [ 1] 1673 	ld	xl, a
      000801 CFu00u06         [ 2] 1674 	ldw	_pload_width_now+0, x
                                   1675 ;	se8r01-receive-pwm.c: 568: read_spi_buf(RD_RX_PLOAD, rx_buf,32);             // read playload to rx_buf
      000804 AEr00r1E         [ 2] 1676 	ldw	x, #_rx_buf+0
      000807 1F 32            [ 2] 1677 	ldw	(0x32, sp), x
      000809 1E 32            [ 2] 1678 	ldw	x, (0x32, sp)
      00080B 4B 20            [ 1] 1679 	push	#0x20
      00080D 89               [ 2] 1680 	pushw	x
      00080E 4B 61            [ 1] 1681 	push	#0x61
      000810 CDr00rE0         [ 4] 1682 	call	_read_spi_buf
      000813 5B 04            [ 2] 1683 	addw	sp, #4
                                   1684 ;	se8r01-receive-pwm.c: 569: write_spi_reg(FLUSH_RX,0);
      000815 4B 00            [ 1] 1685 	push	#0x00
      000817 4B E2            [ 1] 1686 	push	#0xe2
      000819 CDr00r2E         [ 4] 1687 	call	_write_spi_reg
      00081C 5B 02            [ 2] 1688 	addw	sp, #2
                                   1689 ;	se8r01-receive-pwm.c: 571: newdata=1;
      00081E 35 01u00u09      [ 1] 1690 	mov	_newdata+1, #0x01
      000822 72 5Fu00u08      [ 1] 1691 	clr	_newdata+0
                                   1692 ;	se8r01-receive-pwm.c: 572: for (teller=0;teller<32;++teller)
      000826 5F               [ 1] 1693 	clrw	x
      000827                       1694 00112$:
                                   1695 ;	se8r01-receive-pwm.c: 573: print_UCHAR_hex (rx_buf[teller]);
      000827 90 93            [ 1] 1696 	ldw	y, x
      000829 72 F9 32         [ 2] 1697 	addw	y, (0x32, sp)
      00082C 90 F6            [ 1] 1698 	ld	a, (y)
      00082E 89               [ 2] 1699 	pushw	x
      00082F 88               [ 1] 1700 	push	a
      000830 CDr01rF0         [ 4] 1701 	call	_print_UCHAR_hex
      000833 84               [ 1] 1702 	pop	a
      000834 85               [ 2] 1703 	popw	x
                                   1704 ;	se8r01-receive-pwm.c: 572: for (teller=0;teller<32;++teller)
      000835 5C               [ 2] 1705 	incw	x
      000836 A3 00 20         [ 2] 1706 	cpw	x, #0x0020
      000839 2F EC            [ 1] 1707 	jrslt	00112$
                                   1708 ;	se8r01-receive-pwm.c: 574: UARTPrintF("\n\r");
      00083B AEr08rA0         [ 2] 1709 	ldw	x, #___str_2+0
      00083E 89               [ 2] 1710 	pushw	x
      00083F CDr01rD9         [ 4] 1711 	call	_UARTPrintF
      000842 5B 02            [ 2] 1712 	addw	sp, #2
      000844                       1713 00103$:
                                   1714 ;	se8r01-receive-pwm.c: 577: write_spi_reg(WRITE_REG+STATUS,status);       // clear RX_DR or TX_DS or MAX_RT interrupt flag
      000844 3Bu00u0D         [ 1] 1715 	push	_status+0
      000847 4B 27            [ 1] 1716 	push	#0x27
      000849 CDr00r2E         [ 4] 1717 	call	_write_spi_reg
      00084C 5B 02            [ 2] 1718 	addw	sp, #2
      00084E                       1719 00105$:
                                   1720 ;	se8r01-receive-pwm.c: 581: for (x1 = 0; x1 < 50; ++x1)
      00084E 5F               [ 1] 1721 	clrw	x
      00084F 1F 05            [ 2] 1722 	ldw	(0x05, sp), x
      000851                       1723 00121$:
      000851 1E 05            [ 2] 1724 	ldw	x, (0x05, sp)
      000853 A3 00 32         [ 2] 1725 	cpw	x, #0x0032
      000856 2F 03            [ 1] 1726 	jrslt	00173$
      000858 CCr07rBE         [ 2] 1727 	jp	00110$
      00085B                       1728 00173$:
                                   1729 ;	se8r01-receive-pwm.c: 582: for (y1 = 0; y1 < 50; ++y1)
      00085B 5F               [ 1] 1730 	clrw	x
      00085C 1F 03            [ 2] 1731 	ldw	(0x03, sp), x
      00085E                       1732 00118$:
      00085E 1E 03            [ 2] 1733 	ldw	x, (0x03, sp)
      000860 A3 00 32         [ 2] 1734 	cpw	x, #0x0032
      000863 2E 19            [ 1] 1735 	jrsge	00122$
                                   1736 ;	se8r01-receive-pwm.c: 583: for (z1 = 0; z1 < 50; ++z1)
      000865 5F               [ 1] 1737 	clrw	x
      000866 1F 01            [ 2] 1738 	ldw	(0x01, sp), x
      000868                       1739 00115$:
      000868 1E 01            [ 2] 1740 	ldw	x, (0x01, sp)
      00086A A3 00 32         [ 2] 1741 	cpw	x, #0x0032
      00086D 2E 08            [ 1] 1742 	jrsge	00119$
                                   1743 ;	se8r01-receive-pwm.c: 584: __asm__("nop");
      00086F 9D               [ 1] 1744 	nop
                                   1745 ;	se8r01-receive-pwm.c: 583: for (z1 = 0; z1 < 50; ++z1)
      000870 1E 01            [ 2] 1746 	ldw	x, (0x01, sp)
      000872 5C               [ 2] 1747 	incw	x
      000873 1F 01            [ 2] 1748 	ldw	(0x01, sp), x
      000875 20 F1            [ 2] 1749 	jra	00115$
      000877                       1750 00119$:
                                   1751 ;	se8r01-receive-pwm.c: 582: for (y1 = 0; y1 < 50; ++y1)
      000877 1E 03            [ 2] 1752 	ldw	x, (0x03, sp)
      000879 5C               [ 2] 1753 	incw	x
      00087A 1F 03            [ 2] 1754 	ldw	(0x03, sp), x
      00087C 20 E0            [ 2] 1755 	jra	00118$
      00087E                       1756 00122$:
                                   1757 ;	se8r01-receive-pwm.c: 581: for (x1 = 0; x1 < 50; ++x1)
      00087E 1E 05            [ 2] 1758 	ldw	x, (0x05, sp)
      000880 5C               [ 2] 1759 	incw	x
      000881 1F 05            [ 2] 1760 	ldw	(0x05, sp), x
      000883 20 CC            [ 2] 1761 	jra	00121$
      000885 5B 33            [ 2] 1762 	addw	sp, #51
      000887 81               [ 4] 1763 	ret
                                   1764 	.area CODE
      000888                       1765 ___str_0:
      000888 63 6F 6E 66 69 67 20  1766 	.ascii "config = "
             3D 20
      000891 0A                    1767 	.db 0x0A
      000892 0D                    1768 	.db 0x0D
      000893 00                    1769 	.db 0x00
      000894                       1770 ___str_1:
      000894 73 74 61 74 75 73 20  1771 	.ascii "status = "
             3D 20
      00089D 0A                    1772 	.db 0x0A
      00089E 0D                    1773 	.db 0x0D
      00089F 00                    1774 	.db 0x00
      0008A0                       1775 ___str_2:
      0008A0 0A                    1776 	.db 0x0A
      0008A1 0D                    1777 	.db 0x0D
      0008A2 00                    1778 	.db 0x00
                                   1779 	.area INITIALIZER
      000000                       1780 __xinit__SE8R01_DR_2M:
      000000 00 00                 1781 	.dw #0x0000
      000002                       1782 __xinit__SE8R01_DR_1M:
      000002 00 00                 1783 	.dw #0x0000
      000004                       1784 __xinit__SE8R01_DR_500K:
      000004 00 01                 1785 	.dw #0x0001
      000006                       1786 __xinit__pload_width_now:
      000006 00 00                 1787 	.dw #0x0000
      000008                       1788 __xinit__newdata:
      000008 00 00                 1789 	.dw #0x0000
      00000A                       1790 __xinit__signal_lv:
      00000A 00                    1791 	.db #0x00	;  0
      00000B                       1792 __xinit__pip:
      00000B 00 00                 1793 	.dw #0x0000
      00000D                       1794 __xinit__status:
      00000D 00                    1795 	.db #0x00	; 0
      00000E                       1796 __xinit__TX_ADDRESS:
      00000E B3                    1797 	.db #0xB3	; 179
      00000F 43                    1798 	.db #0x43	; 67	'C'
      000010 10                    1799 	.db #0x10	; 16
      000011 10                    1800 	.db #0x10	; 16
      000012                       1801 __xinit__ADDRESS2:
      000012 B1                    1802 	.db #0xB1	; 177
      000013                       1803 __xinit__ADDRESS3:
      000013 B2                    1804 	.db #0xB2	; 178
      000014                       1805 __xinit__ADDRESS4:
      000014 B3                    1806 	.db #0xB3	; 179
      000015                       1807 __xinit__ADDRESS5:
      000015 B4                    1808 	.db #0xB4	; 180
      000016                       1809 __xinit__ADDRESS1:
      000016 B0                    1810 	.db #0xB0	; 176
      000017 43                    1811 	.db #0x43	; 67	'C'
      000018 10                    1812 	.db #0x10	; 16
      000019 10                    1813 	.db #0x10	; 16
      00001A                       1814 __xinit__ADDRESS0:
      00001A 34                    1815 	.db #0x34	; 52	'4'
      00001B 43                    1816 	.db #0x43	; 67	'C'
      00001C 10                    1817 	.db #0x10	; 16
      00001D 10                    1818 	.db #0x10	; 16
      00001E                       1819 __xinit__rx_buf:
      00001E 00                    1820 	.db #0x00	; 0
      00001F 00                    1821 	.db 0x00
      000020 00                    1822 	.db 0x00
      000021 00                    1823 	.db 0x00
      000022 00                    1824 	.db 0x00
      000023 00                    1825 	.db 0x00
      000024 00                    1826 	.db 0x00
      000025 00                    1827 	.db 0x00
      000026 00                    1828 	.db 0x00
      000027 00                    1829 	.db 0x00
      000028 00                    1830 	.db 0x00
      000029 00                    1831 	.db 0x00
      00002A 00                    1832 	.db 0x00
      00002B 00                    1833 	.db 0x00
      00002C 00                    1834 	.db 0x00
      00002D 00                    1835 	.db 0x00
      00002E 00                    1836 	.db 0x00
      00002F 00                    1837 	.db 0x00
      000030 00                    1838 	.db 0x00
      000031 00                    1839 	.db 0x00
      000032 00                    1840 	.db 0x00
      000033 00                    1841 	.db 0x00
      000034 00                    1842 	.db 0x00
      000035 00                    1843 	.db 0x00
      000036 00                    1844 	.db 0x00
      000037 00                    1845 	.db 0x00
      000038 00                    1846 	.db 0x00
      000039 00                    1847 	.db 0x00
      00003A 00                    1848 	.db 0x00
      00003B 00                    1849 	.db 0x00
      00003C 00                    1850 	.db 0x00
      00003D 00                    1851 	.db 0x00
      00003E                       1852 __xinit__tx_buf:
      00003E 00                    1853 	.db #0x00	; 0
      00003F 00                    1854 	.db 0x00
      000040 00                    1855 	.db 0x00
      000041 00                    1856 	.db 0x00
      000042 00                    1857 	.db 0x00
      000043 00                    1858 	.db 0x00
      000044 00                    1859 	.db 0x00
      000045 00                    1860 	.db 0x00
      000046 00                    1861 	.db 0x00
      000047 00                    1862 	.db 0x00
      000048 00                    1863 	.db 0x00
      000049 00                    1864 	.db 0x00
      00004A 00                    1865 	.db 0x00
      00004B 00                    1866 	.db 0x00
      00004C 00                    1867 	.db 0x00
      00004D 00                    1868 	.db 0x00
      00004E 00                    1869 	.db 0x00
      00004F 00                    1870 	.db 0x00
      000050 00                    1871 	.db 0x00
      000051 00                    1872 	.db 0x00
      000052 00                    1873 	.db 0x00
      000053 00                    1874 	.db 0x00
      000054 00                    1875 	.db 0x00
      000055 00                    1876 	.db 0x00
      000056 00                    1877 	.db 0x00
      000057 00                    1878 	.db 0x00
      000058 00                    1879 	.db 0x00
      000059 00                    1880 	.db 0x00
      00005A 00                    1881 	.db 0x00
      00005B 00                    1882 	.db 0x00
      00005C 00                    1883 	.db 0x00
      00005D 00                    1884 	.db 0x00
                                   1885 	.area CABS (ABS)
